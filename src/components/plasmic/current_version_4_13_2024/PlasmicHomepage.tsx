// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: hrWU9AUtdsgxeyADqj1u9c
// Component: saD4s3QiSLhV

import * as React from "react";

import {
  Link,
  GatsbyLinkProps as LinkProps,
  navigate as __gatsbyNavigate
} from "gatsby";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import Button from "../../Button"; // plasmic-import: Y8ojvDMss_pp/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import { AntdOption } from "@plasmicpkgs/antd5/skinny/registerSelect";
import { AntdAccordion } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { accordionHelpers as AntdAccordion_Helpers } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { AntdAccordionItem } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { AntdSingleCollapse } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { singleCollapseHelpers as AntdSingleCollapse_Helpers } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { Popover } from "@plasmicpkgs/radix-ui";
import Button2 from "../../Button"; // plasmic-import: 5nirPCGmCnRD/component

import "@plasmicapp/react-web/lib/plasmic.css";

import * as plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import * as projectcss from "./plasmic.module.css"; // plasmic-import: hrWU9AUtdsgxeyADqj1u9c/projectcss
import * as sty from "./PlasmicHomepage.module.css"; // plasmic-import: saD4s3QiSLhV/css

import SortAmountDownSvgrepoComsvgIcon from "./icons/PlasmicIcon__SortAmountDownSvgrepoComsvg"; // plasmic-import: YqlOubMh3qXz/icon
import SortAmountUpSvgrepoComsvgIcon from "./icons/PlasmicIcon__SortAmountUpSvgrepoComsvg"; // plasmic-import: CaOhLfmCOCBf/icon
import ChecksvgIcon from "../radix_ui/icons/PlasmicIcon__Checksvg"; // plasmic-import: Wyt3GMMsLefj/icon
import IconIcon from "../radix_ui/icons/PlasmicIcon__Icon"; // plasmic-import: MbDRsJU0e3bw/icon
import logoNoBackgroundpngFI6KbVoeO4Hj from "./images/logoNoBackgroundpng.png"; // plasmic-import: fI6kbVoeO4hj/picture

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: Flex__<"div">;
  columnHeaders?: Flex__<"section">;
  stateSortButton?: Flex__<typeof Button>;
  dataSection?: Flex__<"section">;
  filters?: Flex__<"section">;
  stateDataFetcher?: Flex__<typeof Fetcher>;
  stateSelectParent?: Flex__<typeof AntdSelect>;
  stateSelectOption?: Flex__<typeof AntdOption>;
  licenseTypeSelect?: Flex__<typeof AntdSelect>;
  option?: Flex__<typeof AntdOption>;
  stateListAccordion?: Flex__<typeof AntdAccordion>;
  accordionItem?: Flex__<typeof AntdAccordionItem>;
  servicingLicenseCollapse?: Flex__<typeof AntdSingleCollapse>;
  creditorRegistrationCollapse2?: Flex__<typeof AntdSingleCollapse>;
  servicingNotificationCollapse?: Flex__<typeof AntdSingleCollapse>;
  popoverCore?: Flex__<typeof Popover>;
  popoverCore2?: Flex__<typeof Popover>;
};

export interface DefaultHomepageProps {
  className?: string;
}

const $$ = {};

export function Head() {
  return <></>;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "stateSelectParent.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "stateListAccordion.activePanelId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec(
          "activePanelId",
          AntdAccordion_Helpers
        )
      },
      {
        path: "licenseTypeSelect.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "servicingLicenseCollapse[].open",
        type: "private",
        variableType: "boolean",

        onMutate: generateOnMutateForSpec("open", AntdSingleCollapse_Helpers)
      },
      {
        path: "creditorRegistrationCollapse2[].open",
        type: "private",
        variableType: "boolean",

        onMutate: generateOnMutateForSpec("open", AntdSingleCollapse_Helpers)
      },
      {
        path: "servicingNotificationCollapse[].open",
        type: "private",
        variableType: "boolean",

        onMutate: generateOnMutateForSpec("open", AntdSingleCollapse_Helpers)
      },
      {
        path: "popoverCore.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "popoverCore2.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "stateSortVariable",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "sortByServcingLicense",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    stateListByStateFilterQuery: usePlasmicDataOp(() => {
      return {
        sourceId: "ipSSrwDSmeSif598bAYugE",
        opId: "10319785-63f3-4fdb-8659-79c2e552eaca",
        userArgs: {
          path: [
            typeof $state.stateSelectParent.value === "undefined"
              ? ""
              : "filters=%7B%22filter_type%22%3A%22OR%22%2C%22filters%22%3A%5B%7B%22type%22%3A%22equal%22%2C%22field%22%3A%22state%22%2C%22value%22%3A%22" +
                $state.stateSelectParent.value.join(
                  "%22%7D%2C%7B%22type%22%3A%22equal%22%2C%22field%22%3A%22state%22%2C%22value%22%3A%22"
                ) +
                "%22%7D%5D%2C%22groups%22%3A%5B%5D%7D"
          ]
        },
        cacheKey: `plasmic.$.10319785-63f3-4fdb-8659-79c2e552eaca.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    licenseTypeNoFilter: usePlasmicDataOp(() => {
      return {
        sourceId: "ipSSrwDSmeSif598bAYugE",
        opId: "0df8380b-bd6a-4cf2-95eb-46ba001fedc9",
        userArgs: {},
        cacheKey: `plasmic.$.0df8380b-bd6a-4cf2-95eb-46ba001fedc9.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    stateListByLicenseTypeQuery: usePlasmicDataOp(() => {
      return {
        sourceId: "ipSSrwDSmeSif598bAYugE",
        opId: "10319785-63f3-4fdb-8659-79c2e552eaca",
        userArgs: {
          path: [
            typeof $state.licenseTypeSelect.value === "undefined"
              ? ""
              : "?user_field_names=true&filters=%7B%22filter_type%22%3A%22AND%22%2C%22filters%22%3A%5B%7B%22type%22%3A%22link_row_has%22%2C%22field%22%3A%22license_type_lookup%22%2C%22value%22%3A%22" +
                $state.licenseTypeSelect.value.join(
                  "%22%7D%2C%7B%22type%22%3A%22link_row_has%22%2C%22field%22%3A%22license_type_lookup%22%2C%22value%22%3A%22"
                ) +
                "%22%7D%5D%2C%22groups%22%3A%5B%5D%7D"
          ]
        },
        cacheKey: `plasmic.$.10319785-63f3-4fdb-8659-79c2e552eaca.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    allQuery: usePlasmicDataOp(() => {
      return {
        sourceId: "ipSSrwDSmeSif598bAYugE",
        opId: "93c5e080-652b-4fa5-a47a-6bdb4a86bb82",
        userArgs: {
          params: [
            `{"filter_type":"AND","filters":[],"groups":[{"filter_type":"OR","filters":[{"type":"equal","field":"state","value":"` +
              ($state.stateSelectParent.value === undefined
                ? ""
                : $state.stateSelectParent.value.join(
                    `"},{"type":"equal","field":"state","value":"`
                  )) +
              `"}],"groups":[]},{"filter_type":"OR","filters":[{"type":"link_row_has","field":"license_type_lookup","value":"` +
              ($state.licenseTypeSelect.value === undefined
                ? ""
                : $state.licenseTypeSelect.value.join(
                    `"},{"type":"link_row_has","field":"license_type_lookup","value":"`
                  )) +
              `"}],"groups":[]}]}`,
            $state.stateSortVariable == 1 ? "-state" : "state"
          ]
        },
        cacheKey: `plasmic.$.93c5e080-652b-4fa5-a47a-6bdb4a86bb82.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    onlyStatesWLicensesQuery: usePlasmicDataOp(() => {
      return {
        sourceId: "ipSSrwDSmeSif598bAYugE",
        opId: "7749abe9-3c22-4c8b-aa2e-149fc935c3d5",
        userArgs: {
          params: [
            `{"filter_type":"OR","filters":[{"type":"not_empty","field":"license_type_lookup","value":""}],"groups":[]}`
          ]
        },
        cacheKey: `plasmic.$.7749abe9-3c22-4c8b-aa2e-149fc935c3d5.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <section
            data-plasmic-name={"columnHeaders"}
            data-plasmic-override={overrides.columnHeaders}
            className={classNames(projectcss.all, sty.columnHeaders)}
          >
            <div className={classNames(projectcss.all, sty.columns__fvwmX)}>
              <div className={classNames(projectcss.all, sty.column__dhAh)}>
                <Button
                  data-plasmic-name={"stateSortButton"}
                  data-plasmic-override={overrides.stateSortButton}
                  className={classNames("__wab_instance", sty.stateSortButton)}
                  color={"clear"}
                  endIcon={
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.stateSortVariable == 0;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <SortAmountDownSvgrepoComsvgIcon
                          className={classNames(projectcss.all, sty.svg__fVxKp)}
                          role={"img"}
                        />
                      ) : null}
                      {(() => {
                        try {
                          return $state.stateSortVariable == 1;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <SortAmountUpSvgrepoComsvgIcon
                          className={classNames(projectcss.all, sty.svg__g7Kny)}
                          role={"img"}
                        />
                      ) : null}
                    </React.Fragment>
                  }
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateStateSortVariable"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["stateSortVariable"]
                            },
                            operation: 0,
                            value:
                              $state.stateSortVariable + 1 == 2
                                ? $state.stateSortVariable.valueOf() - 1
                                : $state.stateSortVariable + 1
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateStateSortVariable"] != null &&
                      typeof $steps["updateStateSortVariable"] === "object" &&
                      typeof $steps["updateStateSortVariable"].then ===
                        "function"
                    ) {
                      $steps["updateStateSortVariable"] = await $steps[
                        "updateStateSortVariable"
                      ];
                    }
                  }}
                  showEndIcon={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__hsX
                    )}
                  >
                    {"State"}
                  </div>
                </Button>
              </div>
              {(() => {
                try {
                  return (
                    $state.licenseTypeSelect.value.flat().indexOf(1) != -1 ||
                    $state.licenseTypeSelect.value.length == 0
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div className={classNames(projectcss.all, sty.column__xNFzH)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xvHf
                    )}
                  >
                    {"Licenses Student Loan Servicers?"}
                  </div>
                </div>
              ) : null}
              {(() => {
                try {
                  return (
                    $state.licenseTypeSelect.value.flat().indexOf(2) != -1 ||
                    $state.licenseTypeSelect.value.length == 0
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div className={classNames(projectcss.all, sty.column__mNmv)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__kk9Nk
                    )}
                  >
                    {"Student Loan Creditors Must Register?"}
                  </div>
                </div>
              ) : null}
              {(() => {
                try {
                  return (
                    $state.licenseTypeSelect.value.flat().indexOf(3) != -1 ||
                    $state.licenseTypeSelect.value.length == 0
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div className={classNames(projectcss.all, sty.column___4NRPd)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__cXPpP
                    )}
                  >
                    {"Student Loan Servicing Notification"}
                  </div>
                </div>
              ) : null}
            </div>
          </section>
          <section
            data-plasmic-name={"dataSection"}
            data-plasmic-override={overrides.dataSection}
            className={classNames(projectcss.all, sty.dataSection)}
          >
            <div className={classNames(projectcss.all, sty.columns__lcNqe)}>
              <div className={classNames(projectcss.all, sty.column__cSeZ)}>
                <section
                  data-plasmic-name={"filters"}
                  data-plasmic-override={overrides.filters}
                  className={classNames(projectcss.all, sty.filters)}
                >
                  <section
                    className={classNames(projectcss.all, sty.section__ehUb)}
                  >
                    <PlasmicLink__
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link___7Zt4O
                      )}
                      component={Link}
                      href={"www.joshualawfirm.com"}
                      platform={"gatsby"}
                      target={"_blank"}
                      title={"Open Joshua Law Firm website in new tab"}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img___1GQTc)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"none"}
                        displayMinHeight={"0"}
                        displayMinWidth={"auto"}
                        displayWidth={"200px"}
                        loading={"lazy"}
                        src={{
                          src: logoNoBackgroundpngFI6KbVoeO4Hj,
                          fullWidth: 1000,
                          fullHeight: 169,
                          aspectRatio: undefined
                        }}
                      />
                    </PlasmicLink__>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__oYopH
                      )}
                    >
                      {"Filters"}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__sDMck)}
                    >
                      <Fetcher
                        data-plasmic-name={"stateDataFetcher"}
                        data-plasmic-override={overrides.stateDataFetcher}
                        className={classNames(
                          "__wab_instance",
                          sty.stateDataFetcher
                        )}
                        dataOp={{
                          sourceId: "ipSSrwDSmeSif598bAYugE",
                          opId: "8d5ef383-d0e1-4716-aa32-1e9c5a2c187a",
                          userArgs: {},
                          cacheKey: `plasmic.$.meB56q5pRhH_.$.8d5ef383-d0e1-4716-aa32-1e9c5a2c187a.$.`,
                          invalidatedKeys: null,
                          roleId: null
                        }}
                        name={"state_names"}
                        queries={$queries}
                      >
                        {($queries: any) => (
                          <AntdSelect
                            data-plasmic-name={"stateSelectParent"}
                            data-plasmic-override={overrides.stateSelectParent}
                            allowClear={true}
                            className={classNames(
                              "__wab_instance",
                              sty.stateSelectParent
                            )}
                            defaultStylesClassName={classNames(
                              projectcss.root_reset,
                              projectcss.plasmic_default_styles,
                              projectcss.plasmic_mixins,
                              projectcss.plasmic_tokens,
                              plasmic_antd_5_hostless_css.plasmic_tokens
                            )}
                            mode={"multiple"}
                            onChange={generateStateOnChangeProp($state, [
                              "stateSelectParent",
                              "value"
                            ])}
                            optionClassName={classNames({
                              [sty["pcls_4rSEPadjnybh"]]: true
                            })}
                            options={[]}
                            placeholder={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__tvXJt
                                )}
                              >
                                {"By state(s)"}
                              </div>
                            }
                            popupScopeClassName={
                              sty["stateSelectParent__popup"]
                            }
                            showSearch={false}
                            useChildren={true}
                            value={generateStateValueProp($state, [
                              "stateSelectParent",
                              "value"
                            ])}
                          >
                            {(_par =>
                              !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                              (() => {
                                try {
                                  return $queries.state_names.data.response
                                    .results;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()
                            ).map((__plasmic_item_0, __plasmic_idx_0) => {
                              const currentItem = __plasmic_item_0;
                              const currentIndex = __plasmic_idx_0;
                              return (
                                <AntdOption
                                  data-plasmic-name={"stateSelectOption"}
                                  data-plasmic-override={
                                    overrides.stateSelectOption
                                  }
                                  className={classNames(
                                    "__wab_instance",
                                    sty.stateSelectOption
                                  )}
                                  key={currentIndex}
                                  value={(() => {
                                    try {
                                      return currentItem.state;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.state;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Option";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </AntdOption>
                              );
                            })}
                          </AntdSelect>
                        )}
                      </Fetcher>
                      <AntdSelect
                        data-plasmic-name={"licenseTypeSelect"}
                        data-plasmic-override={overrides.licenseTypeSelect}
                        allowClear={true}
                        className={classNames(
                          "__wab_instance",
                          sty.licenseTypeSelect
                        )}
                        defaultStylesClassName={classNames(
                          projectcss.root_reset,
                          projectcss.plasmic_default_styles,
                          projectcss.plasmic_mixins,
                          projectcss.plasmic_tokens,
                          plasmic_antd_5_hostless_css.plasmic_tokens
                        )}
                        mode={"multiple"}
                        onChange={generateStateOnChangeProp($state, [
                          "licenseTypeSelect",
                          "value"
                        ])}
                        options={[
                          {
                            value: "option1",
                            label: "Option 1",
                            type: "option"
                          },
                          {
                            value: "option2",
                            label: "Option 2",
                            type: "option"
                          }
                        ]}
                        placeholder={"By license type(s)"}
                        popupScopeClassName={sty["licenseTypeSelect__popup"]}
                        useChildren={true}
                        value={generateStateValueProp($state, [
                          "licenseTypeSelect",
                          "value"
                        ])}
                      >
                        {(_par =>
                          !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                          (() => {
                            try {
                              return $queries.licenseTypeNoFilter.data.response
                                .results;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        ).map((__plasmic_item_0, __plasmic_idx_0) => {
                          const currentItem = __plasmic_item_0;
                          const currentIndex = __plasmic_idx_0;
                          return (
                            <AntdOption
                              data-plasmic-name={"option"}
                              data-plasmic-override={overrides.option}
                              className={classNames(
                                "__wab_instance",
                                sty.option
                              )}
                              key={currentIndex}
                              value={(() => {
                                try {
                                  return currentItem.id;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__aq5YQ
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return currentItem.name;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "Option";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </AntdOption>
                          );
                        })}
                      </AntdSelect>
                    </div>
                  </section>
                </section>
                {(() => {
                  const child$Props = {
                    activeKey: generateStateValueProp($state, [
                      "stateListAccordion",
                      "activePanelId"
                    ]),
                    bordered: true,
                    className: classNames(
                      "__wab_instance",
                      sty.stateListAccordion
                    ),
                    ghost: true,
                    items: (_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $queries.allQuery.data.response.results;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <AntdAccordionItem
                          data-plasmic-name={"accordionItem"}
                          data-plasmic-override={overrides.accordionItem}
                          className={classNames(
                            "__wab_instance",
                            sty.accordionItem
                          )}
                          headerClass={classNames({
                            [sty["pcls_-wUzuQg1HLzh"]]: true
                          })}
                          id={(() => {
                            try {
                              return currentIndex;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          key={currentIndex}
                          label2={
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.columns__dsBt8
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.column__uurr4
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__tuGW
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.state;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Second Item";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </div>
                              {(() => {
                                try {
                                  return (
                                    $state.licenseTypeSelect.value
                                      .flat()
                                      .indexOf(1) != -1 ||
                                    $state.licenseTypeSelect.value.length == 0
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.column___2ZrnV
                                  )}
                                >
                                  {(() => {
                                    try {
                                      return (
                                        currentItem.license_type_lookup.filter(
                                          obj =>
                                            obj.value ===
                                            "Student Loan Servicing License"
                                        ).length > 0
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })() ? (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__uhJo
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return currentItem.license_type_lookup.filter(
                                              obj =>
                                                obj.value ===
                                                "Student Loan Servicing License"
                                            ).length > 0
                                              ? "Yes"
                                              : "No";
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                  ) : null}
                                  {(() => {
                                    try {
                                      return (
                                        currentItem.license_type_lookup.filter(
                                          obj =>
                                            obj.value ===
                                            "Student Loan Servicing License"
                                        ).length == 0
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })() ? (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__l5Vc1
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return currentItem.license_type_lookup.filter(
                                              obj =>
                                                obj.value ===
                                                "Student Loan Servicing License"
                                            ).length > 0
                                              ? "Yes"
                                              : "No";
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                  ) : null}
                                </div>
                              ) : null}
                              {(() => {
                                try {
                                  return (
                                    $state.licenseTypeSelect.value
                                      .flat()
                                      .indexOf(2) != -1 ||
                                    $state.licenseTypeSelect.value.length == 0
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.column___8Q3Xp
                                  )}
                                >
                                  {(() => {
                                    try {
                                      return (
                                        currentItem.license_type_lookup.filter(
                                          obj =>
                                            obj.value ===
                                            "Student Loan Creditor Registration"
                                        ).length > 0
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })() ? (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__yw8Ls
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return currentItem.license_type_lookup.filter(
                                              obj =>
                                                obj.value ===
                                                "Student Loan Creditor Registration"
                                            ).length > 0
                                              ? "Yes"
                                              : "No";
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                  ) : null}
                                  {(() => {
                                    try {
                                      return (
                                        currentItem.license_type_lookup.filter(
                                          obj =>
                                            obj.value ===
                                            "Student Loan Creditor Registration"
                                        ).length == 0
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })() ? (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__onm0O
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return currentItem.license_type_lookup.filter(
                                              obj =>
                                                obj.value ===
                                                "Student Loan Creditor Registration"
                                            ).length > 0
                                              ? "Yes"
                                              : "No";
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                  ) : null}
                                </div>
                              ) : null}
                              {(() => {
                                try {
                                  return (
                                    $state.licenseTypeSelect.value
                                      .flat()
                                      .indexOf(3) != -1 ||
                                    $state.licenseTypeSelect.value.length == 0
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.column___1AtY1
                                  )}
                                >
                                  {(() => {
                                    try {
                                      return (
                                        currentItem.license_type_lookup.filter(
                                          obj =>
                                            obj.value ===
                                            "Student Loan Ombudsman Notification"
                                        ).length > 0
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })() ? (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text___02F
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return currentItem.license_type_lookup.filter(
                                              obj =>
                                                obj.value ===
                                                "Student Loan Ombudsman Notification"
                                            ).length > 0
                                              ? "Yes"
                                              : "No";
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                  ) : null}
                                  {(() => {
                                    try {
                                      return (
                                        currentItem.license_type_lookup.filter(
                                          obj =>
                                            obj.value ===
                                            "Student Loan Ombudsman Notification"
                                        ).length == 0
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })() ? (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__gXqC
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return currentItem.license_type_lookup.filter(
                                              obj =>
                                                obj.value ===
                                                "Student Loan Ombudsman Notification"
                                            ).length > 0
                                              ? "Yes"
                                              : "No";
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                  ) : null}
                                </div>
                              ) : null}
                            </div>
                          }
                          showArrow={true}
                        >
                          {(() => {
                            try {
                              return (
                                currentItem.license_type_lookup.filter(
                                  obj =>
                                    obj.value ===
                                    "Student Loan Servicing License"
                                ).length > 0 &&
                                ($state.licenseTypeSelect.value
                                  .flat(3)
                                  .indexOf(1) != -1 ||
                                  $state.licenseTypeSelect.value.length == 0)
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })()
                            ? (() => {
                                const child$Props = {
                                  bordered: true,
                                  className: classNames(
                                    "__wab_instance",
                                    sty.servicingLicenseCollapse
                                  ),
                                  headerClass: classNames({
                                    [sty["pcls_yPEspZSs97-D"]]: true
                                  }),
                                  label2:
                                    "Student Loan Servicing License Information",
                                  onChange:
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "open",
                                      [
                                        "servicingLicenseCollapse",
                                        __plasmic_idx_0,
                                        "open"
                                      ],
                                      AntdSingleCollapse_Helpers
                                    ),
                                  open: generateStateValueProp($state, [
                                    "servicingLicenseCollapse",
                                    __plasmic_idx_0,
                                    "open"
                                  ]),
                                  showArrow: true
                                };
                                initializeCodeComponentStates(
                                  $state,
                                  [
                                    {
                                      name: "open",
                                      plasmicStateName:
                                        "servicingLicenseCollapse[].open"
                                    }
                                  ],
                                  [__plasmic_idx_0],
                                  AntdSingleCollapse_Helpers ?? {},
                                  child$Props
                                );
                                initializePlasmicStates(
                                  $state,
                                  [
                                    {
                                      name: "servicingLicenseCollapse[].open",
                                      initFunc: ({
                                        $props,
                                        $state,
                                        $queries
                                      }) => undefined
                                    }
                                  ],
                                  [__plasmic_idx_0]
                                );
                                return (
                                  <AntdSingleCollapse
                                    data-plasmic-name={
                                      "servicingLicenseCollapse"
                                    }
                                    data-plasmic-override={
                                      overrides.servicingLicenseCollapse
                                    }
                                    {...child$Props}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.columns__wyPi4
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.column__w68YQ
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__m1UFt
                                          )}
                                        >
                                          {'Definition of "Servicing"'}
                                        </div>
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.column__agfId
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__nMjTm
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return currentItem.serv_def_servicing;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                      </div>
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.columns___9Szb7
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.column__iM5Hx
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__d52Mp
                                          )}
                                        >
                                          {'Definition of "Student Loan"'}
                                        </div>
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.column__l13Sq
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__ud5
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return currentItem.serv_def_studentloan;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                      </div>
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.columns__tBXtu
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.column__fzeup
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text___7MIP
                                          )}
                                        >
                                          {
                                            "Who must obtain a student loan servicing license?"
                                          }
                                        </div>
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.column___2SrG
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__bDuPe
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return currentItem.serv_who_needs;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                      </div>
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.columns__ys5Ev
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.column__gy1Pd
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__wNbaw
                                          )}
                                        >
                                          {"What exemptions apply?"}
                                        </div>
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.column__bTZzw
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__cjm6A
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return currentItem.serv_exceptions;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                      </div>
                                    </div>
                                  </AntdSingleCollapse>
                                );
                              })()
                            : null}
                          {(() => {
                            try {
                              return (
                                currentItem.license_type_lookup.filter(
                                  obj =>
                                    obj.value ===
                                    "Student Loan Creditor Registration"
                                ).length > 0 &&
                                ($state.licenseTypeSelect.value
                                  .flat(3)
                                  .indexOf(2) != -1 ||
                                  $state.licenseTypeSelect.value.length == 0)
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })()
                            ? (() => {
                                const child$Props = {
                                  bordered: true,
                                  className: classNames(
                                    "__wab_instance",
                                    sty.creditorRegistrationCollapse2
                                  ),
                                  headerClass: classNames({
                                    [sty["pcls_y-y3wA-LxKqX"]]: true
                                  }),
                                  label2:
                                    "Student Loan Creditor Registration Information",
                                  onChange:
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "open",
                                      [
                                        "creditorRegistrationCollapse2",
                                        __plasmic_idx_0,
                                        "open"
                                      ],
                                      AntdSingleCollapse_Helpers
                                    ),
                                  open: generateStateValueProp($state, [
                                    "creditorRegistrationCollapse2",
                                    __plasmic_idx_0,
                                    "open"
                                  ]),
                                  showArrow: true
                                };
                                initializeCodeComponentStates(
                                  $state,
                                  [
                                    {
                                      name: "open",
                                      plasmicStateName:
                                        "creditorRegistrationCollapse2[].open"
                                    }
                                  ],
                                  [__plasmic_idx_0],
                                  AntdSingleCollapse_Helpers ?? {},
                                  child$Props
                                );
                                initializePlasmicStates(
                                  $state,
                                  [
                                    {
                                      name: "creditorRegistrationCollapse2[].open",
                                      initFunc: ({
                                        $props,
                                        $state,
                                        $queries
                                      }) => undefined
                                    }
                                  ],
                                  [__plasmic_idx_0]
                                );
                                return (
                                  <AntdSingleCollapse
                                    data-plasmic-name={
                                      "creditorRegistrationCollapse2"
                                    }
                                    data-plasmic-override={
                                      overrides.creditorRegistrationCollapse2
                                    }
                                    {...child$Props}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.columns__ynvN
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.column__p69Ux
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__rwzdY
                                          )}
                                        >
                                          {
                                            "Who must register as a Student Loan Creditor"
                                          }
                                        </div>
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.column__jib6V
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__rBmx
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return currentItem.reg_who_needs;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                      </div>
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.columns__ngYmd
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.column__xAetN
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__xzCo3
                                          )}
                                        >
                                          {
                                            'What is the definition of "Student Loan" for registration purposes?'
                                          }
                                        </div>
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.column__xs4X
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text___6T5Sn
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return currentItem.reg_defin_studentloan;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                      </div>
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.columns__hDoCd
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.column___7NWd
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text___7S5Dq
                                          )}
                                        >
                                          {
                                            "What exemptions to creditor registration might apply?"
                                          }
                                        </div>
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.column__dlF4K
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__ne1CP
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return currentItem.reg_exceptions;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                      </div>
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.columns__euLm8
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.column__eq5K4
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__bNvBx
                                          )}
                                        >
                                          {
                                            "What exemptions to creditor registration might apply?"
                                          }
                                        </div>
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.column__ks4Q
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text___864Ln
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return currentItem.reg_exceptions;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                      </div>
                                    </div>
                                  </AntdSingleCollapse>
                                );
                              })()
                            : null}
                          {(() => {
                            try {
                              return (
                                currentItem.license_type_lookup.filter(
                                  obj =>
                                    obj.value ===
                                    "Student Loan Ombudsman Notification"
                                ).length > 0 &&
                                ($state.licenseTypeSelect.value
                                  .flat(3)
                                  .indexOf(3) != -1 ||
                                  $state.licenseTypeSelect.value.length == 0)
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })()
                            ? (() => {
                                const child$Props = {
                                  bordered: true,
                                  className: classNames(
                                    "__wab_instance",
                                    sty.servicingNotificationCollapse
                                  ),
                                  headerClass: classNames({
                                    [sty["pcls_4PoKqHMlW4uR"]]: true
                                  }),
                                  label2:
                                    "Student Loan Servicing Ombudsman Notification Information",
                                  onChange:
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "open",
                                      [
                                        "servicingNotificationCollapse",
                                        __plasmic_idx_0,
                                        "open"
                                      ],
                                      AntdSingleCollapse_Helpers
                                    ),
                                  open: generateStateValueProp($state, [
                                    "servicingNotificationCollapse",
                                    __plasmic_idx_0,
                                    "open"
                                  ]),
                                  showArrow: true
                                };
                                initializeCodeComponentStates(
                                  $state,
                                  [
                                    {
                                      name: "open",
                                      plasmicStateName:
                                        "servicingNotificationCollapse[].open"
                                    }
                                  ],
                                  [__plasmic_idx_0],
                                  AntdSingleCollapse_Helpers ?? {},
                                  child$Props
                                );
                                initializePlasmicStates(
                                  $state,
                                  [
                                    {
                                      name: "servicingNotificationCollapse[].open",
                                      initFunc: ({
                                        $props,
                                        $state,
                                        $queries
                                      }) => undefined
                                    }
                                  ],
                                  [__plasmic_idx_0]
                                );
                                return (
                                  <AntdSingleCollapse
                                    data-plasmic-name={
                                      "servicingNotificationCollapse"
                                    }
                                    data-plasmic-override={
                                      overrides.servicingNotificationCollapse
                                    }
                                    {...child$Props}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.columns__x0Mg
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.column__cwqT
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__s5NXv
                                          )}
                                        >
                                          {
                                            "Who must file a notification with the Student Loan Ombudsman"
                                          }
                                        </div>
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.column___44Ccv
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__cojp
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return currentItem.notification_info;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                      </div>
                                    </div>
                                  </AntdSingleCollapse>
                                );
                              })()
                            : null}
                        </AntdAccordionItem>
                      );
                    }),
                    onChange: generateStateOnChangePropForCodeComponents(
                      $state,
                      "activePanelId",
                      ["stateListAccordion", "activePanelId"],
                      AntdAccordion_Helpers
                    ),
                    size: "small"
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "activePanelId",
                        plasmicStateName: "stateListAccordion.activePanelId"
                      }
                    ],
                    [],
                    AntdAccordion_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <AntdAccordion
                      data-plasmic-name={"stateListAccordion"}
                      data-plasmic-override={overrides.stateListAccordion}
                      {...child$Props}
                    />
                  );
                })()}
              </div>
            </div>
          </section>
          <section className={classNames(projectcss.all, sty.section__pGvMs)}>
            <div className={classNames(projectcss.all, sty.columns__ap2Q4)}>
              <div className={classNames(projectcss.all, sty.column__atkSu)}>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__ozl8O
                  )}
                  component={Link}
                  platform={"gatsby"}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img___0TWan)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: logoNoBackgroundpngFI6KbVoeO4Hj,
                      fullWidth: 1000,
                      fullHeight: 169,
                      aspectRatio: undefined
                    }}
                  />
                </PlasmicLink__>
              </div>
              <div className={classNames(projectcss.all, sty.column__u8Z8O)}>
                <Popover
                  data-plasmic-name={"popoverCore"}
                  data-plasmic-override={overrides.popoverCore}
                  className={classNames("__wab_instance", sty.popoverCore)}
                  onOpenChange={generateStateOnChangeProp($state, [
                    "popoverCore",
                    "open"
                  ])}
                  open={generateStateValueProp($state, ["popoverCore", "open"])}
                  overlay={
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___30Kj4
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__yNmfT
                        )}
                      >
                        {
                          "Any information you submit via this website will be used to manage the website, and for no other purpose.  This is an expirimental website.  I have invested no time into making it secure and make absolutely no guarantees with respect to the privacy or security of any information you provide.  Please don't reuse your password on this site. No tracking cookies or other mechanisms are used.  This site does not honor browser do-not-track signals because it doesn't track anyone.  "
                        }
                      </div>
                    </div>
                  }
                  themeResetClass={classNames(
                    projectcss.root_reset,
                    projectcss.plasmic_default_styles,
                    projectcss.plasmic_mixins,
                    projectcss.plasmic_tokens,
                    plasmic_antd_5_hostless_css.plasmic_tokens
                  )}
                >
                  <Button2 color={"clear"} size={"compact"}>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___1Ge0P
                      )}
                    >
                      {"Privacy"}
                    </div>
                  </Button2>
                </Popover>
              </div>
              <div className={classNames(projectcss.all, sty.column__kkJre)}>
                <Popover
                  data-plasmic-name={"popoverCore2"}
                  data-plasmic-override={overrides.popoverCore2}
                  className={classNames("__wab_instance", sty.popoverCore2)}
                  onOpenChange={generateStateOnChangeProp($state, [
                    "popoverCore2",
                    "open"
                  ])}
                  open={generateStateValueProp($state, [
                    "popoverCore2",
                    "open"
                  ])}
                  overlay={
                    <div
                      className={classNames(projectcss.all, sty.freeBox__lhPL)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__sgMbz
                        )}
                      >
                        {
                          "This site is provided as-is with no warranties that any of the information is correct or complete.  This website is not intended to be, and should not be construed as, legal advice.  This website likewise does not create an attorney-client relationship between Joshua Law Firm LLC and any user of this site.  "
                        }
                      </div>
                    </div>
                  }
                  themeResetClass={classNames(
                    projectcss.root_reset,
                    projectcss.plasmic_default_styles,
                    projectcss.plasmic_mixins,
                    projectcss.plasmic_tokens,
                    plasmic_antd_5_hostless_css.plasmic_tokens
                  )}
                >
                  <Button2 color={"clear"} size={"compact"}>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__vi4St
                      )}
                    >
                      {"Terms of Use"}
                    </div>
                  </Button2>
                </Popover>
              </div>
              <div className={classNames(projectcss.all, sty.column__ySyIq)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__a4YOh
                  )}
                >
                  {
                    "Attorney Advertising\n320 Washington Ave\nBrooklyn NY 11205"
                  }
                </div>
              </div>
            </div>
          </section>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "columnHeaders",
    "stateSortButton",
    "dataSection",
    "filters",
    "stateDataFetcher",
    "stateSelectParent",
    "stateSelectOption",
    "licenseTypeSelect",
    "option",
    "stateListAccordion",
    "accordionItem",
    "servicingLicenseCollapse",
    "creditorRegistrationCollapse2",
    "servicingNotificationCollapse",
    "popoverCore",
    "popoverCore2"
  ],
  columnHeaders: ["columnHeaders", "stateSortButton"],
  stateSortButton: ["stateSortButton"],
  dataSection: [
    "dataSection",
    "filters",
    "stateDataFetcher",
    "stateSelectParent",
    "stateSelectOption",
    "licenseTypeSelect",
    "option",
    "stateListAccordion",
    "accordionItem",
    "servicingLicenseCollapse",
    "creditorRegistrationCollapse2",
    "servicingNotificationCollapse"
  ],
  filters: [
    "filters",
    "stateDataFetcher",
    "stateSelectParent",
    "stateSelectOption",
    "licenseTypeSelect",
    "option"
  ],
  stateDataFetcher: [
    "stateDataFetcher",
    "stateSelectParent",
    "stateSelectOption"
  ],
  stateSelectParent: ["stateSelectParent", "stateSelectOption"],
  stateSelectOption: ["stateSelectOption"],
  licenseTypeSelect: ["licenseTypeSelect", "option"],
  option: ["option"],
  stateListAccordion: [
    "stateListAccordion",
    "accordionItem",
    "servicingLicenseCollapse",
    "creditorRegistrationCollapse2",
    "servicingNotificationCollapse"
  ],
  accordionItem: [
    "accordionItem",
    "servicingLicenseCollapse",
    "creditorRegistrationCollapse2",
    "servicingNotificationCollapse"
  ],
  servicingLicenseCollapse: ["servicingLicenseCollapse"],
  creditorRegistrationCollapse2: ["creditorRegistrationCollapse2"],
  servicingNotificationCollapse: ["servicingNotificationCollapse"],
  popoverCore: ["popoverCore"],
  popoverCore2: ["popoverCore2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  columnHeaders: "section";
  stateSortButton: typeof Button;
  dataSection: "section";
  filters: "section";
  stateDataFetcher: typeof Fetcher;
  stateSelectParent: typeof AntdSelect;
  stateSelectOption: typeof AntdOption;
  licenseTypeSelect: typeof AntdSelect;
  option: typeof AntdOption;
  stateListAccordion: typeof AntdAccordion;
  accordionItem: typeof AntdAccordionItem;
  servicingLicenseCollapse: typeof AntdSingleCollapse;
  creditorRegistrationCollapse2: typeof AntdSingleCollapse;
  servicingNotificationCollapse: typeof AntdSingleCollapse;
  popoverCore: typeof Popover;
  popoverCore2: typeof Popover;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    columnHeaders: makeNodeComponent("columnHeaders"),
    stateSortButton: makeNodeComponent("stateSortButton"),
    dataSection: makeNodeComponent("dataSection"),
    filters: makeNodeComponent("filters"),
    stateDataFetcher: makeNodeComponent("stateDataFetcher"),
    stateSelectParent: makeNodeComponent("stateSelectParent"),
    stateSelectOption: makeNodeComponent("stateSelectOption"),
    licenseTypeSelect: makeNodeComponent("licenseTypeSelect"),
    option: makeNodeComponent("option"),
    stateListAccordion: makeNodeComponent("stateListAccordion"),
    accordionItem: makeNodeComponent("accordionItem"),
    servicingLicenseCollapse: makeNodeComponent("servicingLicenseCollapse"),
    creditorRegistrationCollapse2: makeNodeComponent(
      "creditorRegistrationCollapse2"
    ),
    servicingNotificationCollapse: makeNodeComponent(
      "servicingNotificationCollapse"
    ),
    popoverCore: makeNodeComponent("popoverCore"),
    popoverCore2: makeNodeComponent("popoverCore2"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
