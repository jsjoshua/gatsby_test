// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: iceCZNERGwb45EFQXuutPV
// Component: sh56FAZPQgGD

import * as React from "react";

import {
  Link,
  GatsbyLinkProps as LinkProps,
  navigate as __gatsbyNavigate
} from "gatsby";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import Button2 from "../../Button2"; // plasmic-import: hQy9QSkyPxTG/component
import { AntdPopover } from "@plasmicpkgs/antd5/skinny/registerPopover";
import { AntdAccordion } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { accordionHelpers as AntdAccordion_Helpers } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { AntdAccordionItem } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import { AntdOption } from "@plasmicpkgs/antd5/skinny/registerSelect";
import { AntdSingleCollapse } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { singleCollapseHelpers as AntdSingleCollapse_Helpers } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { Popover } from "@plasmicpkgs/radix-ui";
import Button from "../../Button"; // plasmic-import: 5nirPCGmCnRD/component
import Footer from "../../Footer"; // plasmic-import: zGCAPA1Eaq0H/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantsaqW8L3StFx6F } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: AqW8l3StFx6f/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import * as plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import * as projectcss from "./plasmic.module.css"; // plasmic-import: iceCZNERGwb45EFQXuutPV/projectcss
import * as sty from "./PlasmicHomepage.module.css"; // plasmic-import: sh56FAZPQgGD/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: kSTxHZgue3mB/icon
import IconIcon from "../radix_ui/icons/PlasmicIcon__Icon"; // plasmic-import: MbDRsJU0e3bw/icon
import Icon38Icon from "./icons/PlasmicIcon__Icon38"; // plasmic-import: 1qt9N7eZyk9K/icon
import SortAmountDownSvgrepoComsvgIcon from "./icons/PlasmicIcon__SortAmountDownSvgrepoComsvg"; // plasmic-import: 8GooR9qx9PxW/icon
import SortAmountUpSvgrepoComsvgIcon from "./icons/PlasmicIcon__SortAmountUpSvgrepoComsvg"; // plasmic-import: FlnBJfx2Z3Cf/icon
import ChecksvgIcon2 from "../radix_ui/icons/PlasmicIcon__Checksvg"; // plasmic-import: Wyt3GMMsLefj/icon
import UntitledsvgIcon from "./icons/PlasmicIcon__Untitledsvg"; // plasmic-import: KO74-z1mJ9-f/icon
import logoNoBackgroundpngZXw2KafmeQa from "./images/logoNoBackgroundpng.png"; // plasmic-import: zXw2_kafmeQa/picture
import logoColorpng9M3HdEz90Hgr from "./images/logoColorpng.png"; // plasmic-import: 9m3HdEZ90HGR/picture

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  popover?: Flex__<typeof AntdPopover>;
  filters?: Flex__<"section">;
  accordion?: Flex__<typeof AntdAccordion>;
  stateFilterAccordion?: Flex__<typeof AntdAccordionItem>;
  stateNameFilterSelect?: Flex__<typeof AntdSelect>;
  licenseTypeFilterAccordion?: Flex__<typeof AntdAccordionItem>;
  licenseTypeFilterSelect?: Flex__<typeof AntdSelect>;
  licenseTypeFilterSelectedOption?: Flex__<typeof AntdOption>;
  licenseTypeFilterSelectedText?: Flex__<"div">;
  activityTypeFilterAccordion?: Flex__<typeof AntdAccordionItem>;
  activityTypeSelect?: Flex__<typeof AntdSelect>;
  licenseTriggerFilterAccordion?: Flex__<typeof AntdAccordionItem>;
  licenseTriggerFilterSelect?: Flex__<typeof AntdSelect>;
  productExcludedFeatureFilterAccordion2?: Flex__<typeof AntdAccordionItem>;
  prodExcludedFeatureSelect?: Flex__<typeof AntdSelect>;
  licensureExemptEntitiesAccordion?: Flex__<typeof AntdAccordionItem>;
  servExemptEntitiesFilterSelect?: Flex__<typeof AntdSelect>;
  headerSection?: Flex__<"section">;
  dataSection?: Flex__<"section">;
  stateDetailsAccordion?: Flex__<typeof AntdAccordion>;
  accordionItem?: Flex__<typeof AntdAccordionItem>;
  servicingDetailsCollapse?: Flex__<typeof AntdSingleCollapse>;
  servLicTriggers?: Flex__<"div">;
  popoverCore4?: Flex__<typeof Popover>;
  servDefStudentLoan2?: Flex__<"div">;
  popoverCore2?: Flex__<typeof Popover>;
  servDefStudentLoanExceptions?: Flex__<"div">;
  popoverCore3?: Flex__<typeof Popover>;
  servDefStudentLoan?: Flex__<"div">;
  popoverCore?: Flex__<typeof Popover>;
  servLicExemptions?: Flex__<"div">;
  popoverCore5?: Flex__<typeof Popover>;
  creditorRegistrationCollapse?: Flex__<typeof AntdSingleCollapse>;
  regTriggers?: Flex__<"div">;
  popoverCore6?: Flex__<typeof Popover>;
  regDefCreditor?: Flex__<"div">;
  popoverCore7?: Flex__<typeof Popover>;
  regDefStudentLoan?: Flex__<"div">;
  popoverCore8?: Flex__<typeof Popover>;
  regNotStudentLoan?: Flex__<"div">;
  popoverCore9?: Flex__<typeof Popover>;
  regExemptEntities?: Flex__<"div">;
  popoverCore10?: Flex__<typeof Popover>;
  servicerNotificationCollapse?: Flex__<typeof AntdSingleCollapse>;
  notTriggers2?: Flex__<"div">;
  popoverCore11?: Flex__<typeof Popover>;
  notDefServ?: Flex__<"div">;
  popoverCore12?: Flex__<typeof Popover>;
  notDefServ2?: Flex__<"div">;
  popoverCore13?: Flex__<typeof Popover>;
  footer?: Flex__<typeof Footer>;
  faviconsvg?: Flex__<"svg">;
};

export interface DefaultHomepageProps {
  className?: string;
}

const $$ = {};

export function Head() {
  return (
    <>
      <meta name="twitter:card" content="summary_large_image" />
      <title key="title">{PlasmicHomepage.pageMetadata.title}</title>
      <meta
        key="og:title"
        property="og:title"
        content={PlasmicHomepage.pageMetadata.title}
      />
      <meta
        key="twitter:title"
        name="twitter:title"
        content={PlasmicHomepage.pageMetadata.title}
      />
      <meta
        key="description"
        name="description"
        content={PlasmicHomepage.pageMetadata.description}
      />
      <meta
        key="og:description"
        property="og:description"
        content={PlasmicHomepage.pageMetadata.description}
      />
      <meta
        key="twitter:description"
        name="twitter:description"
        content={PlasmicHomepage.pageMetadata.description}
      />
      <meta
        key="og:image"
        property="og:image"
        content={PlasmicHomepage.pageMetadata.ogImageSrc}
      />
      <meta
        key="twitter:image"
        name="twitter:image"
        content={PlasmicHomepage.pageMetadata.ogImageSrc}
      />
    </>
  );
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "accordion.activePanelId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec(
          "activePanelId",
          AntdAccordion_Helpers
        )
      },
      {
        path: "stateNameFilterSelect.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "licenseTypeFilterSelect.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "licenseTriggerFilterSelect.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "stateDetailsAccordion.activePanelId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec(
          "activePanelId",
          AntdAccordion_Helpers
        )
      },
      {
        path: "servicingDetailsCollapse[].open",
        type: "private",
        variableType: "boolean",

        onMutate: generateOnMutateForSpec("open", AntdSingleCollapse_Helpers)
      },
      {
        path: "creditorRegistrationCollapse[].open",
        type: "private",
        variableType: "boolean",

        onMutate: generateOnMutateForSpec("open", AntdSingleCollapse_Helpers)
      },
      {
        path: "servicerNotificationCollapse[].open",
        type: "private",
        variableType: "boolean",

        onMutate: generateOnMutateForSpec("open", AntdSingleCollapse_Helpers)
      },
      {
        path: "activityTypeSelect.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "popoverCore[].open",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "popoverCore2[].open",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "popoverCore3[].open",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "prodExcludedFeatureSelect.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "popoverCore4[].open",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "popoverCore5[].open",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "servExemptEntitiesFilterSelect.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "popoverCore6[].open",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "popoverCore7[].open",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "popoverCore8[].open",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "popoverCore9[].open",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "popoverCore10[].open",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "popoverCore11[].open",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "popoverCore12[].open",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "popoverCore13[].open",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "viewFiltersVariable",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "popover.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobileOnly") ? false : false
      },
      {
        path: "stateSortVariable",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "acceptedTos",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    baseQueryNoFilters: usePlasmicDataOp(() => {
      return {
        sourceId: "bejGCi4s24eqYNaEsUyMVt",
        opId: "c796f2ba-9981-4a79-8775-c68cde6584ca",
        userArgs: {},
        cacheKey: `plasmic.$.c796f2ba-9981-4a79-8775-c68cde6584ca.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    licenseTypeBaseQuery: usePlasmicDataOp(() => {
      return {
        sourceId: "bejGCi4s24eqYNaEsUyMVt",
        opId: "db813475-e8af-4719-9b64-2cdc561d5389",
        userArgs: {},
        cacheKey: `plasmic.$.db813475-e8af-4719-9b64-2cdc561d5389.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    activityTypeBaseQuery: usePlasmicDataOp(() => {
      return {
        sourceId: "bejGCi4s24eqYNaEsUyMVt",
        opId: "19585b86-128c-44bf-bd5c-e4fc18a1f7c2",
        userArgs: {},
        cacheKey: `plasmic.$.19585b86-128c-44bf-bd5c-e4fc18a1f7c2.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    prodFeatureBaseQuery: usePlasmicDataOp(() => {
      return {
        sourceId: "bejGCi4s24eqYNaEsUyMVt",
        opId: "a0438e73-db20-4eec-beb5-feb522e053b2",
        userArgs: {},
        cacheKey: `plasmic.$.a0438e73-db20-4eec-beb5-feb522e053b2.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    licenseTriggerBaseQuery: usePlasmicDataOp(() => {
      return {
        sourceId: "bejGCi4s24eqYNaEsUyMVt",
        opId: "348fd2c4-2b4c-4c6f-9c29-5e2787ad65a6",
        userArgs: {},
        cacheKey: `plasmic.$.348fd2c4-2b4c-4c6f-9c29-5e2787ad65a6.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    allFiltersQuery: usePlasmicDataOp(() => {
      return {
        sourceId: "bejGCi4s24eqYNaEsUyMVt",
        opId: "432f429f-1158-4e84-a9c9-927f83958b3d",
        userArgs: {
          params: [
            ($state.stateNameFilterSelect.value == undefined ||
            $state.stateNameFilterSelect.value == 0
              ? ""
              : `(state,anyof,` + $state.stateNameFilterSelect.value + `)`) +
              ($state.licenseTypeFilterSelect.value == undefined ||
              $state.licenseTypeFilterSelect.value == 0
                ? ""
                : `~and(required_license_types,anyof,` +
                  $state.licenseTypeFilterSelect.value +
                  `)`) +
              ($state.activityTypeSelect.value == undefined ||
              $state.activityTypeSelect.value == 0
                ? ""
                : `~and(serv_def_serv_lookup,anyof,` +
                  $state.activityTypeSelect.value +
                  `)`) +
              ($state.licenseTriggerFilterSelect.value == undefined ||
              $state.licenseTriggerFilterSelect.value == 0
                ? ""
                : `~and(serv_license_trigger_list,anyof,` +
                  $state.licenseTriggerFilterSelect.value +
                  `)`) +
              ($state.prodExcludedFeatureSelect.value == undefined ||
              $state.prodExcludedFeatureSelect.value == 0
                ? ""
                : `~and(serv_prod_features_lookup_field,anyof,` +
                  $state.prodExcludeFeatureSelect.value +
                  `)`) +
              ($state.prodExcludedFeatureSelect.value == undefined ||
              $state.prodExcludedFeatureSelect.value == 0
                ? ""
                : `~not(serv_prod_feature_excluded_list,nanyof,` +
                  $state.prodExcludedFeatureSelect.value +
                  `)`) +
              ($state.servExemptEntitiesFilterSelect.value == undefined ||
              $state.servExemptEntitiesFilterSelect.value == 0
                ? ""
                : `~not(serv_entity_exempt_list,nanyof,` +
                  $state.servExemptEntitiesFilterSelect.value +
                  `)`),
            typeof $state.stateSortVariable === "undefined" ||
            $state.stateSortVariable == false
              ? "state"
              : "-state"
          ]
        },
        cacheKey: `plasmic.$.432f429f-1158-4e84-a9c9-927f83958b3d.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    licenseTriggerCheckboxQuery: usePlasmicDataOp(() => {
      return {
        sourceId: "bejGCi4s24eqYNaEsUyMVt",
        opId: "8b4cb9f5-d772-45a8-8a90-2ede32f120bd",
        userArgs: {
          params: [
            `(serv_license_trigger_list,nanyof,` +
              $state.licenseTriggerFilterSelect.value +
              `)`
          ]
        },
        cacheKey: `plasmic.$.8b4cb9f5-d772-45a8-8a90-2ede32f120bd.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    prodExcludedBaseFeaturesQuery: usePlasmicDataOp(() => {
      return {
        sourceId: "bejGCi4s24eqYNaEsUyMVt",
        opId: "f2ba8bc7-093e-436b-8510-db7af0344a14",
        userArgs: {},
        cacheKey: `plasmic.$.f2ba8bc7-093e-436b-8510-db7af0344a14.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    exemptEntityBaseQuery: usePlasmicDataOp(() => {
      return {
        sourceId: "bejGCi4s24eqYNaEsUyMVt",
        opId: "1653d2cb-37c4-4b72-9cc2-76b51e40ddf4",
        userArgs: {},
        cacheKey: `plasmic.$.1653d2cb-37c4-4b72-9cc2-76b51e40ddf4.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsaqW8L3StFx6F()
  });

  return (
    <React.Fragment>
      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <Embed
            className={classNames("__wab_instance", sty.embedHtml__wk5Wb)}
            code={
              '<script defer src="https://umami.app.studentloancompliance.com/script.js" data-website-id="55185fdd-d0f1-47ef-8843-d7446eb305ca"></script>'
            }
          />

          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link__xLiKd
            )}
            component={Link}
            href={"https://www.joshualawfirm.com"}
            platform={"gatsby"}
            target={"_blank"}
            title={"Opens in new tab"}
          >
            <PlasmicImg__
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: logoNoBackgroundpngZXw2KafmeQa,
                fullWidth: 1000,
                fullHeight: 169,
                aspectRatio: undefined
              }}
            />
          </PlasmicLink__>
          <section className={classNames(projectcss.all, sty.section__iFlIs)}>
            <div className={classNames(projectcss.all, sty.freeBox__pfPnf)}>
              <div className={classNames(projectcss.all, sty.freeBox__fpl4C)}>
                {(() => {
                  try {
                    return !$state.viewFiltersVariable;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <Button2
                    className={classNames("__wab_instance", sty.button2__kvheg)}
                    color={(() => {
                      try {
                        return $state.viewFiltersVariable == true
                          ? "green"
                          : "blue";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "softBlue";
                        }
                        throw e;
                      }
                    })()}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateViewFiltersVariable"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["viewFiltersVariable"]
                              },
                              operation: 4
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              const oldValue = $stateGet(objRoot, variablePath);
                              $stateSet(objRoot, variablePath, !oldValue);
                              return !oldValue;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateViewFiltersVariable"] != null &&
                        typeof $steps["updateViewFiltersVariable"] ===
                          "object" &&
                        typeof $steps["updateViewFiltersVariable"].then ===
                          "function"
                      ) {
                        $steps["updateViewFiltersVariable"] = await $steps[
                          "updateViewFiltersVariable"
                        ];
                      }
                    }}
                    size={"compact"}
                  >
                    <AntdPopover
                      data-plasmic-name={"popover"}
                      data-plasmic-override={overrides.popover}
                      arrow={true}
                      className={classNames("__wab_instance", sty.popover)}
                      content={
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__xTIki
                          )}
                        >
                          {(() => {
                            try {
                              return (
                                typeof $state.stateNameFilterSelect.value !=
                                  "undefined" &&
                                $state.stateNameFilterSelect.value.length > 0
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__qLeq8
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $state.stateNameFilterSelect.value >
                                      0
                                      ? ""
                                      : "State(s): " +
                                          $state.stateNameFilterSelect.value.join(
                                            ", "
                                          );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          ) : null}
                          {(() => {
                            try {
                              return (
                                typeof $state.licenseTypeFilterSelect.value !=
                                  "undefined" &&
                                $state.licenseTypeFilterSelect.value.length > 0
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__tiZG
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $state.licenseTypeFilterSelect
                                      .value > 0
                                      ? ""
                                      : "License Type(s): " +
                                          $state.licenseTypeFilterSelect.value.join(
                                            ", "
                                          );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          ) : null}
                          {(() => {
                            try {
                              return (
                                typeof $state.prodExcludedFeatureSelect.value !=
                                  "undefined" &&
                                $state.prodExcludedFeatureSelect.value.length >
                                  0
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <section
                              className={classNames(
                                projectcss.all,
                                sty.section__mcsWw
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__w4SI
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__p2Gh
                                  )}
                                >
                                  {
                                    "Excluded product features (only selected items are included in results)"
                                  }
                                </div>
                                {(_par =>
                                  !_par
                                    ? []
                                    : Array.isArray(_par)
                                    ? _par
                                    : [_par])(
                                  (() => {
                                    try {
                                      return $state.prodExcludedFeatureSelect
                                        .value;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                  const currentItem = __plasmic_item_0;
                                  const currentIndex = __plasmic_idx_0;
                                  return (
                                    <Stack__
                                      as={"div"}
                                      hasGap={true}
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__cBujI
                                      )}
                                      key={currentIndex}
                                    >
                                      <IconIcon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__jKySz
                                        )}
                                        role={"img"}
                                      />

                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__cT6J
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return currentItem;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                    </Stack__>
                                  );
                                })}
                              </div>
                            </section>
                          ) : null}
                          {(() => {
                            try {
                              return (
                                typeof $state.activityTypeSelect.value !=
                                  "undefined" &&
                                $state.activityTypeSelect.value.length > 0
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <section
                              className={classNames(
                                projectcss.all,
                                sty.section__nkvml
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__iKth8
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___8Cnns
                                  )}
                                >
                                  {
                                    "Regulated activity filters (only selected items are included in results) "
                                  }
                                </div>
                                {(_par =>
                                  !_par
                                    ? []
                                    : Array.isArray(_par)
                                    ? _par
                                    : [_par])(
                                  (() => {
                                    try {
                                      return $state.activityTypeSelect.value;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                  const currentItem = __plasmic_item_0;
                                  const currentIndex = __plasmic_idx_0;
                                  return (
                                    <Stack__
                                      as={"div"}
                                      hasGap={true}
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__irbjq
                                      )}
                                      key={currentIndex}
                                    >
                                      <IconIcon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__kBqug
                                        )}
                                        role={"img"}
                                      />

                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text___9Ew23
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return currentItem;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                    </Stack__>
                                  );
                                })}
                              </div>
                            </section>
                          ) : null}
                          {(() => {
                            try {
                              return (
                                typeof $state.licenseTriggerFilterSelect
                                  .value != "undefined" &&
                                $state.licenseTriggerFilterSelect.value.length >
                                  0
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <section
                              className={classNames(
                                projectcss.all,
                                sty.section___1XHrh
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__moVlw
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__xuMfJ
                                  )}
                                >
                                  {
                                    "Selected License Triggers (only selected items are included in results):"
                                  }
                                </div>
                                {(_par =>
                                  !_par
                                    ? []
                                    : Array.isArray(_par)
                                    ? _par
                                    : [_par])(
                                  (() => {
                                    try {
                                      return $state.licenseTriggerFilterSelect
                                        .value;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                  const currentItem = __plasmic_item_0;
                                  const currentIndex = __plasmic_idx_0;
                                  return (
                                    <Stack__
                                      as={"div"}
                                      hasGap={true}
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__nhYFe
                                      )}
                                      key={currentIndex}
                                    >
                                      <IconIcon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg___5QwP1
                                        )}
                                        role={"img"}
                                      />

                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__hV9Mq
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return currentItem;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                    </Stack__>
                                  );
                                })}
                              </div>
                            </section>
                          ) : null}
                          {(() => {
                            try {
                              return (
                                typeof $state.servExemptEntitiesFilterSelect
                                  .value != "undefined" &&
                                $state.servExemptEntitiesFilterSelect.value
                                  .length > 0
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <section
                              className={classNames(
                                projectcss.all,
                                sty.section__cIzL
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__wd7Is
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__dd4Yc
                                  )}
                                >
                                  {
                                    "Selected Exemptions (excluded from results):"
                                  }
                                </div>
                                {(_par =>
                                  !_par
                                    ? []
                                    : Array.isArray(_par)
                                    ? _par
                                    : [_par])(
                                  (() => {
                                    try {
                                      return $state
                                        .servExemptEntitiesFilterSelect.value;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                  const currentItem = __plasmic_item_0;
                                  const currentIndex = __plasmic_idx_0;
                                  return (
                                    <Stack__
                                      as={"div"}
                                      hasGap={true}
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__dwFk0
                                      )}
                                      key={currentIndex}
                                    >
                                      <IconIcon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__wNDvU
                                        )}
                                        role={"img"}
                                      />

                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text___5ZNo3
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return currentItem;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                    </Stack__>
                                  );
                                })}
                              </div>
                            </section>
                          ) : null}
                        </div>
                      }
                      contentText={"Popover contents"}
                      defaultOpen={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? false
                          : false
                      }
                      defaultStylesClassName={classNames(
                        projectcss.root_reset,
                        projectcss.plasmic_default_styles,
                        projectcss.plasmic_mixins,
                        projectcss.plasmic_tokens,
                        plasmic_antd_5_hostless_css.plasmic_tokens
                      )}
                      mouseEnterDelay={0}
                      mouseLeaveDelay={0}
                      onOpenChange={generateStateOnChangeProp($state, [
                        "popover",
                        "open"
                      ])}
                      open={generateStateValueProp($state, ["popover", "open"])}
                      overlayClassName={classNames({
                        [sty["pcls_ApvkXThTa97q"]]: true
                      })}
                      placement={"right"}
                      popoverScopeClassName={sty["popover__popover"]}
                      title={
                        <React.Fragment>
                          {(() => {
                            try {
                              return (
                                (typeof $state.stateNameFilterSelect.value !=
                                  "undefined" &&
                                  $state.stateNameFilterSelect.value.length >
                                    0) ||
                                (typeof $state.licenseTypeFilterSelect.value !=
                                  "undefined" &&
                                  $state.licenseTypeFilterSelect.value.length >
                                    0) ||
                                (typeof $state.prodExcludedFeatureSelect
                                  .value != "undefined" &&
                                  $state.prodExcludedFeatureSelect.value
                                    .length > 0) ||
                                (typeof $state.activityTypeSelect.value !=
                                  "undefined" &&
                                  $state.activityTypeSelect.value.length > 0) ||
                                (typeof $state.licenseTriggerFilterSelect
                                  .value != "undefined" &&
                                  $state.licenseTriggerFilterSelect.value
                                    .length > 0) ||
                                (typeof $state.servExemptEntitiesFilterSelect
                                  .value != "undefined" &&
                                  $state.servExemptEntitiesFilterSelect.value
                                    .length > 0)
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__gYlUg
                              )}
                            >
                              {"Current Filters"}
                            </div>
                          ) : null}
                          {(() => {
                            try {
                              return !(
                                (typeof $state.stateNameFilterSelect.value !=
                                  "undefined" &&
                                  $state.stateNameFilterSelect.value.length >
                                    0) ||
                                (typeof $state.licenseTypeFilterSelect.value !=
                                  "undefined" &&
                                  $state.licenseTypeFilterSelect.value.length >
                                    0) ||
                                (typeof $state.prodExcludedFeatureSelect
                                  .value != "undefined" &&
                                  $state.prodExcludedFeatureSelect.value
                                    .length > 0) ||
                                (typeof $state.activityTypeSelect.value !=
                                  "undefined" &&
                                  $state.activityTypeSelect.value.length > 0) ||
                                (typeof $state.licenseTriggerFilterSelect
                                  .value != "undefined" &&
                                  $state.licenseTriggerFilterSelect.value
                                    .length > 0) ||
                                (typeof $state.servExemptEntitiesFilterSelect
                                  .value != "undefined" &&
                                  $state.servExemptEntitiesFilterSelect.value
                                    .length > 0)
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___7YJsw
                              )}
                            >
                              {"No Filters Applied"}
                            </div>
                          ) : null}
                        </React.Fragment>
                      }
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__oVgiM
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $state.viewFiltersVariable == true
                                ? "Hide Filters"
                                : "View Filters";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "Filters";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </AntdPopover>
                  </Button2>
                ) : null}
                {(() => {
                  try {
                    return (
                      ((typeof $state.stateNameFilterSelect.value !=
                        "undefined" &&
                        $state.stateNameFilterSelect.value.length > 0) ||
                        (typeof $state.licenseTypeFilterSelect.value !=
                          "undefined" &&
                          $state.licenseTypeFilterSelect.value.length > 0) ||
                        (typeof $state.prodExcludedFeatureSelect.value !=
                          "undefined" &&
                          $state.prodExcludedFeatureSelect.value.length > 0) ||
                        (typeof $state.activityTypeSelect.value !=
                          "undefined" &&
                          $state.activityTypeSelect.value.length > 0) ||
                        (typeof $state.licenseTriggerFilterSelect.value !=
                          "undefined" &&
                          $state.licenseTriggerFilterSelect.value.length > 0) ||
                        (typeof $state.servExemptEntitiesFilterSelect.value !=
                          "undefined" &&
                          $state.servExemptEntitiesFilterSelect.value.length >
                            0)) &&
                      !$state.viewFiltersVariable
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <Button2
                    className={classNames("__wab_instance", sty.button2__rvykJ)}
                    color={"softRed"}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateServExemptEntitiesFilterSelectValue"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: [
                                  "servExemptEntitiesFilterSelect",
                                  "value"
                                ]
                              },
                              operation: 1
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, undefined);
                              return undefined;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateServExemptEntitiesFilterSelectValue"] !=
                          null &&
                        typeof $steps[
                          "updateServExemptEntitiesFilterSelectValue"
                        ] === "object" &&
                        typeof $steps[
                          "updateServExemptEntitiesFilterSelectValue"
                        ].then === "function"
                      ) {
                        $steps["updateServExemptEntitiesFilterSelectValue"] =
                          await $steps[
                            "updateServExemptEntitiesFilterSelectValue"
                          ];
                      }

                      $steps["updateProdExcludedFeatureSelectValue"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: [
                                  "prodExcludedFeatureSelect",
                                  "value"
                                ]
                              },
                              operation: 1
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, undefined);
                              return undefined;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateProdExcludedFeatureSelectValue"] !=
                          null &&
                        typeof $steps[
                          "updateProdExcludedFeatureSelectValue"
                        ] === "object" &&
                        typeof $steps["updateProdExcludedFeatureSelectValue"]
                          .then === "function"
                      ) {
                        $steps["updateProdExcludedFeatureSelectValue"] =
                          await $steps["updateProdExcludedFeatureSelectValue"];
                      }

                      $steps["updateLicenseTriggerFilterSelectValue"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: [
                                  "licenseTriggerFilterSelect",
                                  "value"
                                ]
                              },
                              operation: 1
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, undefined);
                              return undefined;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateLicenseTriggerFilterSelectValue"] !=
                          null &&
                        typeof $steps[
                          "updateLicenseTriggerFilterSelectValue"
                        ] === "object" &&
                        typeof $steps["updateLicenseTriggerFilterSelectValue"]
                          .then === "function"
                      ) {
                        $steps["updateLicenseTriggerFilterSelectValue"] =
                          await $steps["updateLicenseTriggerFilterSelectValue"];
                      }

                      $steps["updateStateNameFilterSelectValue"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["stateNameFilterSelect", "value"]
                              },
                              operation: 1
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, undefined);
                              return undefined;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateStateNameFilterSelectValue"] != null &&
                        typeof $steps["updateStateNameFilterSelectValue"] ===
                          "object" &&
                        typeof $steps["updateStateNameFilterSelectValue"]
                          .then === "function"
                      ) {
                        $steps["updateStateNameFilterSelectValue"] =
                          await $steps["updateStateNameFilterSelectValue"];
                      }

                      $steps["updateLicenseTypeFilterSelectValue"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: [
                                  "licenseTypeFilterSelect",
                                  "value"
                                ]
                              },
                              operation: 1
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, undefined);
                              return undefined;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateLicenseTypeFilterSelectValue"] != null &&
                        typeof $steps["updateLicenseTypeFilterSelectValue"] ===
                          "object" &&
                        typeof $steps["updateLicenseTypeFilterSelectValue"]
                          .then === "function"
                      ) {
                        $steps["updateLicenseTypeFilterSelectValue"] =
                          await $steps["updateLicenseTypeFilterSelectValue"];
                      }

                      $steps["updateLicenseTriggerFilterSelectValue2"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["activityTypeSelect", "value"]
                              },
                              operation: 1
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, undefined);
                              return undefined;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateLicenseTriggerFilterSelectValue2"] !=
                          null &&
                        typeof $steps[
                          "updateLicenseTriggerFilterSelectValue2"
                        ] === "object" &&
                        typeof $steps["updateLicenseTriggerFilterSelectValue2"]
                          .then === "function"
                      ) {
                        $steps["updateLicenseTriggerFilterSelectValue2"] =
                          await $steps[
                            "updateLicenseTriggerFilterSelectValue2"
                          ];
                      }
                    }}
                    size={"compact"}
                  >
                    {"Reset All Filters"}
                  </Button2>
                ) : null}
              </div>
            </div>
          </section>
          <div className={classNames(projectcss.all, sty.freeBox__bhTa)}>
            {(() => {
              try {
                return $state.viewFiltersVariable;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <section
                data-plasmic-name={"filters"}
                data-plasmic-override={overrides.filters}
                className={classNames(projectcss.all, sty.filters)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__eyb14)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__bDeFq)}
                  >
                    <Button2
                      className={classNames(
                        "__wab_instance",
                        sty.button2__amEqH
                      )}
                      color={"softSand"}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateViewFiltersVariable"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["viewFiltersVariable"]
                                },
                                operation: 1
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, undefined);
                                return undefined;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateViewFiltersVariable"] != null &&
                          typeof $steps["updateViewFiltersVariable"] ===
                            "object" &&
                          typeof $steps["updateViewFiltersVariable"].then ===
                            "function"
                        ) {
                          $steps["updateViewFiltersVariable"] = await $steps[
                            "updateViewFiltersVariable"
                          ];
                        }
                      }}
                      size={"compact"}
                    >
                      {"Hide Filter View"}
                    </Button2>
                    {(() => {
                      try {
                        return (
                          (typeof $state.stateNameFilterSelect.value !=
                            "undefined" &&
                            $state.stateNameFilterSelect.value.length > 0) ||
                          (typeof $state.licenseTypeFilterSelect.value !=
                            "undefined" &&
                            $state.licenseTypeFilterSelect.value.length > 0) ||
                          (typeof $state.prodExcludedFeatureSelect.value !=
                            "undefined" &&
                            $state.prodExcludedFeatureSelect.value.length >
                              0) ||
                          (typeof $state.activityTypeSelect.value !=
                            "undefined" &&
                            $state.activityTypeSelect.value.length > 0) ||
                          (typeof $state.licenseTriggerFilterSelect.value !=
                            "undefined" &&
                            $state.licenseTriggerFilterSelect.value.length >
                              0) ||
                          (typeof $state.servExemptEntitiesFilterSelect.value !=
                            "undefined" &&
                            $state.servExemptEntitiesFilterSelect.value.length >
                              0)
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <Button2
                        className={classNames(
                          "__wab_instance",
                          sty.button2__evRi
                        )}
                        color={"softRed"}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateServExemptEntitiesFilterSelectValue"] =
                            true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: [
                                        "servExemptEntitiesFilterSelect",
                                        "value"
                                      ]
                                    },
                                    operation: 1
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, undefined);
                                    return undefined;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps[
                              "updateServExemptEntitiesFilterSelectValue"
                            ] != null &&
                            typeof $steps[
                              "updateServExemptEntitiesFilterSelectValue"
                            ] === "object" &&
                            typeof $steps[
                              "updateServExemptEntitiesFilterSelectValue"
                            ].then === "function"
                          ) {
                            $steps[
                              "updateServExemptEntitiesFilterSelectValue"
                            ] = await $steps[
                              "updateServExemptEntitiesFilterSelectValue"
                            ];
                          }

                          $steps["updateProdExcludedFeatureSelectValue"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: [
                                      "prodExcludedFeatureSelect",
                                      "value"
                                    ]
                                  },
                                  operation: 1
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, undefined);
                                  return undefined;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateProdExcludedFeatureSelectValue"] !=
                              null &&
                            typeof $steps[
                              "updateProdExcludedFeatureSelectValue"
                            ] === "object" &&
                            typeof $steps[
                              "updateProdExcludedFeatureSelectValue"
                            ].then === "function"
                          ) {
                            $steps["updateProdExcludedFeatureSelectValue"] =
                              await $steps[
                                "updateProdExcludedFeatureSelectValue"
                              ];
                          }

                          $steps["updateLicenseTriggerFilterSelectValue"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: [
                                      "licenseTriggerFilterSelect",
                                      "value"
                                    ]
                                  },
                                  operation: 1
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, undefined);
                                  return undefined;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateLicenseTriggerFilterSelectValue"] !=
                              null &&
                            typeof $steps[
                              "updateLicenseTriggerFilterSelectValue"
                            ] === "object" &&
                            typeof $steps[
                              "updateLicenseTriggerFilterSelectValue"
                            ].then === "function"
                          ) {
                            $steps["updateLicenseTriggerFilterSelectValue"] =
                              await $steps[
                                "updateLicenseTriggerFilterSelectValue"
                              ];
                          }

                          $steps["updateStateNameFilterSelectValue"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: [
                                      "stateNameFilterSelect",
                                      "value"
                                    ]
                                  },
                                  operation: 1
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, undefined);
                                  return undefined;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateStateNameFilterSelectValue"] !=
                              null &&
                            typeof $steps[
                              "updateStateNameFilterSelectValue"
                            ] === "object" &&
                            typeof $steps["updateStateNameFilterSelectValue"]
                              .then === "function"
                          ) {
                            $steps["updateStateNameFilterSelectValue"] =
                              await $steps["updateStateNameFilterSelectValue"];
                          }

                          $steps["updateLicenseTypeFilterSelectValue"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: [
                                      "licenseTypeFilterSelect",
                                      "value"
                                    ]
                                  },
                                  operation: 1
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, undefined);
                                  return undefined;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateLicenseTypeFilterSelectValue"] !=
                              null &&
                            typeof $steps[
                              "updateLicenseTypeFilterSelectValue"
                            ] === "object" &&
                            typeof $steps["updateLicenseTypeFilterSelectValue"]
                              .then === "function"
                          ) {
                            $steps["updateLicenseTypeFilterSelectValue"] =
                              await $steps[
                                "updateLicenseTypeFilterSelectValue"
                              ];
                          }

                          $steps["updateLicenseTriggerFilterSelectValue2"] =
                            true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: [
                                        "activityTypeSelect",
                                        "value"
                                      ]
                                    },
                                    operation: 1
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, undefined);
                                    return undefined;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["updateLicenseTriggerFilterSelectValue2"] !=
                              null &&
                            typeof $steps[
                              "updateLicenseTriggerFilterSelectValue2"
                            ] === "object" &&
                            typeof $steps[
                              "updateLicenseTriggerFilterSelectValue2"
                            ].then === "function"
                          ) {
                            $steps["updateLicenseTriggerFilterSelectValue2"] =
                              await $steps[
                                "updateLicenseTriggerFilterSelectValue2"
                              ];
                          }
                        }}
                        size={"compact"}
                      >
                        {"Reset All Filters"}
                      </Button2>
                    ) : null}
                  </div>
                  {(() => {
                    const child$Props = {
                      activeKey: generateStateValueProp($state, [
                        "accordion",
                        "activePanelId"
                      ]),
                      bordered: true,
                      className: classNames("__wab_instance", sty.accordion),
                      items: (
                        <React.Fragment>
                          <AntdAccordionItem
                            data-plasmic-name={"stateFilterAccordion"}
                            data-plasmic-override={
                              overrides.stateFilterAccordion
                            }
                            className={classNames(
                              "__wab_instance",
                              sty.stateFilterAccordion
                            )}
                            id={1}
                            label2={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.columns__vQy8S
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.column___9BpQx
                                  )}
                                >
                                  {(() => {
                                    try {
                                      return (
                                        typeof $state.stateNameFilterSelect
                                          .value == "undefined" ||
                                        !$state.stateNameFilterSelect.value
                                          .length > 0
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })() ? (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__y6SI1
                                      )}
                                    >
                                      {"Filter by State"}
                                    </div>
                                  ) : null}
                                  {(() => {
                                    try {
                                      return !(
                                        typeof $state.stateNameFilterSelect
                                          .value === "undefined" ||
                                        $state.stateNameFilterSelect.value
                                          .length == 0
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })() ? (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__gue8P
                                      )}
                                    >
                                      {"Filter by State"}
                                    </div>
                                  ) : null}
                                </div>
                                {(() => {
                                  try {
                                    return !(
                                      typeof $state.stateNameFilterSelect
                                        .value === "undefined" ||
                                      $state.stateNameFilterSelect.value
                                        .length == 0
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return true;
                                    }
                                    throw e;
                                  }
                                })() ? (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.column__lqipm
                                    )}
                                  >
                                    <Button2
                                      className={classNames(
                                        "__wab_instance",
                                        sty.button2__kBpWc
                                      )}
                                      color={"clear"}
                                      onClick={async event => {
                                        const $steps = {};

                                        $steps[
                                          "updateStateNameFilterSelectValue"
                                        ] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: [
                                                    "stateNameFilterSelect",
                                                    "value"
                                                  ]
                                                },
                                                operation: 1
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  undefined
                                                );
                                                return undefined;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps[
                                            "updateStateNameFilterSelectValue"
                                          ] != null &&
                                          typeof $steps[
                                            "updateStateNameFilterSelectValue"
                                          ] === "object" &&
                                          typeof $steps[
                                            "updateStateNameFilterSelectValue"
                                          ].then === "function"
                                        ) {
                                          $steps[
                                            "updateStateNameFilterSelectValue"
                                          ] = await $steps[
                                            "updateStateNameFilterSelectValue"
                                          ];
                                        }
                                      }}
                                      size={"minimal"}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__o0XEo
                                        )}
                                      >
                                        {"Reset Filter"}
                                      </div>
                                    </Button2>
                                  </div>
                                ) : null}
                              </div>
                            }
                            showArrow={true}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__pjVt9
                              )}
                            >
                              {
                                "Limit results to only the selected states.  If no items are selected, all states will be shown."
                              }
                            </div>
                            <AntdSelect
                              data-plasmic-name={"stateNameFilterSelect"}
                              data-plasmic-override={
                                overrides.stateNameFilterSelect
                              }
                              allowClear={true}
                              className={classNames(
                                "__wab_instance",
                                sty.stateNameFilterSelect
                              )}
                              defaultStylesClassName={classNames(
                                projectcss.root_reset,
                                projectcss.plasmic_default_styles,
                                projectcss.plasmic_mixins,
                                projectcss.plasmic_tokens,
                                plasmic_antd_5_hostless_css.plasmic_tokens
                              )}
                              mode={"multiple"}
                              onChange={generateStateOnChangeProp($state, [
                                "stateNameFilterSelect",
                                "value"
                              ])}
                              options={[
                                {
                                  value: "option1",
                                  label: "Option 1",
                                  type: "option"
                                },
                                {
                                  value: "option2",
                                  label: "Option 2",
                                  type: "option"
                                }
                              ]}
                              placeholder={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__otsrj
                                  )}
                                >
                                  {"Select state(s)"}
                                </div>
                              }
                              popupScopeClassName={
                                sty["stateNameFilterSelect__popup"]
                              }
                              showSearch={false}
                              size={"middle"}
                              useChildren={true}
                              value={generateStateValueProp($state, [
                                "stateNameFilterSelect",
                                "value"
                              ])}
                            >
                              {(_par =>
                                !_par
                                  ? []
                                  : Array.isArray(_par)
                                  ? _par
                                  : [_par])(
                                (() => {
                                  try {
                                    return $queries.baseQueryNoFilters.data
                                      .response.list;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()
                              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                const currentItem = __plasmic_item_0;
                                const currentIndex = __plasmic_idx_0;
                                return (
                                  <AntdOption
                                    className={classNames(
                                      "__wab_instance",
                                      sty.option__vuQ6O
                                    )}
                                    key={currentIndex}
                                    value={(() => {
                                      try {
                                        return currentItem.state;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return currentItem.state;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "Option";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </AntdOption>
                                );
                              })}
                            </AntdSelect>
                          </AntdAccordionItem>
                          <AntdAccordionItem
                            data-plasmic-name={"licenseTypeFilterAccordion"}
                            data-plasmic-override={
                              overrides.licenseTypeFilterAccordion
                            }
                            className={classNames(
                              "__wab_instance",
                              sty.licenseTypeFilterAccordion
                            )}
                            id={2}
                            label2={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.columns__qp1QS
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.column___2ZfG8
                                  )}
                                >
                                  {(() => {
                                    try {
                                      return (
                                        typeof $state.licenseTypeFilterSelect
                                          .value == "undefined" ||
                                        !$state.licenseTypeFilterSelect.value
                                          .length > 0
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })() ? (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__z20CZ
                                      )}
                                    >
                                      {"Filter by license type"}
                                    </div>
                                  ) : null}
                                  {(() => {
                                    try {
                                      return !(
                                        typeof $state.licenseTypeFilterSelect
                                          .value === "undefined" ||
                                        $state.licenseTypeFilterSelect.value
                                          .length == 0
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })() ? (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__e0Ffd
                                      )}
                                    >
                                      {"Filter by license type"}
                                    </div>
                                  ) : null}
                                </div>
                                {(() => {
                                  try {
                                    return !(
                                      typeof $state.licenseTypeFilterSelect
                                        .value === "undefined" ||
                                      $state.licenseTypeFilterSelect.value
                                        .length == 0
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return true;
                                    }
                                    throw e;
                                  }
                                })() ? (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.column__hi1Z1
                                    )}
                                  >
                                    <Button2
                                      className={classNames(
                                        "__wab_instance",
                                        sty.button2__qOBkj
                                      )}
                                      color={"clear"}
                                      onClick={async event => {
                                        const $steps = {};

                                        $steps[
                                          "updateLicenseTypeFilterSelectValue"
                                        ] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: [
                                                    "licenseTypeFilterSelect",
                                                    "value"
                                                  ]
                                                },
                                                operation: 1
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  undefined
                                                );
                                                return undefined;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps[
                                            "updateLicenseTypeFilterSelectValue"
                                          ] != null &&
                                          typeof $steps[
                                            "updateLicenseTypeFilterSelectValue"
                                          ] === "object" &&
                                          typeof $steps[
                                            "updateLicenseTypeFilterSelectValue"
                                          ].then === "function"
                                        ) {
                                          $steps[
                                            "updateLicenseTypeFilterSelectValue"
                                          ] = await $steps[
                                            "updateLicenseTypeFilterSelectValue"
                                          ];
                                        }
                                      }}
                                      size={"minimal"}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__kbgAy
                                        )}
                                      >
                                        {"Reset Filter"}
                                      </div>
                                    </Button2>
                                  </div>
                                ) : null}
                              </div>
                            }
                            showArrow={true}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__zcoFy
                              )}
                            >
                              {
                                "Select any of the following license-types to limit results to those licenses.  If no items are selected, all license-types will be shown.  If all license-types are selected, only states which require one or more of those licenses will be shown."
                              }
                            </div>
                            <AntdSelect
                              data-plasmic-name={"licenseTypeFilterSelect"}
                              data-plasmic-override={
                                overrides.licenseTypeFilterSelect
                              }
                              allowClear={true}
                              className={classNames(
                                "__wab_instance",
                                sty.licenseTypeFilterSelect
                              )}
                              defaultStylesClassName={classNames(
                                projectcss.root_reset,
                                projectcss.plasmic_default_styles,
                                projectcss.plasmic_mixins,
                                projectcss.plasmic_tokens,
                                plasmic_antd_5_hostless_css.plasmic_tokens
                              )}
                              mode={"multiple"}
                              onChange={generateStateOnChangeProp($state, [
                                "licenseTypeFilterSelect",
                                "value"
                              ])}
                              options={[
                                {
                                  value: "option1",
                                  label: "Option 1",
                                  type: "option"
                                },
                                {
                                  value: "option2",
                                  label: "Option 2",
                                  type: "option"
                                }
                              ]}
                              placeholder={"Select..."}
                              popupScopeClassName={
                                sty["licenseTypeFilterSelect__popup"]
                              }
                              useChildren={true}
                              value={generateStateValueProp($state, [
                                "licenseTypeFilterSelect",
                                "value"
                              ])}
                            >
                              {(_par =>
                                !_par
                                  ? []
                                  : Array.isArray(_par)
                                  ? _par
                                  : [_par])(
                                (() => {
                                  try {
                                    return $queries.licenseTypeBaseQuery.data
                                      .response.list;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()
                              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                const currentItem = __plasmic_item_0;
                                const currentIndex = __plasmic_idx_0;
                                return (
                                  <AntdOption
                                    data-plasmic-name={
                                      "licenseTypeFilterSelectedOption"
                                    }
                                    data-plasmic-override={
                                      overrides.licenseTypeFilterSelectedOption
                                    }
                                    className={classNames(
                                      "__wab_instance",
                                      sty.licenseTypeFilterSelectedOption
                                    )}
                                    key={currentIndex}
                                    value={(() => {
                                      try {
                                        return currentItem.license_type_item;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()}
                                  >
                                    <div
                                      data-plasmic-name={
                                        "licenseTypeFilterSelectedText"
                                      }
                                      data-plasmic-override={
                                        overrides.licenseTypeFilterSelectedText
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.licenseTypeFilterSelectedText
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return currentItem.license_type_item;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "Option";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                  </AntdOption>
                                );
                              })}
                            </AntdSelect>
                          </AntdAccordionItem>
                          <AntdAccordionItem
                            data-plasmic-name={"activityTypeFilterAccordion"}
                            data-plasmic-override={
                              overrides.activityTypeFilterAccordion
                            }
                            className={classNames(
                              "__wab_instance",
                              sty.activityTypeFilterAccordion
                            )}
                            id={"4"}
                            label2={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.columns__wClzS
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.column__cNUjh
                                  )}
                                >
                                  {(() => {
                                    try {
                                      return (
                                        typeof $state.activityTypeSelect
                                          .value == "undefined" ||
                                        !$state.activityTypeSelect.value
                                          .length > 0
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })() ? (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text___2Xb1T
                                      )}
                                    >
                                      {
                                        "What activities may subject an entity to licensure?"
                                      }
                                    </div>
                                  ) : null}
                                  {(() => {
                                    try {
                                      return !(
                                        typeof $state.activityTypeSelect
                                          .value === "undefined" ||
                                        $state.activityTypeSelect.value
                                          .length == 0
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })() ? (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text___51Umx
                                      )}
                                    >
                                      {
                                        "What activities may subject an entity to licensure?"
                                      }
                                    </div>
                                  ) : null}
                                </div>
                                {(() => {
                                  try {
                                    return !(
                                      typeof $state.activityTypeSelect.value ===
                                        "undefined" ||
                                      $state.activityTypeSelect.value.length ==
                                        0
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return true;
                                    }
                                    throw e;
                                  }
                                })() ? (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.column__bdNIe
                                    )}
                                  >
                                    <Button2
                                      className={classNames(
                                        "__wab_instance",
                                        sty.button2__ajYHw
                                      )}
                                      color={"clear"}
                                      onClick={async event => {
                                        const $steps = {};

                                        $steps[
                                          "updateActivityTypeSelectValue"
                                        ] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: [
                                                    "activityTypeSelect",
                                                    "value"
                                                  ]
                                                },
                                                operation: 1
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  undefined
                                                );
                                                return undefined;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps[
                                            "updateActivityTypeSelectValue"
                                          ] != null &&
                                          typeof $steps[
                                            "updateActivityTypeSelectValue"
                                          ] === "object" &&
                                          typeof $steps[
                                            "updateActivityTypeSelectValue"
                                          ].then === "function"
                                        ) {
                                          $steps[
                                            "updateActivityTypeSelectValue"
                                          ] = await $steps[
                                            "updateActivityTypeSelectValue"
                                          ];
                                        }
                                      }}
                                      size={"minimal"}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__nwKt9
                                        )}
                                      >
                                        {"Reset Filter"}
                                      </div>
                                    </Button2>
                                  </div>
                                ) : null}
                              </div>
                            }
                            showArrow={true}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___0MjPh
                              )}
                            >
                              {
                                "Select any of the following activities to limit results to licenses that apply to the selected activities.  If no items are selected, all activities will be shown."
                              }
                            </div>
                            <AntdSelect
                              data-plasmic-name={"activityTypeSelect"}
                              data-plasmic-override={
                                overrides.activityTypeSelect
                              }
                              allowClear={true}
                              className={classNames(
                                "__wab_instance",
                                sty.activityTypeSelect
                              )}
                              defaultStylesClassName={classNames(
                                projectcss.root_reset,
                                projectcss.plasmic_default_styles,
                                projectcss.plasmic_mixins,
                                projectcss.plasmic_tokens,
                                plasmic_antd_5_hostless_css.plasmic_tokens
                              )}
                              mode={"multiple"}
                              onChange={generateStateOnChangeProp($state, [
                                "activityTypeSelect",
                                "value"
                              ])}
                              options={[
                                {
                                  value: "option1",
                                  label: "Option 1",
                                  type: "option"
                                },
                                {
                                  value: "option2",
                                  label: "Option 2",
                                  type: "option"
                                }
                              ]}
                              placeholder={"Select..."}
                              popupScopeClassName={
                                sty["activityTypeSelect__popup"]
                              }
                              size={"large"}
                              useChildren={true}
                              value={generateStateValueProp($state, [
                                "activityTypeSelect",
                                "value"
                              ])}
                            >
                              {(_par =>
                                !_par
                                  ? []
                                  : Array.isArray(_par)
                                  ? _par
                                  : [_par])(
                                (() => {
                                  try {
                                    return $queries.activityTypeBaseQuery.data
                                      .response.list;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()
                              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                const currentItem = __plasmic_item_0;
                                const currentIndex = __plasmic_idx_0;
                                return (
                                  <AntdOption
                                    className={classNames(
                                      "__wab_instance",
                                      sty.option__j12Cf
                                    )}
                                    key={currentIndex}
                                    value={(() => {
                                      try {
                                        return currentItem.regulated_activities_item_list;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__cNmR8
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return currentItem.regulated_activities_item_list;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "Option";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                  </AntdOption>
                                );
                              })}
                            </AntdSelect>
                          </AntdAccordionItem>
                          <AntdAccordionItem
                            data-plasmic-name={"licenseTriggerFilterAccordion"}
                            data-plasmic-override={
                              overrides.licenseTriggerFilterAccordion
                            }
                            className={classNames(
                              "__wab_instance",
                              sty.licenseTriggerFilterAccordion
                            )}
                            id={"5"}
                            label2={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.columns__faI0
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.column__t8VRg
                                  )}
                                >
                                  {(() => {
                                    try {
                                      return (
                                        typeof $state.licenseTriggerFilterSelect
                                          .value == "undefined" ||
                                        !$state.licenseTriggerFilterSelect.value
                                          .length > 0
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })() ? (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__dr1Zu
                                      )}
                                    >
                                      {
                                        "What triggers the requirement to obtain a license?"
                                      }
                                    </div>
                                  ) : null}
                                  {(() => {
                                    try {
                                      return !(
                                        typeof $state.licenseTriggerFilterSelect
                                          .value === "undefined" ||
                                        $state.licenseTriggerFilterSelect.value
                                          .length == 0
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })() ? (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__xgztQ
                                      )}
                                    >
                                      {
                                        "What triggers the requirement to obtain a license?"
                                      }
                                    </div>
                                  ) : null}
                                </div>
                                {(() => {
                                  try {
                                    return !(
                                      typeof $state.licenseTriggerFilterSelect
                                        .value === "undefined" ||
                                      $state.licenseTriggerFilterSelect.value
                                        .length == 0
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return true;
                                    }
                                    throw e;
                                  }
                                })() ? (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.column__qhr6O
                                    )}
                                  >
                                    <Button2
                                      className={classNames(
                                        "__wab_instance",
                                        sty.button2___4ItGz
                                      )}
                                      color={"clear"}
                                      onClick={async event => {
                                        const $steps = {};

                                        $steps[
                                          "updateLicenseTriggerFilterSelectValue"
                                        ] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: [
                                                    "licenseTriggerFilterSelect",
                                                    "value"
                                                  ]
                                                },
                                                operation: 1
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  undefined
                                                );
                                                return undefined;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps[
                                            "updateLicenseTriggerFilterSelectValue"
                                          ] != null &&
                                          typeof $steps[
                                            "updateLicenseTriggerFilterSelectValue"
                                          ] === "object" &&
                                          typeof $steps[
                                            "updateLicenseTriggerFilterSelectValue"
                                          ].then === "function"
                                        ) {
                                          $steps[
                                            "updateLicenseTriggerFilterSelectValue"
                                          ] = await $steps[
                                            "updateLicenseTriggerFilterSelectValue"
                                          ];
                                        }
                                      }}
                                      size={"minimal"}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__nm0JO
                                        )}
                                      >
                                        {"Reset Filter"}
                                      </div>
                                    </Button2>
                                  </div>
                                ) : null}
                              </div>
                            }
                            showArrow={true}
                          >
                            <AntdSelect
                              data-plasmic-name={"licenseTriggerFilterSelect"}
                              data-plasmic-override={
                                overrides.licenseTriggerFilterSelect
                              }
                              allowClear={true}
                              className={classNames(
                                "__wab_instance",
                                sty.licenseTriggerFilterSelect
                              )}
                              defaultStylesClassName={classNames(
                                projectcss.root_reset,
                                projectcss.plasmic_default_styles,
                                projectcss.plasmic_mixins,
                                projectcss.plasmic_tokens,
                                plasmic_antd_5_hostless_css.plasmic_tokens
                              )}
                              mode={"multiple"}
                              onChange={generateStateOnChangeProp($state, [
                                "licenseTriggerFilterSelect",
                                "value"
                              ])}
                              options={[]}
                              placeholder={
                                "Select one or more triggers to limit the results to only those triggers . . ."
                              }
                              popupScopeClassName={
                                sty["licenseTriggerFilterSelect__popup"]
                              }
                              useChildren={true}
                              value={generateStateValueProp($state, [
                                "licenseTriggerFilterSelect",
                                "value"
                              ])}
                            >
                              {(_par =>
                                !_par
                                  ? []
                                  : Array.isArray(_par)
                                  ? _par
                                  : [_par])(
                                (() => {
                                  try {
                                    return $queries.licenseTriggerBaseQuery.data
                                      .response.list;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()
                              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                const currentItem = __plasmic_item_0;
                                const currentIndex = __plasmic_idx_0;
                                return (
                                  <AntdOption
                                    className={classNames(
                                      "__wab_instance",
                                      sty.option__qErXq
                                    )}
                                    key={currentIndex}
                                    value={(() => {
                                      try {
                                        return currentItem.license_trigger_list;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__sdhfN
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return currentItem.license_trigger_list;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "Option";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                  </AntdOption>
                                );
                              })}
                            </AntdSelect>
                          </AntdAccordionItem>
                          <AntdAccordionItem
                            data-plasmic-name={
                              "productExcludedFeatureFilterAccordion2"
                            }
                            data-plasmic-override={
                              overrides.productExcludedFeatureFilterAccordion2
                            }
                            className={classNames(
                              "__wab_instance",
                              sty.productExcludedFeatureFilterAccordion2
                            )}
                            id={"3"}
                            label2={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.columns__tygeY
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.column___8Jx4K
                                  )}
                                >
                                  {(() => {
                                    try {
                                      return (
                                        typeof $state.prodExcludedFeatureSelect
                                          .value == "undefined" ||
                                        !$state.prodExcludedFeatureSelect.value
                                          .length > 0
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })() ? (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__dRp9T
                                      )}
                                    >
                                      {"What product features are exempt?"}
                                    </div>
                                  ) : null}
                                  {(() => {
                                    try {
                                      return !(
                                        typeof $state.prodExcludedFeatureSelect
                                          .value === "undefined" ||
                                        $state.prodExcludedFeatureSelect.value
                                          .length == 0
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })() ? (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text___1HdJs
                                      )}
                                    >
                                      {"What product features are exempt?"}
                                    </div>
                                  ) : null}
                                </div>
                                {(() => {
                                  try {
                                    return !(
                                      typeof $state.prodExcludedFeatureSelect
                                        .value === "undefined" ||
                                      $state.prodExcludedFeatureSelect.value
                                        .length == 0
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return true;
                                    }
                                    throw e;
                                  }
                                })() ? (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.column__zZgXp
                                    )}
                                  >
                                    <Button2
                                      className={classNames(
                                        "__wab_instance",
                                        sty.button2__eU5Li
                                      )}
                                      color={"clear"}
                                      onClick={async event => {
                                        const $steps = {};

                                        $steps[
                                          "updateProdExcludedFeatureSelectValue"
                                        ] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: [
                                                    "prodExcludedFeatureSelect",
                                                    "value"
                                                  ]
                                                },
                                                operation: 1
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  undefined
                                                );
                                                return undefined;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps[
                                            "updateProdExcludedFeatureSelectValue"
                                          ] != null &&
                                          typeof $steps[
                                            "updateProdExcludedFeatureSelectValue"
                                          ] === "object" &&
                                          typeof $steps[
                                            "updateProdExcludedFeatureSelectValue"
                                          ].then === "function"
                                        ) {
                                          $steps[
                                            "updateProdExcludedFeatureSelectValue"
                                          ] = await $steps[
                                            "updateProdExcludedFeatureSelectValue"
                                          ];
                                        }
                                      }}
                                      size={"minimal"}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__mxoR
                                        )}
                                      >
                                        {"Reset Filter"}
                                      </div>
                                    </Button2>
                                  </div>
                                ) : null}
                              </div>
                            }
                            showArrow={true}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__frHN
                              )}
                            >
                              <React.Fragment>
                                <React.Fragment>
                                  {
                                    "Each of the below-described items are excluded from the relevant definitions in at least one state.  Select one or more relevant items to "
                                  }
                                </React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ textDecorationLine: "underline" }}
                                >
                                  {"exclude"}
                                </span>
                                <React.Fragment>
                                  {
                                    " these items from your search results for the states in which they are exempt.  If no items are selected, no exclusions will be applied."
                                  }
                                </React.Fragment>
                              </React.Fragment>
                            </div>
                            <AntdSelect
                              data-plasmic-name={"prodExcludedFeatureSelect"}
                              data-plasmic-override={
                                overrides.prodExcludedFeatureSelect
                              }
                              allowClear={true}
                              className={classNames(
                                "__wab_instance",
                                sty.prodExcludedFeatureSelect
                              )}
                              defaultStylesClassName={classNames(
                                projectcss.root_reset,
                                projectcss.plasmic_default_styles,
                                projectcss.plasmic_mixins,
                                projectcss.plasmic_tokens,
                                plasmic_antd_5_hostless_css.plasmic_tokens
                              )}
                              mode={"multiple"}
                              onChange={generateStateOnChangeProp($state, [
                                "prodExcludedFeatureSelect",
                                "value"
                              ])}
                              options={[
                                {
                                  value: "option1",
                                  label: "Option 1",
                                  type: "option"
                                },
                                {
                                  value: "option2",
                                  label: "Option 2",
                                  type: "option"
                                }
                              ]}
                              placeholder={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__ert1J
                                  )}
                                >
                                  {"Select..."}
                                </div>
                              }
                              popupScopeClassName={
                                sty["prodExcludedFeatureSelect__popup"]
                              }
                              size={"large"}
                              useChildren={true}
                              value={generateStateValueProp($state, [
                                "prodExcludedFeatureSelect",
                                "value"
                              ])}
                            >
                              {(_par =>
                                !_par
                                  ? []
                                  : Array.isArray(_par)
                                  ? _par
                                  : [_par])(
                                (() => {
                                  try {
                                    return $queries
                                      .prodExcludedBaseFeaturesQuery.data
                                      .response.list;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()
                              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                const currentItem = __plasmic_item_0;
                                const currentIndex = __plasmic_idx_0;
                                return (
                                  <AntdOption
                                    className={classNames(
                                      "__wab_instance",
                                      sty.option__b2Qo
                                    )}
                                    key={currentIndex}
                                    value={(() => {
                                      try {
                                        return currentItem.excluded_product_feature_list;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text___0Bx0
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return currentItem.excluded_product_feature_list;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "Option";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                  </AntdOption>
                                );
                              })}
                            </AntdSelect>
                          </AntdAccordionItem>
                          <AntdAccordionItem
                            data-plasmic-name={
                              "licensureExemptEntitiesAccordion"
                            }
                            data-plasmic-override={
                              overrides.licensureExemptEntitiesAccordion
                            }
                            className={classNames(
                              "__wab_instance",
                              sty.licensureExemptEntitiesAccordion
                            )}
                            id={"6"}
                            label2={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.columns__aozvW
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.column__nrtjO
                                  )}
                                >
                                  {(() => {
                                    try {
                                      return (
                                        typeof $state
                                          .servExemptEntitiesFilterSelect
                                          .value == "undefined" ||
                                        !$state.servExemptEntitiesFilterSelect
                                          .value.length > 0
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })() ? (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__o50N
                                      )}
                                    >
                                      {
                                        "What entities are exempt from licensure?"
                                      }
                                    </div>
                                  ) : null}
                                  {(() => {
                                    try {
                                      return !(
                                        typeof $state
                                          .servExemptEntitiesFilterSelect
                                          .value === "undefined" ||
                                        $state.servExemptEntitiesFilterSelect
                                          .value.length == 0
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })() ? (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__tSmdn
                                      )}
                                    >
                                      {
                                        "What entities are exempt from licensure?"
                                      }
                                    </div>
                                  ) : null}
                                </div>
                                {(() => {
                                  try {
                                    return !(
                                      typeof $state
                                        .servExemptEntitiesFilterSelect
                                        .value === "undefined" ||
                                      $state.servExemptEntitiesFilterSelect
                                        .value.length == 0
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return true;
                                    }
                                    throw e;
                                  }
                                })() ? (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.column__ouFiY
                                    )}
                                  >
                                    <Button2
                                      className={classNames(
                                        "__wab_instance",
                                        sty.button2__eioOb
                                      )}
                                      color={"clear"}
                                      onClick={async event => {
                                        const $steps = {};

                                        $steps[
                                          "updateServExemptEntitiesFilterSelectValue"
                                        ] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: [
                                                    "servExemptEntitiesFilterSelect",
                                                    "value"
                                                  ]
                                                },
                                                operation: 1
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  undefined
                                                );
                                                return undefined;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps[
                                            "updateServExemptEntitiesFilterSelectValue"
                                          ] != null &&
                                          typeof $steps[
                                            "updateServExemptEntitiesFilterSelectValue"
                                          ] === "object" &&
                                          typeof $steps[
                                            "updateServExemptEntitiesFilterSelectValue"
                                          ].then === "function"
                                        ) {
                                          $steps[
                                            "updateServExemptEntitiesFilterSelectValue"
                                          ] = await $steps[
                                            "updateServExemptEntitiesFilterSelectValue"
                                          ];
                                        }
                                      }}
                                      size={"minimal"}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text___2W6Ef
                                        )}
                                      >
                                        {"Reset Filter"}
                                      </div>
                                    </Button2>
                                  </div>
                                ) : null}
                              </div>
                            }
                            showArrow={true}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__uCYqC
                              )}
                            >
                              <React.Fragment>
                                <React.Fragment>
                                  {
                                    "Each of the below entity types are exempt from licensure in at least one state.  Select one or more relevant entity types to "
                                  }
                                </React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ textDecorationLine: "underline" }}
                                >
                                  {"exclude"}
                                </span>
                                <React.Fragment>
                                  {
                                    " these entity types from your search results for the states in which they are exempt.  If no items are selected, no exclusions will be applied."
                                  }
                                </React.Fragment>
                              </React.Fragment>
                            </div>
                            <AntdSelect
                              data-plasmic-name={
                                "servExemptEntitiesFilterSelect"
                              }
                              data-plasmic-override={
                                overrides.servExemptEntitiesFilterSelect
                              }
                              allowClear={true}
                              className={classNames(
                                "__wab_instance",
                                sty.servExemptEntitiesFilterSelect
                              )}
                              defaultStylesClassName={classNames(
                                projectcss.root_reset,
                                projectcss.plasmic_default_styles,
                                projectcss.plasmic_mixins,
                                projectcss.plasmic_tokens,
                                plasmic_antd_5_hostless_css.plasmic_tokens
                              )}
                              mode={"multiple"}
                              onChange={generateStateOnChangeProp($state, [
                                "servExemptEntitiesFilterSelect",
                                "value"
                              ])}
                              options={[]}
                              placeholder={"Select . . ."}
                              popupScopeClassName={
                                sty["servExemptEntitiesFilterSelect__popup"]
                              }
                              useChildren={true}
                              value={generateStateValueProp($state, [
                                "servExemptEntitiesFilterSelect",
                                "value"
                              ])}
                            >
                              {(_par =>
                                !_par
                                  ? []
                                  : Array.isArray(_par)
                                  ? _par
                                  : [_par])(
                                (() => {
                                  try {
                                    return $queries.exemptEntityBaseQuery.data
                                      .response.list;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()
                              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                const currentItem = __plasmic_item_0;
                                const currentIndex = __plasmic_idx_0;
                                return (
                                  <AntdOption
                                    className={classNames(
                                      "__wab_instance",
                                      sty.option__dDhNd
                                    )}
                                    key={currentIndex}
                                    value={(() => {
                                      try {
                                        return currentItem.entity_type_list;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__uSYzQ
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return currentItem.entity_type_list;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "Option";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                  </AntdOption>
                                );
                              })}
                            </AntdSelect>
                          </AntdAccordionItem>
                        </React.Fragment>
                      ),
                      onChange: generateStateOnChangePropForCodeComponents(
                        $state,
                        "activePanelId",
                        ["accordion", "activePanelId"],
                        AntdAccordion_Helpers
                      ),
                      size: "small"
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "activePanelId",
                          plasmicStateName: "accordion.activePanelId"
                        }
                      ],
                      [],
                      AntdAccordion_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <AntdAccordion
                        data-plasmic-name={"accordion"}
                        data-plasmic-override={overrides.accordion}
                        {...child$Props}
                      />
                    );
                  })()}
                </div>
              </section>
            ) : null}
            <div className={classNames(projectcss.all, sty.freeBox__q4Ice)}>
              {(() => {
                try {
                  return true;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <section
                  data-plasmic-name={"headerSection"}
                  data-plasmic-override={overrides.headerSection}
                  className={classNames(projectcss.all, sty.headerSection)}
                >
                  <div
                    className={classNames(projectcss.all, sty.columns___168Z)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column___8CmF)}
                    >
                      <Button2
                        className={classNames(
                          "__wab_instance",
                          sty.button2__iN80L
                        )}
                        color={"clear"}
                        endIcon={
                          <React.Fragment>
                            {(() => {
                              try {
                                return !$state.stateSortVariable;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <SortAmountDownSvgrepoComsvgIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__ddIW
                                )}
                                role={"img"}
                              />
                            ) : null}
                            {(() => {
                              try {
                                return $state.stateSortVariable;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <SortAmountUpSvgrepoComsvgIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__h3Sy
                                )}
                                role={"img"}
                              />
                            ) : null}
                          </React.Fragment>
                        }
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateVariable"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["stateSortVariable"]
                                  },
                                  operation: 4
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  const oldValue = $stateGet(
                                    objRoot,
                                    variablePath
                                  );
                                  $stateSet(objRoot, variablePath, !oldValue);
                                  return !oldValue;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateVariable"] != null &&
                            typeof $steps["updateVariable"] === "object" &&
                            typeof $steps["updateVariable"].then === "function"
                          ) {
                            $steps["updateVariable"] = await $steps[
                              "updateVariable"
                            ];
                          }
                        }}
                        showEndIcon={true}
                      >
                        {"State"}
                      </Button2>
                    </div>
                    {(() => {
                      try {
                        return (
                          $state.licenseTypeFilterSelect.value
                            .flat()
                            .indexOf(`Student Loan Servicing License`) != -1 ||
                          $state.licenseTypeFilterSelect.value.length == 0
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__tlEGm
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___180Oe
                          )}
                        >
                          {"Licenses Student Loan Servicers?"}
                        </div>
                      </div>
                    ) : null}
                    {(() => {
                      try {
                        return (
                          $state.licenseTypeFilterSelect.value
                            .flat()
                            .indexOf(`Student Loan Creditor Registration`) !=
                            -1 ||
                          $state.licenseTypeFilterSelect.value.length == 0
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column___1Y5Ph
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__edGTy
                          )}
                        >
                          {"Student Loan Creditors Must Register?"}
                        </div>
                      </div>
                    ) : null}
                    {(() => {
                      try {
                        return (
                          $state.licenseTypeFilterSelect.value
                            .flat()
                            .indexOf(`Student Loan Servicer Notification`) !=
                            -1 ||
                          $state.licenseTypeFilterSelect.value.length == 0
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column___0Rjsr
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__nwZ
                          )}
                        >
                          {"Student Loan Servicers Must Notify Ombudsman?"}
                        </div>
                      </div>
                    ) : null}
                  </div>
                </section>
              ) : null}
              {(() => {
                try {
                  return $queries.allFiltersQuery.isLoading;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <section
                  className={classNames(projectcss.all, sty.section___3Xmqo)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ect58
                    )}
                  >
                    {"Loading . . . "}
                  </div>
                  <Embed
                    className={classNames(
                      "__wab_instance",
                      sty.embedHtml__hGzm
                    )}
                    code={
                      '<svg width="72" height="72" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M12,1A11,11,0,1,0,23,12,11,11,0,0,0,12,1Zm0,20a9,9,0,1,1,9-9A9,9,0,0,1,12,21Z"/><rect x="11" y="6" rx="1" width="2" height="7"><animateTransform attributeName="transform" type="rotate" dur="9s" values="0 12 12;360 12 12" repeatCount="indefinite"/></rect><rect x="11" y="11" rx="1" width="2" height="9"><animateTransform attributeName="transform" type="rotate" dur="0.75s" values="0 12 12;360 12 12" repeatCount="indefinite"/></rect></svg>'
                    }
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xkuZs
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return "This website only provides information about state legal requirements that apply specifically to extending and servicing education finance products, such as lender-originated loans and postsecondary school/institutional financing.  This site does not describe the numerous laws that generally regulate lenders, retail installment sellers, assignees, marketers, debt collectors, credit services organizations, or other types of regulated entities. Consult a qualified attorney for legal guidance that is applicable to your specific circumstances. Your use of this website is subject to the Terms of Use at the bottom of this page.";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </section>
              ) : null}
              <section
                data-plasmic-name={"dataSection"}
                data-plasmic-override={overrides.dataSection}
                className={classNames(projectcss.all, sty.dataSection)}
              >
                {(() => {
                  const child$Props = {
                    activeKey: generateStateValueProp($state, [
                      "stateDetailsAccordion",
                      "activePanelId"
                    ]),
                    bordered: true,
                    className: classNames(
                      "__wab_instance",
                      sty.stateDetailsAccordion
                    ),
                    ghost: true,
                    items: (_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $queries.allFiltersQuery.data.response.list;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <AntdAccordionItem
                          data-plasmic-name={"accordionItem"}
                          data-plasmic-override={overrides.accordionItem}
                          className={classNames(
                            "__wab_instance",
                            sty.accordionItem
                          )}
                          collapsible={(() => {
                            try {
                              return (
                                currentItem.required_license_types.length > 0
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          id={(() => {
                            try {
                              return currentIndex;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          key={currentIndex}
                          label2={
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.columns___9GzWm
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.column__neiW
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__miIhr
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.state;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "First Item";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </div>
                              {(() => {
                                try {
                                  return (
                                    $state.licenseTypeFilterSelect.value
                                      .flat()
                                      .indexOf(
                                        `Student Loan Servicing License`
                                      ) != -1 ||
                                    $state.licenseTypeFilterSelect.value
                                      .length == 0
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.column__bD3N2
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__yfzZz
                                    )}
                                  >
                                    {"Licenses Servicers?"}
                                  </div>
                                  {(() => {
                                    try {
                                      return (
                                        currentItem.required_license_types.indexOf(
                                          "Student Loan Servicing License"
                                        ) != -1
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })() ? (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__muz6H
                                      )}
                                    >
                                      {"Yes"}
                                    </div>
                                  ) : null}
                                  {(() => {
                                    try {
                                      return (
                                        currentItem.required_license_types.indexOf(
                                          "Student Loan Servicing License"
                                        ) == -1
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })() ? (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__wafMz
                                      )}
                                    >
                                      {"No"}
                                    </div>
                                  ) : null}
                                </div>
                              ) : null}
                              {(() => {
                                try {
                                  return (
                                    $state.licenseTypeFilterSelect.value
                                      .flat()
                                      .indexOf(
                                        `Student Loan Creditor Registration`
                                      ) != -1 ||
                                    $state.licenseTypeFilterSelect.value
                                      .length == 0
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.column___437Tj
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text___69TVt
                                    )}
                                  >
                                    {"Creditors Must Register?"}
                                  </div>
                                  {(() => {
                                    try {
                                      return (
                                        currentItem.required_license_types.indexOf(
                                          "Student Loan Creditor Registration"
                                        ) != -1
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })() ? (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__bdoub
                                      )}
                                    >
                                      {"Yes"}
                                    </div>
                                  ) : null}
                                  {(() => {
                                    try {
                                      return (
                                        currentItem.required_license_types.indexOf(
                                          "Student Loan Creditor Registration"
                                        ) == -1
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })() ? (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text___2NnTx
                                      )}
                                    >
                                      {"No"}
                                    </div>
                                  ) : null}
                                </div>
                              ) : null}
                              {(() => {
                                try {
                                  return (
                                    $state.licenseTypeFilterSelect.value
                                      .flat()
                                      .indexOf(
                                        `Student Loan Servicer Notification`
                                      ) != -1 ||
                                    $state.licenseTypeFilterSelect.value
                                      .length == 0
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.column__gGwoE
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__eiTuT
                                    )}
                                  >
                                    {"Servicers Must Notify Ombudsman?"}
                                  </div>
                                  {(() => {
                                    try {
                                      return (
                                        currentItem.required_license_types.indexOf(
                                          "Student Loan Servicer Notification"
                                        ) != -1
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })() ? (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__aNwY
                                      )}
                                    >
                                      {"Yes"}
                                    </div>
                                  ) : null}
                                  {(() => {
                                    try {
                                      return (
                                        currentItem.required_license_types.indexOf(
                                          "Student Loan Servicer Notification"
                                        ) == -1
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })() ? (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__g7Mv0
                                      )}
                                    >
                                      {"No"}
                                    </div>
                                  ) : null}
                                </div>
                              ) : null}
                            </div>
                          }
                          showArrow={true}
                        >
                          {(() => {
                            try {
                              return (
                                currentItem.required_license_types.indexOf(
                                  "Student Loan Servicing License"
                                ) != -1 &&
                                $state.licenseTypeFilterSelect.value.indexOf(
                                  "Student Loan Servicing License"
                                ) != -1
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })()
                            ? (() => {
                                const child$Props = {
                                  bordered: true,
                                  className: classNames(
                                    "__wab_instance",
                                    sty.servicingDetailsCollapse
                                  ),
                                  label2: "Servicing License Details",
                                  onChange:
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "open",
                                      [
                                        "servicingDetailsCollapse",
                                        __plasmic_idx_0,
                                        "open"
                                      ],
                                      AntdSingleCollapse_Helpers
                                    ),
                                  open: generateStateValueProp($state, [
                                    "servicingDetailsCollapse",
                                    __plasmic_idx_0,
                                    "open"
                                  ]),
                                  showArrow: true
                                };
                                initializeCodeComponentStates(
                                  $state,
                                  [
                                    {
                                      name: "open",
                                      plasmicStateName:
                                        "servicingDetailsCollapse[].open"
                                    }
                                  ],
                                  [__plasmic_idx_0],
                                  AntdSingleCollapse_Helpers ?? {},
                                  child$Props
                                );
                                initializePlasmicStates(
                                  $state,
                                  [
                                    {
                                      name: "servicingDetailsCollapse[].open",
                                      initFunc: ({
                                        $props,
                                        $state,
                                        $queries
                                      }) => undefined
                                    }
                                  ],
                                  [__plasmic_idx_0]
                                );
                                return (
                                  <AntdSingleCollapse
                                    data-plasmic-name={
                                      "servicingDetailsCollapse"
                                    }
                                    data-plasmic-override={
                                      overrides.servicingDetailsCollapse
                                    }
                                    {...child$Props}
                                  >
                                    <div
                                      data-plasmic-name={"servLicTriggers"}
                                      data-plasmic-override={
                                        overrides.servLicTriggers
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.servLicTriggers
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.column__ps8Fi
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__x1MXj
                                          )}
                                        >
                                          {
                                            "What triggers the requirement to obtain a student loan servicing license?"
                                          }
                                        </div>
                                        {(() => {
                                          const child$Props = {
                                            align: "center",
                                            className: classNames(
                                              "__wab_instance",
                                              sty.popoverCore4
                                            ),
                                            onOpenChange:
                                              generateStateOnChangeProp(
                                                $state,
                                                [
                                                  "popoverCore4",
                                                  __plasmic_idx_0,
                                                  "open"
                                                ]
                                              ),
                                            open: generateStateValueProp(
                                              $state,
                                              [
                                                "popoverCore4",
                                                __plasmic_idx_0,
                                                "open"
                                              ]
                                            ),
                                            overlay: (
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox__fdhMj
                                                )}
                                              >
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__bOu86
                                                  )}
                                                >
                                                  <React.Fragment>
                                                    {(() => {
                                                      try {
                                                        return currentItem.serv_who_needs;
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return "Here is the popover content.";
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                  </React.Fragment>
                                                </div>
                                                {(() => {
                                                  try {
                                                    return (
                                                      currentItem.servicing_law_link !=
                                                        null &&
                                                      currentItem
                                                        .servicing_law_link
                                                        .length != 0
                                                    );
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return true;
                                                    }
                                                    throw e;
                                                  }
                                                })() ? (
                                                  <PlasmicLink__
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.a,
                                                      projectcss.__wab_text,
                                                      sty.link___5NrmY
                                                    )}
                                                    component={Link}
                                                    href={(() => {
                                                      try {
                                                        return currentItem.servicing_law_link;
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return "https://www.plasmic.app/";
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                    platform={"gatsby"}
                                                    target={"_blank"}
                                                  >
                                                    {
                                                      "Open original statute in new tab"
                                                    }
                                                  </PlasmicLink__>
                                                ) : null}
                                              </div>
                                            ),
                                            side: "right",
                                            themeResetClass: classNames(
                                              projectcss.root_reset,
                                              projectcss.plasmic_default_styles,
                                              projectcss.plasmic_mixins,
                                              projectcss.plasmic_tokens,
                                              plasmic_antd_5_hostless_css.plasmic_tokens
                                            )
                                          };
                                          initializeCodeComponentStates(
                                            $state,
                                            [
                                              {
                                                name: "open",
                                                plasmicStateName:
                                                  "popoverCore4[].open"
                                              }
                                            ],
                                            [__plasmic_idx_0],
                                            undefined ?? {},
                                            child$Props
                                          );
                                          initializePlasmicStates(
                                            $state,
                                            [
                                              {
                                                name: "popoverCore4[].open",
                                                initFunc: ({
                                                  $props,
                                                  $state,
                                                  $queries
                                                }) => undefined
                                              }
                                            ],
                                            [__plasmic_idx_0]
                                          );
                                          return (
                                            <Popover
                                              data-plasmic-name={"popoverCore4"}
                                              data-plasmic-override={
                                                overrides.popoverCore4
                                              }
                                              {...child$Props}
                                            >
                                              <Button
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.button__gbIcv
                                                )}
                                                color={"softSand"}
                                                size={"compact"}
                                              >
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__jxLe9
                                                  )}
                                                >
                                                  {"View Statute"}
                                                </div>
                                              </Button>
                                            </Popover>
                                          );
                                        })()}
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.column__ce0W
                                        )}
                                      >
                                        {(_par =>
                                          !_par
                                            ? []
                                            : Array.isArray(_par)
                                            ? _par
                                            : [_par])(
                                          (() => {
                                            try {
                                              return currentItem
                                                .serv_license_trigger_list[0];
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return [];
                                              }
                                              throw e;
                                            }
                                          })()
                                        ).map(
                                          (
                                            __plasmic_item_1,
                                            __plasmic_idx_1
                                          ) => {
                                            const currentItem =
                                              __plasmic_item_1;
                                            const currentIndex =
                                              __plasmic_idx_1;
                                            return (
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox__cpUw6
                                                )}
                                                key={currentIndex}
                                              >
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__ytuem
                                                  )}
                                                >
                                                  <React.Fragment>
                                                    {(() => {
                                                      try {
                                                        return (
                                                          currentIndex +
                                                          1 +
                                                          ". " +
                                                          currentItem
                                                        );
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return "";
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                  </React.Fragment>
                                                </div>
                                              </div>
                                            );
                                          }
                                        )}
                                      </div>
                                    </div>
                                    <div
                                      data-plasmic-name={"servDefStudentLoan2"}
                                      data-plasmic-override={
                                        overrides.servDefStudentLoan2
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.servDefStudentLoan2
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.column__h7ELq
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__jkvzk
                                          )}
                                        >
                                          {
                                            'Definition of a "Student Loan" (summary)'
                                          }
                                        </div>
                                        {(() => {
                                          const child$Props = {
                                            align: "center",
                                            className: classNames(
                                              "__wab_instance",
                                              sty.popoverCore2
                                            ),
                                            onOpenChange:
                                              generateStateOnChangeProp(
                                                $state,
                                                [
                                                  "popoverCore2",
                                                  __plasmic_idx_0,
                                                  "open"
                                                ]
                                              ),
                                            open: generateStateValueProp(
                                              $state,
                                              [
                                                "popoverCore2",
                                                __plasmic_idx_0,
                                                "open"
                                              ]
                                            ),
                                            overlay: (
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox__fbJdd
                                                )}
                                              >
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__xg66A
                                                  )}
                                                >
                                                  <React.Fragment>
                                                    {(() => {
                                                      try {
                                                        return currentItem.serv_def_studentloan_prod_features;
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return "Here is the popover content.";
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                  </React.Fragment>
                                                </div>
                                                {(() => {
                                                  try {
                                                    return (
                                                      currentItem.servicing_law_link !=
                                                        null &&
                                                      currentItem
                                                        .servicing_law_link
                                                        .length != 0
                                                    );
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return true;
                                                    }
                                                    throw e;
                                                  }
                                                })() ? (
                                                  <PlasmicLink__
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.a,
                                                      projectcss.__wab_text,
                                                      sty.link__y1N
                                                    )}
                                                    component={Link}
                                                    href={(() => {
                                                      try {
                                                        return currentItem.servicing_law_link;
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return "https://www.plasmic.app/";
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                    platform={"gatsby"}
                                                    target={"_blank"}
                                                  >
                                                    {
                                                      "Open original statute in new tab"
                                                    }
                                                  </PlasmicLink__>
                                                ) : null}
                                              </div>
                                            ),
                                            side: "right",
                                            themeResetClass: classNames(
                                              projectcss.root_reset,
                                              projectcss.plasmic_default_styles,
                                              projectcss.plasmic_mixins,
                                              projectcss.plasmic_tokens,
                                              plasmic_antd_5_hostless_css.plasmic_tokens
                                            )
                                          };
                                          initializeCodeComponentStates(
                                            $state,
                                            [
                                              {
                                                name: "open",
                                                plasmicStateName:
                                                  "popoverCore2[].open"
                                              }
                                            ],
                                            [__plasmic_idx_0],
                                            undefined ?? {},
                                            child$Props
                                          );
                                          initializePlasmicStates(
                                            $state,
                                            [
                                              {
                                                name: "popoverCore2[].open",
                                                initFunc: ({
                                                  $props,
                                                  $state,
                                                  $queries
                                                }) => undefined
                                              }
                                            ],
                                            [__plasmic_idx_0]
                                          );
                                          return (
                                            <Popover
                                              data-plasmic-name={"popoverCore2"}
                                              data-plasmic-override={
                                                overrides.popoverCore2
                                              }
                                              {...child$Props}
                                            >
                                              <Button
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.button__b0Tsn
                                                )}
                                                color={"softSand"}
                                                size={"compact"}
                                              >
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__nebfb
                                                  )}
                                                >
                                                  {"View Statute"}
                                                </div>
                                              </Button>
                                            </Popover>
                                          );
                                        })()}
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.column__xkbmL
                                        )}
                                      >
                                        {(_par =>
                                          !_par
                                            ? []
                                            : Array.isArray(_par)
                                            ? _par
                                            : [_par])(
                                          (() => {
                                            try {
                                              return currentItem.serv_prod_features_lookup_field;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return [];
                                              }
                                              throw e;
                                            }
                                          })()
                                        ).map(
                                          (
                                            __plasmic_item_1,
                                            __plasmic_idx_1
                                          ) => {
                                            const currentItem =
                                              __plasmic_item_1;
                                            const currentIndex =
                                              __plasmic_idx_1;
                                            return (
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox__xtOd
                                                )}
                                                key={currentIndex}
                                              >
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__z3Va
                                                  )}
                                                >
                                                  <React.Fragment>
                                                    {(() => {
                                                      try {
                                                        return (
                                                          currentIndex +
                                                          1 +
                                                          ". " +
                                                          currentItem
                                                        );
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return "";
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                  </React.Fragment>
                                                </div>
                                              </div>
                                            );
                                          }
                                        )}
                                      </div>
                                    </div>
                                    <div
                                      data-plasmic-name={
                                        "servDefStudentLoanExceptions"
                                      }
                                      data-plasmic-override={
                                        overrides.servDefStudentLoanExceptions
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.servDefStudentLoanExceptions
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.column__e6GGz
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__og6Ja
                                          )}
                                        >
                                          {
                                            'Exclusions from definition of "Student Loan" (summary)'
                                          }
                                        </div>
                                        {(() => {
                                          const child$Props = {
                                            align: "center",
                                            className: classNames(
                                              "__wab_instance",
                                              sty.popoverCore3
                                            ),
                                            onOpenChange:
                                              generateStateOnChangeProp(
                                                $state,
                                                [
                                                  "popoverCore3",
                                                  __plasmic_idx_0,
                                                  "open"
                                                ]
                                              ),
                                            open: generateStateValueProp(
                                              $state,
                                              [
                                                "popoverCore3",
                                                __plasmic_idx_0,
                                                "open"
                                              ]
                                            ),
                                            overlay: (
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox__nnfSa
                                                )}
                                              >
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text___8RkFd
                                                  )}
                                                >
                                                  <React.Fragment>
                                                    {(() => {
                                                      try {
                                                        return currentItem.serv_excluded_prod_features_text;
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return "Here is the popover content.";
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                  </React.Fragment>
                                                </div>
                                                {(() => {
                                                  try {
                                                    return (
                                                      currentItem.servicing_law_link !=
                                                        null &&
                                                      currentItem
                                                        .servicing_law_link
                                                        .length != 0
                                                    );
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return true;
                                                    }
                                                    throw e;
                                                  }
                                                })() ? (
                                                  <PlasmicLink__
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.a,
                                                      projectcss.__wab_text,
                                                      sty.link__ikTWo
                                                    )}
                                                    component={Link}
                                                    href={(() => {
                                                      try {
                                                        return currentItem.servicing_law_link;
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return "https://www.plasmic.app/";
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                    platform={"gatsby"}
                                                    target={"_blank"}
                                                  >
                                                    {
                                                      "Open original statute in new tab"
                                                    }
                                                  </PlasmicLink__>
                                                ) : null}
                                              </div>
                                            ),
                                            side: "right",
                                            themeResetClass: classNames(
                                              projectcss.root_reset,
                                              projectcss.plasmic_default_styles,
                                              projectcss.plasmic_mixins,
                                              projectcss.plasmic_tokens,
                                              plasmic_antd_5_hostless_css.plasmic_tokens
                                            )
                                          };
                                          initializeCodeComponentStates(
                                            $state,
                                            [
                                              {
                                                name: "open",
                                                plasmicStateName:
                                                  "popoverCore3[].open"
                                              }
                                            ],
                                            [__plasmic_idx_0],
                                            undefined ?? {},
                                            child$Props
                                          );
                                          initializePlasmicStates(
                                            $state,
                                            [
                                              {
                                                name: "popoverCore3[].open",
                                                initFunc: ({
                                                  $props,
                                                  $state,
                                                  $queries
                                                }) => undefined
                                              }
                                            ],
                                            [__plasmic_idx_0]
                                          );
                                          return (
                                            <Popover
                                              data-plasmic-name={"popoverCore3"}
                                              data-plasmic-override={
                                                overrides.popoverCore3
                                              }
                                              {...child$Props}
                                            >
                                              <Button
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.button___0AjzR
                                                )}
                                                color={"softSand"}
                                                size={"compact"}
                                              >
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__k6PAg
                                                  )}
                                                >
                                                  {"View Statute"}
                                                </div>
                                              </Button>
                                            </Popover>
                                          );
                                        })()}
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.column__spgAo
                                        )}
                                      >
                                        {(_par =>
                                          !_par
                                            ? []
                                            : Array.isArray(_par)
                                            ? _par
                                            : [_par])(
                                          (() => {
                                            try {
                                              return currentItem.serv_prod_feature_excluded_list;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return [];
                                              }
                                              throw e;
                                            }
                                          })()
                                        ).map(
                                          (
                                            __plasmic_item_1,
                                            __plasmic_idx_1
                                          ) => {
                                            const currentItem =
                                              __plasmic_item_1;
                                            const currentIndex =
                                              __plasmic_idx_1;
                                            return (
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox__ptrw
                                                )}
                                                key={currentIndex}
                                              >
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__sQqIx
                                                  )}
                                                >
                                                  <React.Fragment>
                                                    {(() => {
                                                      try {
                                                        return (
                                                          currentIndex +
                                                          1 +
                                                          ". " +
                                                          currentItem
                                                        );
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return "";
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                  </React.Fragment>
                                                </div>
                                              </div>
                                            );
                                          }
                                        )}
                                      </div>
                                    </div>
                                    <div
                                      data-plasmic-name={"servDefStudentLoan"}
                                      data-plasmic-override={
                                        overrides.servDefStudentLoan
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.servDefStudentLoan
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.column__uqCxt
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__vigMw
                                          )}
                                        >
                                          {
                                            'Definition of "Servicing" (summary)'
                                          }
                                        </div>
                                        {(() => {
                                          const child$Props = {
                                            align: "center",
                                            className: classNames(
                                              "__wab_instance",
                                              sty.popoverCore
                                            ),
                                            onOpenChange:
                                              generateStateOnChangeProp(
                                                $state,
                                                [
                                                  "popoverCore",
                                                  __plasmic_idx_0,
                                                  "open"
                                                ]
                                              ),
                                            open: generateStateValueProp(
                                              $state,
                                              [
                                                "popoverCore",
                                                __plasmic_idx_0,
                                                "open"
                                              ]
                                            ),
                                            overlay: (
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox__a4TBn
                                                )}
                                              >
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__bdLTd
                                                  )}
                                                >
                                                  <React.Fragment>
                                                    {(() => {
                                                      try {
                                                        return currentItem.serv_def_servicing_text;
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return "Here is the popover content.";
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                  </React.Fragment>
                                                </div>
                                                {(() => {
                                                  try {
                                                    return (
                                                      currentItem.servicing_law_link !=
                                                        null &&
                                                      currentItem
                                                        .servicing_law_link
                                                        .length != 0
                                                    );
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return true;
                                                    }
                                                    throw e;
                                                  }
                                                })() ? (
                                                  <PlasmicLink__
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.a,
                                                      projectcss.__wab_text,
                                                      sty.link__euq7P
                                                    )}
                                                    component={Link}
                                                    href={(() => {
                                                      try {
                                                        return currentItem.servicing_law_link;
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return "https://www.plasmic.app/";
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                    platform={"gatsby"}
                                                    target={"_blank"}
                                                  >
                                                    {
                                                      "Open original statute in new tab"
                                                    }
                                                  </PlasmicLink__>
                                                ) : null}
                                              </div>
                                            ),
                                            side: "right",
                                            themeResetClass: classNames(
                                              projectcss.root_reset,
                                              projectcss.plasmic_default_styles,
                                              projectcss.plasmic_mixins,
                                              projectcss.plasmic_tokens,
                                              plasmic_antd_5_hostless_css.plasmic_tokens
                                            )
                                          };
                                          initializeCodeComponentStates(
                                            $state,
                                            [
                                              {
                                                name: "open",
                                                plasmicStateName:
                                                  "popoverCore[].open"
                                              }
                                            ],
                                            [__plasmic_idx_0],
                                            undefined ?? {},
                                            child$Props
                                          );
                                          initializePlasmicStates(
                                            $state,
                                            [
                                              {
                                                name: "popoverCore[].open",
                                                initFunc: ({
                                                  $props,
                                                  $state,
                                                  $queries
                                                }) => undefined
                                              }
                                            ],
                                            [__plasmic_idx_0]
                                          );
                                          return (
                                            <Popover
                                              data-plasmic-name={"popoverCore"}
                                              data-plasmic-override={
                                                overrides.popoverCore
                                              }
                                              {...child$Props}
                                            >
                                              <Button
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.button__wikdx
                                                )}
                                                color={"softSand"}
                                                size={"compact"}
                                              >
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__xzTKb
                                                  )}
                                                >
                                                  {"View Statute"}
                                                </div>
                                              </Button>
                                            </Popover>
                                          );
                                        })()}
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.column__dzLtf
                                        )}
                                      >
                                        {(_par =>
                                          !_par
                                            ? []
                                            : Array.isArray(_par)
                                            ? _par
                                            : [_par])(
                                          (() => {
                                            try {
                                              return currentItem.serv_def_serv_lookup;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return [];
                                              }
                                              throw e;
                                            }
                                          })()
                                        ).map(
                                          (
                                            __plasmic_item_1,
                                            __plasmic_idx_1
                                          ) => {
                                            const currentItem =
                                              __plasmic_item_1;
                                            const currentIndex =
                                              __plasmic_idx_1;
                                            return (
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox__ynYrj
                                                )}
                                                key={currentIndex}
                                              >
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__d35Mb
                                                  )}
                                                >
                                                  <React.Fragment>
                                                    {(() => {
                                                      try {
                                                        return (
                                                          currentIndex +
                                                          1 +
                                                          ". " +
                                                          currentItem
                                                        );
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return "";
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                  </React.Fragment>
                                                </div>
                                              </div>
                                            );
                                          }
                                        )}
                                      </div>
                                    </div>
                                    <div
                                      data-plasmic-name={"servLicExemptions"}
                                      data-plasmic-override={
                                        overrides.servLicExemptions
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.servLicExemptions
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.column___6Srn5
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__bjhsJ
                                          )}
                                        >
                                          {
                                            "Who is exempt from licensure as a student loan servicer?"
                                          }
                                        </div>
                                        {(() => {
                                          const child$Props = {
                                            align: "center",
                                            className: classNames(
                                              "__wab_instance",
                                              sty.popoverCore5
                                            ),
                                            onOpenChange:
                                              generateStateOnChangeProp(
                                                $state,
                                                [
                                                  "popoverCore5",
                                                  __plasmic_idx_0,
                                                  "open"
                                                ]
                                              ),
                                            open: generateStateValueProp(
                                              $state,
                                              [
                                                "popoverCore5",
                                                __plasmic_idx_0,
                                                "open"
                                              ]
                                            ),
                                            overlay: (
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox__zkvLs
                                                )}
                                              >
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text___0GtCz
                                                  )}
                                                >
                                                  <React.Fragment>
                                                    {(() => {
                                                      try {
                                                        return currentItem.serv_exceptions;
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return "Here is the popover content.";
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                  </React.Fragment>
                                                </div>
                                                {(() => {
                                                  try {
                                                    return (
                                                      currentItem.servicing_law_link !=
                                                        null &&
                                                      currentItem
                                                        .servicing_law_link
                                                        .length != 0
                                                    );
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return true;
                                                    }
                                                    throw e;
                                                  }
                                                })() ? (
                                                  <PlasmicLink__
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.a,
                                                      projectcss.__wab_text,
                                                      sty.link__t2TWy
                                                    )}
                                                    component={Link}
                                                    href={(() => {
                                                      try {
                                                        return currentItem.servicing_law_link;
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return "https://www.plasmic.app/";
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                    platform={"gatsby"}
                                                    target={"_blank"}
                                                  >
                                                    {
                                                      "Open original statute in new tab"
                                                    }
                                                  </PlasmicLink__>
                                                ) : null}
                                              </div>
                                            ),
                                            side: "right",
                                            themeResetClass: classNames(
                                              projectcss.root_reset,
                                              projectcss.plasmic_default_styles,
                                              projectcss.plasmic_mixins,
                                              projectcss.plasmic_tokens,
                                              plasmic_antd_5_hostless_css.plasmic_tokens
                                            )
                                          };
                                          initializeCodeComponentStates(
                                            $state,
                                            [
                                              {
                                                name: "open",
                                                plasmicStateName:
                                                  "popoverCore5[].open"
                                              }
                                            ],
                                            [__plasmic_idx_0],
                                            undefined ?? {},
                                            child$Props
                                          );
                                          initializePlasmicStates(
                                            $state,
                                            [
                                              {
                                                name: "popoverCore5[].open",
                                                initFunc: ({
                                                  $props,
                                                  $state,
                                                  $queries
                                                }) => undefined
                                              }
                                            ],
                                            [__plasmic_idx_0]
                                          );
                                          return (
                                            <Popover
                                              data-plasmic-name={"popoverCore5"}
                                              data-plasmic-override={
                                                overrides.popoverCore5
                                              }
                                              {...child$Props}
                                            >
                                              <Button
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.button__eY68
                                                )}
                                                color={"softSand"}
                                                size={"compact"}
                                              >
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text___3U17J
                                                  )}
                                                >
                                                  {"View Statute"}
                                                </div>
                                              </Button>
                                            </Popover>
                                          );
                                        })()}
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.column__hd2GT
                                        )}
                                      >
                                        {(_par =>
                                          !_par
                                            ? []
                                            : Array.isArray(_par)
                                            ? _par
                                            : [_par])(
                                          (() => {
                                            try {
                                              return currentItem.serv_entity_exempt_list;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return [];
                                              }
                                              throw e;
                                            }
                                          })()
                                        ).map(
                                          (
                                            __plasmic_item_1,
                                            __plasmic_idx_1
                                          ) => {
                                            const currentItem =
                                              __plasmic_item_1;
                                            const currentIndex =
                                              __plasmic_idx_1;
                                            return (
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox__sZI8
                                                )}
                                                key={currentIndex}
                                              >
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text___5NclH
                                                  )}
                                                >
                                                  <React.Fragment>
                                                    {(() => {
                                                      try {
                                                        return (
                                                          currentIndex +
                                                          1 +
                                                          ". " +
                                                          currentItem
                                                        );
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return "";
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                  </React.Fragment>
                                                </div>
                                              </div>
                                            );
                                          }
                                        )}
                                      </div>
                                    </div>
                                  </AntdSingleCollapse>
                                );
                              })()
                            : null}
                          {(() => {
                            try {
                              return (
                                currentItem.required_license_types.indexOf(
                                  "Student Loan Creditor Registration"
                                ) != -1 &&
                                $state.licenseTypeFilterSelect.value.indexOf(
                                  "Student Loan Creditor Registration"
                                ) != -1
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })()
                            ? (() => {
                                const child$Props = {
                                  bordered: true,
                                  className: classNames(
                                    "__wab_instance",
                                    sty.creditorRegistrationCollapse
                                  ),
                                  label2: "Creditor Registration Details",
                                  onChange:
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "open",
                                      [
                                        "creditorRegistrationCollapse",
                                        __plasmic_idx_0,
                                        "open"
                                      ],
                                      AntdSingleCollapse_Helpers
                                    ),
                                  open: generateStateValueProp($state, [
                                    "creditorRegistrationCollapse",
                                    __plasmic_idx_0,
                                    "open"
                                  ]),
                                  showArrow: true
                                };
                                initializeCodeComponentStates(
                                  $state,
                                  [
                                    {
                                      name: "open",
                                      plasmicStateName:
                                        "creditorRegistrationCollapse[].open"
                                    }
                                  ],
                                  [__plasmic_idx_0],
                                  AntdSingleCollapse_Helpers ?? {},
                                  child$Props
                                );
                                initializePlasmicStates(
                                  $state,
                                  [
                                    {
                                      name: "creditorRegistrationCollapse[].open",
                                      initFunc: ({
                                        $props,
                                        $state,
                                        $queries
                                      }) => undefined
                                    }
                                  ],
                                  [__plasmic_idx_0]
                                );
                                return (
                                  <AntdSingleCollapse
                                    data-plasmic-name={
                                      "creditorRegistrationCollapse"
                                    }
                                    data-plasmic-override={
                                      overrides.creditorRegistrationCollapse
                                    }
                                    {...child$Props}
                                  >
                                    <div
                                      data-plasmic-name={"regTriggers"}
                                      data-plasmic-override={
                                        overrides.regTriggers
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.regTriggers
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.column__jhEmy
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__xCIuT
                                          )}
                                        >
                                          {
                                            "What triggers the obligation to register as a private student loan creditor?"
                                          }
                                        </div>
                                        {(() => {
                                          const child$Props = {
                                            align: "center",
                                            className: classNames(
                                              "__wab_instance",
                                              sty.popoverCore6
                                            ),
                                            onOpenChange:
                                              generateStateOnChangeProp(
                                                $state,
                                                [
                                                  "popoverCore6",
                                                  __plasmic_idx_0,
                                                  "open"
                                                ]
                                              ),
                                            open: generateStateValueProp(
                                              $state,
                                              [
                                                "popoverCore6",
                                                __plasmic_idx_0,
                                                "open"
                                              ]
                                            ),
                                            overlay: (
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox__ftRcb
                                                )}
                                              >
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__e60Gm
                                                  )}
                                                >
                                                  <React.Fragment>
                                                    {(() => {
                                                      try {
                                                        return currentItem.reg_triggers_text;
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return "Here is the popover content.";
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                  </React.Fragment>
                                                </div>
                                                {(() => {
                                                  try {
                                                    return (
                                                      currentItem.reg_law_link !=
                                                        null &&
                                                      currentItem.currentItem
                                                        .reg_law_link.length !=
                                                        0
                                                    );
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return true;
                                                    }
                                                    throw e;
                                                  }
                                                })() ? (
                                                  <PlasmicLink__
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.a,
                                                      projectcss.__wab_text,
                                                      sty.link___1K9Qd
                                                    )}
                                                    component={Link}
                                                    href={(() => {
                                                      try {
                                                        return currentItem.reg_law_link;
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return "https://www.plasmic.app/";
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                    platform={"gatsby"}
                                                    target={"_blank"}
                                                  >
                                                    {
                                                      "Open original statute in new tab"
                                                    }
                                                  </PlasmicLink__>
                                                ) : null}
                                              </div>
                                            ),
                                            side: "right",
                                            themeResetClass: classNames(
                                              projectcss.root_reset,
                                              projectcss.plasmic_default_styles,
                                              projectcss.plasmic_mixins,
                                              projectcss.plasmic_tokens,
                                              plasmic_antd_5_hostless_css.plasmic_tokens
                                            )
                                          };
                                          initializeCodeComponentStates(
                                            $state,
                                            [
                                              {
                                                name: "open",
                                                plasmicStateName:
                                                  "popoverCore6[].open"
                                              }
                                            ],
                                            [__plasmic_idx_0],
                                            undefined ?? {},
                                            child$Props
                                          );
                                          initializePlasmicStates(
                                            $state,
                                            [
                                              {
                                                name: "popoverCore6[].open",
                                                initFunc: ({
                                                  $props,
                                                  $state,
                                                  $queries
                                                }) => undefined
                                              }
                                            ],
                                            [__plasmic_idx_0]
                                          );
                                          return (
                                            <Popover
                                              data-plasmic-name={"popoverCore6"}
                                              data-plasmic-override={
                                                overrides.popoverCore6
                                              }
                                              {...child$Props}
                                            >
                                              <Button
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.button__k2Dsb
                                                )}
                                                color={"softSand"}
                                                size={"compact"}
                                              >
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__gapQu
                                                  )}
                                                >
                                                  {"View Statute"}
                                                </div>
                                              </Button>
                                            </Popover>
                                          );
                                        })()}
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.column__lCvYz
                                        )}
                                      >
                                        {(_par =>
                                          !_par
                                            ? []
                                            : Array.isArray(_par)
                                            ? _par
                                            : [_par])(
                                          (() => {
                                            try {
                                              return currentItem.reg_triggers_list;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return [];
                                              }
                                              throw e;
                                            }
                                          })()
                                        ).map(
                                          (
                                            __plasmic_item_1,
                                            __plasmic_idx_1
                                          ) => {
                                            const currentItem =
                                              __plasmic_item_1;
                                            const currentIndex =
                                              __plasmic_idx_1;
                                            return (
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox___6Fxto
                                                )}
                                                key={currentIndex}
                                              >
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__nEzaa
                                                  )}
                                                >
                                                  <React.Fragment>
                                                    {(() => {
                                                      try {
                                                        return (
                                                          currentIndex +
                                                          1 +
                                                          ". " +
                                                          currentItem
                                                        );
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return "";
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                  </React.Fragment>
                                                </div>
                                              </div>
                                            );
                                          }
                                        )}
                                      </div>
                                    </div>
                                    <div
                                      data-plasmic-name={"regDefCreditor"}
                                      data-plasmic-override={
                                        overrides.regDefCreditor
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.regDefCreditor
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.column__zeVkl
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__a4ZSp
                                          )}
                                        >
                                          {
                                            'Who is a "Creditor" that must register?'
                                          }
                                        </div>
                                        {(() => {
                                          const child$Props = {
                                            align: "center",
                                            className: classNames(
                                              "__wab_instance",
                                              sty.popoverCore7
                                            ),
                                            onOpenChange:
                                              generateStateOnChangeProp(
                                                $state,
                                                [
                                                  "popoverCore7",
                                                  __plasmic_idx_0,
                                                  "open"
                                                ]
                                              ),
                                            open: generateStateValueProp(
                                              $state,
                                              [
                                                "popoverCore7",
                                                __plasmic_idx_0,
                                                "open"
                                              ]
                                            ),
                                            overlay: (
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox___8Xy9G
                                                )}
                                              >
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__zVgdd
                                                  )}
                                                >
                                                  <React.Fragment>
                                                    {(() => {
                                                      try {
                                                        return currentItem.reg_creditor_def;
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return "Here is the popover content.";
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                  </React.Fragment>
                                                </div>
                                                <PlasmicLink__
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.a,
                                                    projectcss.__wab_text,
                                                    sty.link__tlRj8
                                                  )}
                                                  component={Link}
                                                  href={(() => {
                                                    try {
                                                      return currentItem.reg_law_link;
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return "https://www.plasmic.app/";
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                  platform={"gatsby"}
                                                  target={"_blank"}
                                                >
                                                  {
                                                    "Open original statute in new tab"
                                                  }
                                                </PlasmicLink__>
                                              </div>
                                            ),
                                            side: "right",
                                            themeResetClass: classNames(
                                              projectcss.root_reset,
                                              projectcss.plasmic_default_styles,
                                              projectcss.plasmic_mixins,
                                              projectcss.plasmic_tokens,
                                              plasmic_antd_5_hostless_css.plasmic_tokens
                                            )
                                          };
                                          initializeCodeComponentStates(
                                            $state,
                                            [
                                              {
                                                name: "open",
                                                plasmicStateName:
                                                  "popoverCore7[].open"
                                              }
                                            ],
                                            [__plasmic_idx_0],
                                            undefined ?? {},
                                            child$Props
                                          );
                                          initializePlasmicStates(
                                            $state,
                                            [
                                              {
                                                name: "popoverCore7[].open",
                                                initFunc: ({
                                                  $props,
                                                  $state,
                                                  $queries
                                                }) => undefined
                                              }
                                            ],
                                            [__plasmic_idx_0]
                                          );
                                          return (
                                            <Popover
                                              data-plasmic-name={"popoverCore7"}
                                              data-plasmic-override={
                                                overrides.popoverCore7
                                              }
                                              {...child$Props}
                                            >
                                              <Button
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.button__vcz2Q
                                                )}
                                                color={"softSand"}
                                                size={"compact"}
                                              >
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text___9HR6J
                                                  )}
                                                >
                                                  {"View Statute"}
                                                </div>
                                              </Button>
                                            </Popover>
                                          );
                                        })()}
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.column___8KilN
                                        )}
                                      >
                                        {(_par =>
                                          !_par
                                            ? []
                                            : Array.isArray(_par)
                                            ? _par
                                            : [_par])(
                                          (() => {
                                            try {
                                              return currentItem.reg_regulated_activities_list;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return [];
                                              }
                                              throw e;
                                            }
                                          })()
                                        ).map(
                                          (
                                            __plasmic_item_1,
                                            __plasmic_idx_1
                                          ) => {
                                            const currentItem =
                                              __plasmic_item_1;
                                            const currentIndex =
                                              __plasmic_idx_1;
                                            return (
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox__vJblU
                                                )}
                                                key={currentIndex}
                                              >
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__yKm3S
                                                  )}
                                                >
                                                  <React.Fragment>
                                                    {(() => {
                                                      try {
                                                        return (
                                                          currentIndex +
                                                          1 +
                                                          ". " +
                                                          currentItem
                                                        );
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return "";
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                  </React.Fragment>
                                                </div>
                                              </div>
                                            );
                                          }
                                        )}
                                      </div>
                                    </div>
                                    <div
                                      data-plasmic-name={"regDefStudentLoan"}
                                      data-plasmic-override={
                                        overrides.regDefStudentLoan
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.regDefStudentLoan
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.column__yelc
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__f181L
                                          )}
                                        >
                                          {
                                            'What is a "student loan" under the registration law?'
                                          }
                                        </div>
                                        {(() => {
                                          const child$Props = {
                                            align: "center",
                                            className: classNames(
                                              "__wab_instance",
                                              sty.popoverCore8
                                            ),
                                            onOpenChange:
                                              generateStateOnChangeProp(
                                                $state,
                                                [
                                                  "popoverCore8",
                                                  __plasmic_idx_0,
                                                  "open"
                                                ]
                                              ),
                                            open: generateStateValueProp(
                                              $state,
                                              [
                                                "popoverCore8",
                                                __plasmic_idx_0,
                                                "open"
                                              ]
                                            ),
                                            overlay: (
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox__qkYlx
                                                )}
                                              >
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text___88DiD
                                                  )}
                                                >
                                                  <React.Fragment>
                                                    {(() => {
                                                      try {
                                                        return currentItem.reg_defin_studentloan_text;
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return "Here is the popover content.";
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                  </React.Fragment>
                                                </div>
                                                <PlasmicLink__
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.a,
                                                    projectcss.__wab_text,
                                                    sty.link__iT5
                                                  )}
                                                  component={Link}
                                                  href={(() => {
                                                    try {
                                                      return currentItem.reg_law_link;
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return "https://www.plasmic.app/";
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                  platform={"gatsby"}
                                                  target={"_blank"}
                                                >
                                                  {
                                                    "Open original statute in new tab"
                                                  }
                                                </PlasmicLink__>
                                              </div>
                                            ),
                                            side: "right",
                                            themeResetClass: classNames(
                                              projectcss.root_reset,
                                              projectcss.plasmic_default_styles,
                                              projectcss.plasmic_mixins,
                                              projectcss.plasmic_tokens,
                                              plasmic_antd_5_hostless_css.plasmic_tokens
                                            )
                                          };
                                          initializeCodeComponentStates(
                                            $state,
                                            [
                                              {
                                                name: "open",
                                                plasmicStateName:
                                                  "popoverCore8[].open"
                                              }
                                            ],
                                            [__plasmic_idx_0],
                                            undefined ?? {},
                                            child$Props
                                          );
                                          initializePlasmicStates(
                                            $state,
                                            [
                                              {
                                                name: "popoverCore8[].open",
                                                initFunc: ({
                                                  $props,
                                                  $state,
                                                  $queries
                                                }) => undefined
                                              }
                                            ],
                                            [__plasmic_idx_0]
                                          );
                                          return (
                                            <Popover
                                              data-plasmic-name={"popoverCore8"}
                                              data-plasmic-override={
                                                overrides.popoverCore8
                                              }
                                              {...child$Props}
                                            >
                                              <Button
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.button___9392O
                                                )}
                                                color={"softSand"}
                                                size={"compact"}
                                              >
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__rl2Os
                                                  )}
                                                >
                                                  {"View Statute"}
                                                </div>
                                              </Button>
                                            </Popover>
                                          );
                                        })()}
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.column__elWnk
                                        )}
                                      >
                                        {(_par =>
                                          !_par
                                            ? []
                                            : Array.isArray(_par)
                                            ? _par
                                            : [_par])(
                                          (() => {
                                            try {
                                              return currentItem.reg_def_student_loan_lookup;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return [];
                                              }
                                              throw e;
                                            }
                                          })()
                                        ).map(
                                          (
                                            __plasmic_item_1,
                                            __plasmic_idx_1
                                          ) => {
                                            const currentItem =
                                              __plasmic_item_1;
                                            const currentIndex =
                                              __plasmic_idx_1;
                                            return (
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox__yANgb
                                                )}
                                                key={currentIndex}
                                              >
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__n5Ael
                                                  )}
                                                >
                                                  <React.Fragment>
                                                    {(() => {
                                                      try {
                                                        return (
                                                          currentIndex +
                                                          1 +
                                                          ". " +
                                                          currentItem
                                                        );
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return "";
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                  </React.Fragment>
                                                </div>
                                              </div>
                                            );
                                          }
                                        )}
                                      </div>
                                    </div>
                                    <div
                                      data-plasmic-name={"regNotStudentLoan"}
                                      data-plasmic-override={
                                        overrides.regNotStudentLoan
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.regNotStudentLoan
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.column__orcNd
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__aygPp
                                          )}
                                        >
                                          {
                                            'What is not a "student loan" under the registration law?'
                                          }
                                        </div>
                                        {(() => {
                                          const child$Props = {
                                            align: "center",
                                            className: classNames(
                                              "__wab_instance",
                                              sty.popoverCore9
                                            ),
                                            onOpenChange:
                                              generateStateOnChangeProp(
                                                $state,
                                                [
                                                  "popoverCore9",
                                                  __plasmic_idx_0,
                                                  "open"
                                                ]
                                              ),
                                            open: generateStateValueProp(
                                              $state,
                                              [
                                                "popoverCore9",
                                                __plasmic_idx_0,
                                                "open"
                                              ]
                                            ),
                                            overlay: (
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox__ajh88
                                                )}
                                              >
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text___8A9Ak
                                                  )}
                                                >
                                                  <React.Fragment>
                                                    {(() => {
                                                      try {
                                                        return currentItem.reg_prod_features_exceptions_text;
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return "Here is the popover content.";
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                  </React.Fragment>
                                                </div>
                                                <PlasmicLink__
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.a,
                                                    projectcss.__wab_text,
                                                    sty.link__ieX95
                                                  )}
                                                  component={Link}
                                                  href={(() => {
                                                    try {
                                                      return currentItem.reg_law_link;
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return "https://www.plasmic.app/";
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                  platform={"gatsby"}
                                                  target={"_blank"}
                                                >
                                                  {
                                                    "Open original statute in new tab"
                                                  }
                                                </PlasmicLink__>
                                              </div>
                                            ),
                                            side: "right",
                                            themeResetClass: classNames(
                                              projectcss.root_reset,
                                              projectcss.plasmic_default_styles,
                                              projectcss.plasmic_mixins,
                                              projectcss.plasmic_tokens,
                                              plasmic_antd_5_hostless_css.plasmic_tokens
                                            )
                                          };
                                          initializeCodeComponentStates(
                                            $state,
                                            [
                                              {
                                                name: "open",
                                                plasmicStateName:
                                                  "popoverCore9[].open"
                                              }
                                            ],
                                            [__plasmic_idx_0],
                                            undefined ?? {},
                                            child$Props
                                          );
                                          initializePlasmicStates(
                                            $state,
                                            [
                                              {
                                                name: "popoverCore9[].open",
                                                initFunc: ({
                                                  $props,
                                                  $state,
                                                  $queries
                                                }) => undefined
                                              }
                                            ],
                                            [__plasmic_idx_0]
                                          );
                                          return (
                                            <Popover
                                              data-plasmic-name={"popoverCore9"}
                                              data-plasmic-override={
                                                overrides.popoverCore9
                                              }
                                              {...child$Props}
                                            >
                                              <Button
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.button__wf06H
                                                )}
                                                color={"softSand"}
                                                size={"compact"}
                                              >
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__tEPkZ
                                                  )}
                                                >
                                                  {"View Statute"}
                                                </div>
                                              </Button>
                                            </Popover>
                                          );
                                        })()}
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.column__uk2E8
                                        )}
                                      >
                                        {(_par =>
                                          !_par
                                            ? []
                                            : Array.isArray(_par)
                                            ? _par
                                            : [_par])(
                                          (() => {
                                            try {
                                              return currentItem.reg_exempt_prod_features_list;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return [];
                                              }
                                              throw e;
                                            }
                                          })()
                                        ).map(
                                          (
                                            __plasmic_item_1,
                                            __plasmic_idx_1
                                          ) => {
                                            const currentItem =
                                              __plasmic_item_1;
                                            const currentIndex =
                                              __plasmic_idx_1;
                                            return (
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox__dAghj
                                                )}
                                                key={currentIndex}
                                              >
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__ouJkW
                                                  )}
                                                >
                                                  <React.Fragment>
                                                    {(() => {
                                                      try {
                                                        return (
                                                          currentIndex +
                                                          1 +
                                                          ". " +
                                                          currentItem
                                                        );
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return "";
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                  </React.Fragment>
                                                </div>
                                              </div>
                                            );
                                          }
                                        )}
                                      </div>
                                    </div>
                                    <div
                                      data-plasmic-name={"regExemptEntities"}
                                      data-plasmic-override={
                                        overrides.regExemptEntities
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.regExemptEntities
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.column__uqoCm
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__bzCbZ
                                          )}
                                        >
                                          {
                                            "What entities are exempt from registration requirements?"
                                          }
                                        </div>
                                        {(() => {
                                          const child$Props = {
                                            align: "center",
                                            className: classNames(
                                              "__wab_instance",
                                              sty.popoverCore10
                                            ),
                                            onOpenChange:
                                              generateStateOnChangeProp(
                                                $state,
                                                [
                                                  "popoverCore10",
                                                  __plasmic_idx_0,
                                                  "open"
                                                ]
                                              ),
                                            open: generateStateValueProp(
                                              $state,
                                              [
                                                "popoverCore10",
                                                __plasmic_idx_0,
                                                "open"
                                              ]
                                            ),
                                            overlay: (
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox___7NSY
                                                )}
                                              >
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__byfRm
                                                  )}
                                                >
                                                  <React.Fragment>
                                                    {(() => {
                                                      try {
                                                        return currentItem.reg_exempt_entities;
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return "Here is the popover content.";
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                  </React.Fragment>
                                                </div>
                                                <PlasmicLink__
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.a,
                                                    projectcss.__wab_text,
                                                    sty.link__pOnFq
                                                  )}
                                                  component={Link}
                                                  href={(() => {
                                                    try {
                                                      return currentItem.reg_law_link;
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return "https://www.plasmic.app/";
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                  platform={"gatsby"}
                                                  target={"_blank"}
                                                >
                                                  {
                                                    "Open original statute in new tab"
                                                  }
                                                </PlasmicLink__>
                                              </div>
                                            ),
                                            side: "right",
                                            themeResetClass: classNames(
                                              projectcss.root_reset,
                                              projectcss.plasmic_default_styles,
                                              projectcss.plasmic_mixins,
                                              projectcss.plasmic_tokens,
                                              plasmic_antd_5_hostless_css.plasmic_tokens
                                            )
                                          };
                                          initializeCodeComponentStates(
                                            $state,
                                            [
                                              {
                                                name: "open",
                                                plasmicStateName:
                                                  "popoverCore10[].open"
                                              }
                                            ],
                                            [__plasmic_idx_0],
                                            undefined ?? {},
                                            child$Props
                                          );
                                          initializePlasmicStates(
                                            $state,
                                            [
                                              {
                                                name: "popoverCore10[].open",
                                                initFunc: ({
                                                  $props,
                                                  $state,
                                                  $queries
                                                }) => undefined
                                              }
                                            ],
                                            [__plasmic_idx_0]
                                          );
                                          return (
                                            <Popover
                                              data-plasmic-name={
                                                "popoverCore10"
                                              }
                                              data-plasmic-override={
                                                overrides.popoverCore10
                                              }
                                              {...child$Props}
                                            >
                                              <Button
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.button__b79Z9
                                                )}
                                                color={"softSand"}
                                                size={"compact"}
                                              >
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__lquCs
                                                  )}
                                                >
                                                  {"View Statute"}
                                                </div>
                                              </Button>
                                            </Popover>
                                          );
                                        })()}
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.column__uvTp7
                                        )}
                                      >
                                        {(_par =>
                                          !_par
                                            ? []
                                            : Array.isArray(_par)
                                            ? _par
                                            : [_par])(
                                          (() => {
                                            try {
                                              return currentItem.reg_exempt_entity_list;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return [];
                                              }
                                              throw e;
                                            }
                                          })()
                                        ).map(
                                          (
                                            __plasmic_item_1,
                                            __plasmic_idx_1
                                          ) => {
                                            const currentItem =
                                              __plasmic_item_1;
                                            const currentIndex =
                                              __plasmic_idx_1;
                                            return (
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox__m5JK4
                                                )}
                                                key={currentIndex}
                                              >
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__biVxr
                                                  )}
                                                >
                                                  <React.Fragment>
                                                    {(() => {
                                                      try {
                                                        return (
                                                          currentIndex +
                                                          1 +
                                                          ". " +
                                                          currentItem
                                                        );
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return "";
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                  </React.Fragment>
                                                </div>
                                              </div>
                                            );
                                          }
                                        )}
                                      </div>
                                    </div>
                                  </AntdSingleCollapse>
                                );
                              })()
                            : null}
                          {(() => {
                            try {
                              return (
                                currentItem.required_license_types.indexOf(
                                  "Student Loan Servicer Notification"
                                ) != -1 &&
                                $state.licenseTypeFilterSelect.value.indexOf(
                                  "Student Loan Servicer Notification"
                                ) != -1
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })()
                            ? (() => {
                                const child$Props = {
                                  bordered: true,
                                  className: classNames(
                                    "__wab_instance",
                                    sty.servicerNotificationCollapse
                                  ),
                                  label2: "Servicing Notification Details",
                                  onChange:
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "open",
                                      [
                                        "servicerNotificationCollapse",
                                        __plasmic_idx_0,
                                        "open"
                                      ],
                                      AntdSingleCollapse_Helpers
                                    ),
                                  open: generateStateValueProp($state, [
                                    "servicerNotificationCollapse",
                                    __plasmic_idx_0,
                                    "open"
                                  ]),
                                  showArrow: true
                                };
                                initializeCodeComponentStates(
                                  $state,
                                  [
                                    {
                                      name: "open",
                                      plasmicStateName:
                                        "servicerNotificationCollapse[].open"
                                    }
                                  ],
                                  [__plasmic_idx_0],
                                  AntdSingleCollapse_Helpers ?? {},
                                  child$Props
                                );
                                initializePlasmicStates(
                                  $state,
                                  [
                                    {
                                      name: "servicerNotificationCollapse[].open",
                                      initFunc: ({
                                        $props,
                                        $state,
                                        $queries
                                      }) => undefined
                                    }
                                  ],
                                  [__plasmic_idx_0]
                                );
                                return (
                                  <AntdSingleCollapse
                                    data-plasmic-name={
                                      "servicerNotificationCollapse"
                                    }
                                    data-plasmic-override={
                                      overrides.servicerNotificationCollapse
                                    }
                                    {...child$Props}
                                  >
                                    <div
                                      data-plasmic-name={"notTriggers2"}
                                      data-plasmic-override={
                                        overrides.notTriggers2
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.notTriggers2
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.column___6QSe
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text___6V90Q
                                          )}
                                        >
                                          {
                                            "What triggers the requirement to file a student loan servicing notification?"
                                          }
                                        </div>
                                        {(() => {
                                          const child$Props = {
                                            align: "center",
                                            className: classNames(
                                              "__wab_instance",
                                              sty.popoverCore11
                                            ),
                                            onOpenChange:
                                              generateStateOnChangeProp(
                                                $state,
                                                [
                                                  "popoverCore11",
                                                  __plasmic_idx_0,
                                                  "open"
                                                ]
                                              ),
                                            open: generateStateValueProp(
                                              $state,
                                              [
                                                "popoverCore11",
                                                __plasmic_idx_0,
                                                "open"
                                              ]
                                            ),
                                            overlay: (
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox__dLaA
                                                )}
                                              >
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__idFp1
                                                  )}
                                                >
                                                  <React.Fragment>
                                                    {(() => {
                                                      try {
                                                        return currentItem.not_triggers_text;
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return "Here is the popover content.";
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                  </React.Fragment>
                                                </div>
                                                {(() => {
                                                  try {
                                                    return (
                                                      currentItem.reg_law_link
                                                        .length > 0
                                                    );
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return true;
                                                    }
                                                    throw e;
                                                  }
                                                })() ? (
                                                  <PlasmicLink__
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.a,
                                                      projectcss.__wab_text,
                                                      sty.link___0E1UZ
                                                    )}
                                                    component={Link}
                                                    href={(() => {
                                                      try {
                                                        return currentItem.reg_law_link;
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return "https://www.plasmic.app/";
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                    platform={"gatsby"}
                                                    target={"_blank"}
                                                  >
                                                    {
                                                      "Open original statute in new tab"
                                                    }
                                                  </PlasmicLink__>
                                                ) : null}
                                              </div>
                                            ),
                                            side: "right",
                                            themeResetClass: classNames(
                                              projectcss.root_reset,
                                              projectcss.plasmic_default_styles,
                                              projectcss.plasmic_mixins,
                                              projectcss.plasmic_tokens,
                                              plasmic_antd_5_hostless_css.plasmic_tokens
                                            )
                                          };
                                          initializeCodeComponentStates(
                                            $state,
                                            [
                                              {
                                                name: "open",
                                                plasmicStateName:
                                                  "popoverCore11[].open"
                                              }
                                            ],
                                            [__plasmic_idx_0],
                                            undefined ?? {},
                                            child$Props
                                          );
                                          initializePlasmicStates(
                                            $state,
                                            [
                                              {
                                                name: "popoverCore11[].open",
                                                initFunc: ({
                                                  $props,
                                                  $state,
                                                  $queries
                                                }) => undefined
                                              }
                                            ],
                                            [__plasmic_idx_0]
                                          );
                                          return (
                                            <Popover
                                              data-plasmic-name={
                                                "popoverCore11"
                                              }
                                              data-plasmic-override={
                                                overrides.popoverCore11
                                              }
                                              {...child$Props}
                                            >
                                              <Button
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.button__g7Pp
                                                )}
                                                color={"softSand"}
                                                size={"compact"}
                                              >
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__kJmN
                                                  )}
                                                >
                                                  {"View Statute"}
                                                </div>
                                              </Button>
                                            </Popover>
                                          );
                                        })()}
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.column__ybe5B
                                        )}
                                      >
                                        {(_par =>
                                          !_par
                                            ? []
                                            : Array.isArray(_par)
                                            ? _par
                                            : [_par])(
                                          (() => {
                                            try {
                                              return currentItem.not_triggers_list;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return [];
                                              }
                                              throw e;
                                            }
                                          })()
                                        ).map(
                                          (
                                            __plasmic_item_1,
                                            __plasmic_idx_1
                                          ) => {
                                            const currentItem =
                                              __plasmic_item_1;
                                            const currentIndex =
                                              __plasmic_idx_1;
                                            return (
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox__rkjma
                                                )}
                                                key={currentIndex}
                                              >
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__n4Epf
                                                  )}
                                                >
                                                  <React.Fragment>
                                                    {(() => {
                                                      try {
                                                        return (
                                                          currentIndex +
                                                          1 +
                                                          ". " +
                                                          currentItem
                                                        );
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return "";
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                  </React.Fragment>
                                                </div>
                                              </div>
                                            );
                                          }
                                        )}
                                      </div>
                                    </div>
                                    <div
                                      data-plasmic-name={"notDefServ"}
                                      data-plasmic-override={
                                        overrides.notDefServ
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.notDefServ
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.column__yJg22
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__jKik3
                                          )}
                                        >
                                          {'How is "servicing" defined?'}
                                        </div>
                                        {(() => {
                                          const child$Props = {
                                            align: "center",
                                            className: classNames(
                                              "__wab_instance",
                                              sty.popoverCore12
                                            ),
                                            onOpenChange:
                                              generateStateOnChangeProp(
                                                $state,
                                                [
                                                  "popoverCore12",
                                                  __plasmic_idx_0,
                                                  "open"
                                                ]
                                              ),
                                            open: generateStateValueProp(
                                              $state,
                                              [
                                                "popoverCore12",
                                                __plasmic_idx_0,
                                                "open"
                                              ]
                                            ),
                                            overlay: (
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox__tZqQ
                                                )}
                                              >
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__kYVej
                                                  )}
                                                >
                                                  <React.Fragment>
                                                    {(() => {
                                                      try {
                                                        return currentItem.notification_def_servicing_text;
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return "Here is the popover content.";
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                  </React.Fragment>
                                                </div>
                                                {(() => {
                                                  try {
                                                    return (
                                                      currentItem.reg_law_link
                                                        .length > 0
                                                    );
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return true;
                                                    }
                                                    throw e;
                                                  }
                                                })() ? (
                                                  <PlasmicLink__
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.a,
                                                      projectcss.__wab_text,
                                                      sty.link__oftkf
                                                    )}
                                                    component={Link}
                                                    href={(() => {
                                                      try {
                                                        return currentItem.reg_law_link;
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return "https://www.plasmic.app/";
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                    platform={"gatsby"}
                                                    target={"_blank"}
                                                  >
                                                    {
                                                      "Open original statute in new tab"
                                                    }
                                                  </PlasmicLink__>
                                                ) : null}
                                              </div>
                                            ),
                                            side: "right",
                                            themeResetClass: classNames(
                                              projectcss.root_reset,
                                              projectcss.plasmic_default_styles,
                                              projectcss.plasmic_mixins,
                                              projectcss.plasmic_tokens,
                                              plasmic_antd_5_hostless_css.plasmic_tokens
                                            )
                                          };
                                          initializeCodeComponentStates(
                                            $state,
                                            [
                                              {
                                                name: "open",
                                                plasmicStateName:
                                                  "popoverCore12[].open"
                                              }
                                            ],
                                            [__plasmic_idx_0],
                                            undefined ?? {},
                                            child$Props
                                          );
                                          initializePlasmicStates(
                                            $state,
                                            [
                                              {
                                                name: "popoverCore12[].open",
                                                initFunc: ({
                                                  $props,
                                                  $state,
                                                  $queries
                                                }) => undefined
                                              }
                                            ],
                                            [__plasmic_idx_0]
                                          );
                                          return (
                                            <Popover
                                              data-plasmic-name={
                                                "popoverCore12"
                                              }
                                              data-plasmic-override={
                                                overrides.popoverCore12
                                              }
                                              {...child$Props}
                                            >
                                              <Button
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.button__zaDli
                                                )}
                                                color={"softSand"}
                                                size={"compact"}
                                              >
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__alUml
                                                  )}
                                                >
                                                  {"View Statute"}
                                                </div>
                                              </Button>
                                            </Popover>
                                          );
                                        })()}
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.column__xwEcG
                                        )}
                                      >
                                        {(_par =>
                                          !_par
                                            ? []
                                            : Array.isArray(_par)
                                            ? _par
                                            : [_par])(
                                          (() => {
                                            try {
                                              return currentItem.not_def_servicing_list;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return [];
                                              }
                                              throw e;
                                            }
                                          })()
                                        ).map(
                                          (
                                            __plasmic_item_1,
                                            __plasmic_idx_1
                                          ) => {
                                            const currentItem =
                                              __plasmic_item_1;
                                            const currentIndex =
                                              __plasmic_idx_1;
                                            return (
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox__wl032
                                                )}
                                                key={currentIndex}
                                              >
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__xQaTi
                                                  )}
                                                >
                                                  <React.Fragment>
                                                    {(() => {
                                                      try {
                                                        return (
                                                          currentIndex +
                                                          1 +
                                                          ". " +
                                                          currentItem
                                                        );
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return "";
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                  </React.Fragment>
                                                </div>
                                              </div>
                                            );
                                          }
                                        )}
                                      </div>
                                    </div>
                                    <div
                                      data-plasmic-name={"notDefServ2"}
                                      data-plasmic-override={
                                        overrides.notDefServ2
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.notDefServ2
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.column__wzDk
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__qe7IU
                                          )}
                                        >
                                          {
                                            'What is a "student loan" for notification purposes?'
                                          }
                                        </div>
                                        {(() => {
                                          const child$Props = {
                                            align: "center",
                                            className: classNames(
                                              "__wab_instance",
                                              sty.popoverCore13
                                            ),
                                            onOpenChange:
                                              generateStateOnChangeProp(
                                                $state,
                                                [
                                                  "popoverCore13",
                                                  __plasmic_idx_0,
                                                  "open"
                                                ]
                                              ),
                                            open: generateStateValueProp(
                                              $state,
                                              [
                                                "popoverCore13",
                                                __plasmic_idx_0,
                                                "open"
                                              ]
                                            ),
                                            overlay: (
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox__bGtha
                                                )}
                                              >
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text___1MKpY
                                                  )}
                                                >
                                                  <React.Fragment>
                                                    {(() => {
                                                      try {
                                                        return currentItem.not_def_student_loan_text;
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return "Here is the popover content.";
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                  </React.Fragment>
                                                </div>
                                                {(() => {
                                                  try {
                                                    return (
                                                      currentItem.reg_law_link
                                                        .length > 0
                                                    );
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return true;
                                                    }
                                                    throw e;
                                                  }
                                                })() ? (
                                                  <PlasmicLink__
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.a,
                                                      projectcss.__wab_text,
                                                      sty.link__xlPFd
                                                    )}
                                                    component={Link}
                                                    href={(() => {
                                                      try {
                                                        return currentItem.reg_law_link;
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return "https://www.plasmic.app/";
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                    platform={"gatsby"}
                                                    target={"_blank"}
                                                  >
                                                    {
                                                      "Open original statute in new tab"
                                                    }
                                                  </PlasmicLink__>
                                                ) : null}
                                              </div>
                                            ),
                                            side: "right",
                                            themeResetClass: classNames(
                                              projectcss.root_reset,
                                              projectcss.plasmic_default_styles,
                                              projectcss.plasmic_mixins,
                                              projectcss.plasmic_tokens,
                                              plasmic_antd_5_hostless_css.plasmic_tokens
                                            )
                                          };
                                          initializeCodeComponentStates(
                                            $state,
                                            [
                                              {
                                                name: "open",
                                                plasmicStateName:
                                                  "popoverCore13[].open"
                                              }
                                            ],
                                            [__plasmic_idx_0],
                                            undefined ?? {},
                                            child$Props
                                          );
                                          initializePlasmicStates(
                                            $state,
                                            [
                                              {
                                                name: "popoverCore13[].open",
                                                initFunc: ({
                                                  $props,
                                                  $state,
                                                  $queries
                                                }) => undefined
                                              }
                                            ],
                                            [__plasmic_idx_0]
                                          );
                                          return (
                                            <Popover
                                              data-plasmic-name={
                                                "popoverCore13"
                                              }
                                              data-plasmic-override={
                                                overrides.popoverCore13
                                              }
                                              {...child$Props}
                                            >
                                              <Button
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.button__wpGGr
                                                )}
                                                color={"softSand"}
                                                size={"compact"}
                                              >
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text___6Je4D
                                                  )}
                                                >
                                                  {"View Statute"}
                                                </div>
                                              </Button>
                                            </Popover>
                                          );
                                        })()}
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.column___5WHW
                                        )}
                                      >
                                        {(_par =>
                                          !_par
                                            ? []
                                            : Array.isArray(_par)
                                            ? _par
                                            : [_par])(
                                          (() => {
                                            try {
                                              return currentItem.not_def_student_loan_lookup;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return [];
                                              }
                                              throw e;
                                            }
                                          })()
                                        ).map(
                                          (
                                            __plasmic_item_1,
                                            __plasmic_idx_1
                                          ) => {
                                            const currentItem =
                                              __plasmic_item_1;
                                            const currentIndex =
                                              __plasmic_idx_1;
                                            return (
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox__fjCoy
                                                )}
                                                key={currentIndex}
                                              >
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__uByb0
                                                  )}
                                                >
                                                  <React.Fragment>
                                                    {(() => {
                                                      try {
                                                        return (
                                                          currentIndex +
                                                          1 +
                                                          ". " +
                                                          currentItem
                                                        );
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return "";
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                  </React.Fragment>
                                                </div>
                                              </div>
                                            );
                                          }
                                        )}
                                      </div>
                                    </div>
                                  </AntdSingleCollapse>
                                );
                              })()
                            : null}
                          {(() => {
                            try {
                              return (
                                !currentItem.required_license_types.length > 0
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__ipAlC
                              )}
                            >
                              {"No required licenses"}
                            </div>
                          ) : null}
                        </AntdAccordionItem>
                      );
                    }),
                    onChange: generateStateOnChangePropForCodeComponents(
                      $state,
                      "activePanelId",
                      ["stateDetailsAccordion", "activePanelId"],
                      AntdAccordion_Helpers
                    ),
                    size: "small"
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "activePanelId",
                        plasmicStateName: "stateDetailsAccordion.activePanelId"
                      }
                    ],
                    [],
                    AntdAccordion_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <AntdAccordion
                      data-plasmic-name={"stateDetailsAccordion"}
                      data-plasmic-override={overrides.stateDetailsAccordion}
                      {...child$Props}
                    />
                  );
                })()}
                <section
                  className={classNames(projectcss.all, sty.section__j41O3)}
                >
                  <Footer
                    data-plasmic-name={"footer"}
                    data-plasmic-override={overrides.footer}
                    className={classNames("__wab_instance", sty.footer)}
                  />

                  <UntitledsvgIcon
                    data-plasmic-name={"faviconsvg"}
                    data-plasmic-override={overrides.faviconsvg}
                    className={classNames(projectcss.all, sty.faviconsvg)}
                    role={"img"}
                  />
                </section>
              </section>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "img",
    "popover",
    "filters",
    "accordion",
    "stateFilterAccordion",
    "stateNameFilterSelect",
    "licenseTypeFilterAccordion",
    "licenseTypeFilterSelect",
    "licenseTypeFilterSelectedOption",
    "licenseTypeFilterSelectedText",
    "activityTypeFilterAccordion",
    "activityTypeSelect",
    "licenseTriggerFilterAccordion",
    "licenseTriggerFilterSelect",
    "productExcludedFeatureFilterAccordion2",
    "prodExcludedFeatureSelect",
    "licensureExemptEntitiesAccordion",
    "servExemptEntitiesFilterSelect",
    "headerSection",
    "dataSection",
    "stateDetailsAccordion",
    "accordionItem",
    "servicingDetailsCollapse",
    "servLicTriggers",
    "popoverCore4",
    "servDefStudentLoan2",
    "popoverCore2",
    "servDefStudentLoanExceptions",
    "popoverCore3",
    "servDefStudentLoan",
    "popoverCore",
    "servLicExemptions",
    "popoverCore5",
    "creditorRegistrationCollapse",
    "regTriggers",
    "popoverCore6",
    "regDefCreditor",
    "popoverCore7",
    "regDefStudentLoan",
    "popoverCore8",
    "regNotStudentLoan",
    "popoverCore9",
    "regExemptEntities",
    "popoverCore10",
    "servicerNotificationCollapse",
    "notTriggers2",
    "popoverCore11",
    "notDefServ",
    "popoverCore12",
    "notDefServ2",
    "popoverCore13",
    "footer",
    "faviconsvg"
  ],
  img: ["img"],
  popover: ["popover"],
  filters: [
    "filters",
    "accordion",
    "stateFilterAccordion",
    "stateNameFilterSelect",
    "licenseTypeFilterAccordion",
    "licenseTypeFilterSelect",
    "licenseTypeFilterSelectedOption",
    "licenseTypeFilterSelectedText",
    "activityTypeFilterAccordion",
    "activityTypeSelect",
    "licenseTriggerFilterAccordion",
    "licenseTriggerFilterSelect",
    "productExcludedFeatureFilterAccordion2",
    "prodExcludedFeatureSelect",
    "licensureExemptEntitiesAccordion",
    "servExemptEntitiesFilterSelect"
  ],
  accordion: [
    "accordion",
    "stateFilterAccordion",
    "stateNameFilterSelect",
    "licenseTypeFilterAccordion",
    "licenseTypeFilterSelect",
    "licenseTypeFilterSelectedOption",
    "licenseTypeFilterSelectedText",
    "activityTypeFilterAccordion",
    "activityTypeSelect",
    "licenseTriggerFilterAccordion",
    "licenseTriggerFilterSelect",
    "productExcludedFeatureFilterAccordion2",
    "prodExcludedFeatureSelect",
    "licensureExemptEntitiesAccordion",
    "servExemptEntitiesFilterSelect"
  ],
  stateFilterAccordion: ["stateFilterAccordion", "stateNameFilterSelect"],
  stateNameFilterSelect: ["stateNameFilterSelect"],
  licenseTypeFilterAccordion: [
    "licenseTypeFilterAccordion",
    "licenseTypeFilterSelect",
    "licenseTypeFilterSelectedOption",
    "licenseTypeFilterSelectedText"
  ],
  licenseTypeFilterSelect: [
    "licenseTypeFilterSelect",
    "licenseTypeFilterSelectedOption",
    "licenseTypeFilterSelectedText"
  ],
  licenseTypeFilterSelectedOption: [
    "licenseTypeFilterSelectedOption",
    "licenseTypeFilterSelectedText"
  ],
  licenseTypeFilterSelectedText: ["licenseTypeFilterSelectedText"],
  activityTypeFilterAccordion: [
    "activityTypeFilterAccordion",
    "activityTypeSelect"
  ],
  activityTypeSelect: ["activityTypeSelect"],
  licenseTriggerFilterAccordion: [
    "licenseTriggerFilterAccordion",
    "licenseTriggerFilterSelect"
  ],
  licenseTriggerFilterSelect: ["licenseTriggerFilterSelect"],
  productExcludedFeatureFilterAccordion2: [
    "productExcludedFeatureFilterAccordion2",
    "prodExcludedFeatureSelect"
  ],
  prodExcludedFeatureSelect: ["prodExcludedFeatureSelect"],
  licensureExemptEntitiesAccordion: [
    "licensureExemptEntitiesAccordion",
    "servExemptEntitiesFilterSelect"
  ],
  servExemptEntitiesFilterSelect: ["servExemptEntitiesFilterSelect"],
  headerSection: ["headerSection"],
  dataSection: [
    "dataSection",
    "stateDetailsAccordion",
    "accordionItem",
    "servicingDetailsCollapse",
    "servLicTriggers",
    "popoverCore4",
    "servDefStudentLoan2",
    "popoverCore2",
    "servDefStudentLoanExceptions",
    "popoverCore3",
    "servDefStudentLoan",
    "popoverCore",
    "servLicExemptions",
    "popoverCore5",
    "creditorRegistrationCollapse",
    "regTriggers",
    "popoverCore6",
    "regDefCreditor",
    "popoverCore7",
    "regDefStudentLoan",
    "popoverCore8",
    "regNotStudentLoan",
    "popoverCore9",
    "regExemptEntities",
    "popoverCore10",
    "servicerNotificationCollapse",
    "notTriggers2",
    "popoverCore11",
    "notDefServ",
    "popoverCore12",
    "notDefServ2",
    "popoverCore13",
    "footer",
    "faviconsvg"
  ],
  stateDetailsAccordion: [
    "stateDetailsAccordion",
    "accordionItem",
    "servicingDetailsCollapse",
    "servLicTriggers",
    "popoverCore4",
    "servDefStudentLoan2",
    "popoverCore2",
    "servDefStudentLoanExceptions",
    "popoverCore3",
    "servDefStudentLoan",
    "popoverCore",
    "servLicExemptions",
    "popoverCore5",
    "creditorRegistrationCollapse",
    "regTriggers",
    "popoverCore6",
    "regDefCreditor",
    "popoverCore7",
    "regDefStudentLoan",
    "popoverCore8",
    "regNotStudentLoan",
    "popoverCore9",
    "regExemptEntities",
    "popoverCore10",
    "servicerNotificationCollapse",
    "notTriggers2",
    "popoverCore11",
    "notDefServ",
    "popoverCore12",
    "notDefServ2",
    "popoverCore13"
  ],
  accordionItem: [
    "accordionItem",
    "servicingDetailsCollapse",
    "servLicTriggers",
    "popoverCore4",
    "servDefStudentLoan2",
    "popoverCore2",
    "servDefStudentLoanExceptions",
    "popoverCore3",
    "servDefStudentLoan",
    "popoverCore",
    "servLicExemptions",
    "popoverCore5",
    "creditorRegistrationCollapse",
    "regTriggers",
    "popoverCore6",
    "regDefCreditor",
    "popoverCore7",
    "regDefStudentLoan",
    "popoverCore8",
    "regNotStudentLoan",
    "popoverCore9",
    "regExemptEntities",
    "popoverCore10",
    "servicerNotificationCollapse",
    "notTriggers2",
    "popoverCore11",
    "notDefServ",
    "popoverCore12",
    "notDefServ2",
    "popoverCore13"
  ],
  servicingDetailsCollapse: [
    "servicingDetailsCollapse",
    "servLicTriggers",
    "popoverCore4",
    "servDefStudentLoan2",
    "popoverCore2",
    "servDefStudentLoanExceptions",
    "popoverCore3",
    "servDefStudentLoan",
    "popoverCore",
    "servLicExemptions",
    "popoverCore5"
  ],
  servLicTriggers: ["servLicTriggers", "popoverCore4"],
  popoverCore4: ["popoverCore4"],
  servDefStudentLoan2: ["servDefStudentLoan2", "popoverCore2"],
  popoverCore2: ["popoverCore2"],
  servDefStudentLoanExceptions: [
    "servDefStudentLoanExceptions",
    "popoverCore3"
  ],
  popoverCore3: ["popoverCore3"],
  servDefStudentLoan: ["servDefStudentLoan", "popoverCore"],
  popoverCore: ["popoverCore"],
  servLicExemptions: ["servLicExemptions", "popoverCore5"],
  popoverCore5: ["popoverCore5"],
  creditorRegistrationCollapse: [
    "creditorRegistrationCollapse",
    "regTriggers",
    "popoverCore6",
    "regDefCreditor",
    "popoverCore7",
    "regDefStudentLoan",
    "popoverCore8",
    "regNotStudentLoan",
    "popoverCore9",
    "regExemptEntities",
    "popoverCore10"
  ],
  regTriggers: ["regTriggers", "popoverCore6"],
  popoverCore6: ["popoverCore6"],
  regDefCreditor: ["regDefCreditor", "popoverCore7"],
  popoverCore7: ["popoverCore7"],
  regDefStudentLoan: ["regDefStudentLoan", "popoverCore8"],
  popoverCore8: ["popoverCore8"],
  regNotStudentLoan: ["regNotStudentLoan", "popoverCore9"],
  popoverCore9: ["popoverCore9"],
  regExemptEntities: ["regExemptEntities", "popoverCore10"],
  popoverCore10: ["popoverCore10"],
  servicerNotificationCollapse: [
    "servicerNotificationCollapse",
    "notTriggers2",
    "popoverCore11",
    "notDefServ",
    "popoverCore12",
    "notDefServ2",
    "popoverCore13"
  ],
  notTriggers2: ["notTriggers2", "popoverCore11"],
  popoverCore11: ["popoverCore11"],
  notDefServ: ["notDefServ", "popoverCore12"],
  popoverCore12: ["popoverCore12"],
  notDefServ2: ["notDefServ2", "popoverCore13"],
  popoverCore13: ["popoverCore13"],
  footer: ["footer"],
  faviconsvg: ["faviconsvg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  img: typeof PlasmicImg__;
  popover: typeof AntdPopover;
  filters: "section";
  accordion: typeof AntdAccordion;
  stateFilterAccordion: typeof AntdAccordionItem;
  stateNameFilterSelect: typeof AntdSelect;
  licenseTypeFilterAccordion: typeof AntdAccordionItem;
  licenseTypeFilterSelect: typeof AntdSelect;
  licenseTypeFilterSelectedOption: typeof AntdOption;
  licenseTypeFilterSelectedText: "div";
  activityTypeFilterAccordion: typeof AntdAccordionItem;
  activityTypeSelect: typeof AntdSelect;
  licenseTriggerFilterAccordion: typeof AntdAccordionItem;
  licenseTriggerFilterSelect: typeof AntdSelect;
  productExcludedFeatureFilterAccordion2: typeof AntdAccordionItem;
  prodExcludedFeatureSelect: typeof AntdSelect;
  licensureExemptEntitiesAccordion: typeof AntdAccordionItem;
  servExemptEntitiesFilterSelect: typeof AntdSelect;
  headerSection: "section";
  dataSection: "section";
  stateDetailsAccordion: typeof AntdAccordion;
  accordionItem: typeof AntdAccordionItem;
  servicingDetailsCollapse: typeof AntdSingleCollapse;
  servLicTriggers: "div";
  popoverCore4: typeof Popover;
  servDefStudentLoan2: "div";
  popoverCore2: typeof Popover;
  servDefStudentLoanExceptions: "div";
  popoverCore3: typeof Popover;
  servDefStudentLoan: "div";
  popoverCore: typeof Popover;
  servLicExemptions: "div";
  popoverCore5: typeof Popover;
  creditorRegistrationCollapse: typeof AntdSingleCollapse;
  regTriggers: "div";
  popoverCore6: typeof Popover;
  regDefCreditor: "div";
  popoverCore7: typeof Popover;
  regDefStudentLoan: "div";
  popoverCore8: typeof Popover;
  regNotStudentLoan: "div";
  popoverCore9: typeof Popover;
  regExemptEntities: "div";
  popoverCore10: typeof Popover;
  servicerNotificationCollapse: typeof AntdSingleCollapse;
  notTriggers2: "div";
  popoverCore11: typeof Popover;
  notDefServ: "div";
  popoverCore12: typeof Popover;
  notDefServ2: "div";
  popoverCore13: typeof Popover;
  footer: typeof Footer;
  faviconsvg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    popover: makeNodeComponent("popover"),
    filters: makeNodeComponent("filters"),
    accordion: makeNodeComponent("accordion"),
    stateFilterAccordion: makeNodeComponent("stateFilterAccordion"),
    stateNameFilterSelect: makeNodeComponent("stateNameFilterSelect"),
    licenseTypeFilterAccordion: makeNodeComponent("licenseTypeFilterAccordion"),
    licenseTypeFilterSelect: makeNodeComponent("licenseTypeFilterSelect"),
    licenseTypeFilterSelectedOption: makeNodeComponent(
      "licenseTypeFilterSelectedOption"
    ),
    licenseTypeFilterSelectedText: makeNodeComponent(
      "licenseTypeFilterSelectedText"
    ),
    activityTypeFilterAccordion: makeNodeComponent(
      "activityTypeFilterAccordion"
    ),
    activityTypeSelect: makeNodeComponent("activityTypeSelect"),
    licenseTriggerFilterAccordion: makeNodeComponent(
      "licenseTriggerFilterAccordion"
    ),
    licenseTriggerFilterSelect: makeNodeComponent("licenseTriggerFilterSelect"),
    productExcludedFeatureFilterAccordion2: makeNodeComponent(
      "productExcludedFeatureFilterAccordion2"
    ),
    prodExcludedFeatureSelect: makeNodeComponent("prodExcludedFeatureSelect"),
    licensureExemptEntitiesAccordion: makeNodeComponent(
      "licensureExemptEntitiesAccordion"
    ),
    servExemptEntitiesFilterSelect: makeNodeComponent(
      "servExemptEntitiesFilterSelect"
    ),
    headerSection: makeNodeComponent("headerSection"),
    dataSection: makeNodeComponent("dataSection"),
    stateDetailsAccordion: makeNodeComponent("stateDetailsAccordion"),
    accordionItem: makeNodeComponent("accordionItem"),
    servicingDetailsCollapse: makeNodeComponent("servicingDetailsCollapse"),
    servLicTriggers: makeNodeComponent("servLicTriggers"),
    popoverCore4: makeNodeComponent("popoverCore4"),
    servDefStudentLoan2: makeNodeComponent("servDefStudentLoan2"),
    popoverCore2: makeNodeComponent("popoverCore2"),
    servDefStudentLoanExceptions: makeNodeComponent(
      "servDefStudentLoanExceptions"
    ),
    popoverCore3: makeNodeComponent("popoverCore3"),
    servDefStudentLoan: makeNodeComponent("servDefStudentLoan"),
    popoverCore: makeNodeComponent("popoverCore"),
    servLicExemptions: makeNodeComponent("servLicExemptions"),
    popoverCore5: makeNodeComponent("popoverCore5"),
    creditorRegistrationCollapse: makeNodeComponent(
      "creditorRegistrationCollapse"
    ),
    regTriggers: makeNodeComponent("regTriggers"),
    popoverCore6: makeNodeComponent("popoverCore6"),
    regDefCreditor: makeNodeComponent("regDefCreditor"),
    popoverCore7: makeNodeComponent("popoverCore7"),
    regDefStudentLoan: makeNodeComponent("regDefStudentLoan"),
    popoverCore8: makeNodeComponent("popoverCore8"),
    regNotStudentLoan: makeNodeComponent("regNotStudentLoan"),
    popoverCore9: makeNodeComponent("popoverCore9"),
    regExemptEntities: makeNodeComponent("regExemptEntities"),
    popoverCore10: makeNodeComponent("popoverCore10"),
    servicerNotificationCollapse: makeNodeComponent(
      "servicerNotificationCollapse"
    ),
    notTriggers2: makeNodeComponent("notTriggers2"),
    popoverCore11: makeNodeComponent("popoverCore11"),
    notDefServ: makeNodeComponent("notDefServ"),
    popoverCore12: makeNodeComponent("popoverCore12"),
    notDefServ2: makeNodeComponent("notDefServ2"),
    popoverCore13: makeNodeComponent("popoverCore13"),
    footer: makeNodeComponent("footer"),
    faviconsvg: makeNodeComponent("faviconsvg"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title:
        "Student loan servicing and lending license and registration requirements",
      description:
        "A summary of license and registration requirements for student loan servicers and creditors. ",
      ogImageSrc:
        "https://site-assets.plasmic.app/3c551ef204418d8f7f17c3381736b1ef.png",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
