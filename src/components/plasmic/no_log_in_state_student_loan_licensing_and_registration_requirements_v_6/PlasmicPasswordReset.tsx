// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: irLhCgyC2jofEreSXAxaJg
// Component: x870iHvG-vbK

import * as React from "react";

import {
  Link,
  GatsbyLinkProps as LinkProps,
  navigate as __gatsbyNavigate
} from "gatsby";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import NavBar from "../../NavBar"; // plasmic-import: 5Y4i3sXA1sYl/component
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { AntdPassword } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdPassword_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import Footer from "../../Footer"; // plasmic-import: khkBm0HRg1YF/component

import "@plasmicapp/react-web/lib/plasmic.css";

import * as plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import * as plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import * as projectcss from "./plasmic.module.css"; // plasmic-import: irLhCgyC2jofEreSXAxaJg/projectcss
import * as sty from "./PlasmicPasswordReset.module.css"; // plasmic-import: x870iHvG-vbK/css

createPlasmicElementProxy;

export type PlasmicPasswordReset__VariantMembers = {};
export type PlasmicPasswordReset__VariantsArgs = {};
type VariantPropType = keyof PlasmicPasswordReset__VariantsArgs;
export const PlasmicPasswordReset__VariantProps = new Array<VariantPropType>();

export type PlasmicPasswordReset__ArgsType = {};
type ArgPropType = keyof PlasmicPasswordReset__ArgsType;
export const PlasmicPasswordReset__ArgProps = new Array<ArgPropType>();

export type PlasmicPasswordReset__OverridesType = {
  requestAccessPage?: Flex__<"div">;
  navBar?: Flex__<typeof NavBar>;
  passwordResetForm?: Flex__<typeof FormWrapper>;
  newPwordForm?: Flex__<typeof FormWrapper>;
  footer?: Flex__<typeof Footer>;
};

export interface DefaultPasswordResetProps {
  className?: string;
}

const $$ = {};

export function Head() {
  return (
    <>
      <meta name="twitter:card" content="summary" />
      <title key="title">{PlasmicPasswordReset.pageMetadata.title}</title>
      <meta
        key="og:title"
        property="og:title"
        content={PlasmicPasswordReset.pageMetadata.title}
      />
      <meta
        key="twitter:title"
        name="twitter:title"
        content={PlasmicPasswordReset.pageMetadata.title}
      />
    </>
  );
}

function PlasmicPasswordReset__RenderFunc(props: {
  variants: PlasmicPasswordReset__VariantsArgs;
  args: PlasmicPasswordReset__ArgsType;
  overrides: PlasmicPasswordReset__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "navBar.loginSuccess5",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "passwordResetForm.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "passwordResetForm",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "passwordResetForm.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "passwordResetForm",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "navBar.firstName",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "navBar.lastName",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "resetUsernameForEmail",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "navBar.hostlessRadixPopoverOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "navBar.passwordReset2",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "navBar.plasmicAntd5FormValue2",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "newPwordForm.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "newPwordForm",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "newPwordForm.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "newPwordForm",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "correctTempPassword",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "navBar.plasmicAntd5CollapseActiveKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "1"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  return (
    <React.Fragment>
      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"requestAccessPage"}
          data-plasmic-override={overrides.requestAccessPage}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.requestAccessPage
          )}
        >
          <NavBar
            data-plasmic-name={"navBar"}
            data-plasmic-override={overrides.navBar}
            className={classNames("__wab_instance", sty.navBar)}
            firstName={generateStateValueProp($state, ["navBar", "firstName"])}
            hostlessRadixPopoverOpen={generateStateValueProp($state, [
              "navBar",
              "hostlessRadixPopoverOpen"
            ])}
            lastName={generateStateValueProp($state, ["navBar", "lastName"])}
            loginSuccess5={generateStateValueProp($state, [
              "navBar",
              "loginSuccess5"
            ])}
            onFirstNameChange={generateStateOnChangeProp($state, [
              "navBar",
              "firstName"
            ])}
            onHostlessRadixPopoverOpenChange={generateStateOnChangeProp(
              $state,
              ["navBar", "hostlessRadixPopoverOpen"]
            )}
            onLastNameChange={generateStateOnChangeProp($state, [
              "navBar",
              "lastName"
            ])}
            onLoginSuccess5Change={generateStateOnChangeProp($state, [
              "navBar",
              "loginSuccess5"
            ])}
            onPasswordReset2Change={generateStateOnChangeProp($state, [
              "navBar",
              "passwordReset2"
            ])}
            onPlasmicAntd5CollapseActiveKeyChange={generateStateOnChangeProp(
              $state,
              ["navBar", "plasmicAntd5CollapseActiveKey"]
            )}
            onPlasmicAntd5FormValue2Change={generateStateOnChangeProp($state, [
              "navBar",
              "plasmicAntd5FormValue2"
            ])}
            passwordReset2={generateStateValueProp($state, [
              "navBar",
              "passwordReset2"
            ])}
            plasmicAntd5CollapseActiveKey={generateStateValueProp($state, [
              "navBar",
              "plasmicAntd5CollapseActiveKey"
            ])}
          />

          {(() => {
            try {
              return $state.correctTempPassword == 0;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <section
              className={classNames(projectcss.all, sty.section___0DAq8)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__haR8P
                )}
              >
                {"Enter your new Password"}
              </div>
              {(() => {
                const child$Props = {
                  className: classNames(
                    "__wab_instance",
                    sty.passwordResetForm
                  ),
                  extendedOnValuesChange:
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "value",
                      ["passwordResetForm", "value"],
                      FormWrapper_Helpers
                    ),
                  formItems: undefined,
                  labelCol: { span: 8, horizontalOnly: true },
                  layout: "vertical",
                  mode: undefined,
                  onFinish: async values => {
                    const $steps = {};

                    $steps["httpGet"] = true
                      ? (() => {
                          const actionArgs = {
                            dataOp: {
                              sourceId: "fQaquYyjXBj4Sgvj4PHToP",
                              opId: "55100d3e-9dc8-4593-8d46-2f087d8b15c3",
                              userArgs: {
                                params: [
                                  $state.passwordResetForm.value.email_reset,
                                  $state.passwordResetForm.value.temp_password
                                ]
                              },
                              cacheKey: null,
                              invalidatedKeys: null,
                              roleId: null
                            },
                            continueOnError: true
                          };
                          return (async ({ dataOp, continueOnError }) => {
                            try {
                              const response = await executePlasmicDataOp(
                                dataOp,
                                {
                                  userAuthToken: dataSourcesCtx?.userAuthToken,
                                  user: dataSourcesCtx?.user
                                }
                              );
                              await plasmicInvalidate(dataOp.invalidatedKeys);
                              return response;
                            } catch (e) {
                              if (!continueOnError) {
                                throw e;
                              }
                              return e;
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["httpGet"] != null &&
                      typeof $steps["httpGet"] === "object" &&
                      typeof $steps["httpGet"].then === "function"
                    ) {
                      $steps["httpGet"] = await $steps["httpGet"];
                    }

                    $steps["updateCorrectTempPassword"] =
                      $steps.httpGet.data.response.list.length == 1
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["correctTempPassword"]
                              },
                              operation: 0,
                              value: $steps.httpGet.data.response.list[0].Id
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["updateCorrectTempPassword"] != null &&
                      typeof $steps["updateCorrectTempPassword"] === "object" &&
                      typeof $steps["updateCorrectTempPassword"].then ===
                        "function"
                    ) {
                      $steps["updateCorrectTempPassword"] = await $steps[
                        "updateCorrectTempPassword"
                      ];
                    }

                    $steps["invokeGlobalAction"] =
                      $steps.httpGet.data.response.list.length == 1
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "success",
                                "Welcome.  Please enter a new password.",
                                undefined,
                                undefined,
                                "top"
                              ]
                            };
                            return $globalActions[
                              "plasmic-antd5-config-provider.showNotification"
                            ]?.apply(null, [...actionArgs.args]);
                          })()
                        : undefined;
                    if (
                      $steps["invokeGlobalAction"] != null &&
                      typeof $steps["invokeGlobalAction"] === "object" &&
                      typeof $steps["invokeGlobalAction"].then === "function"
                    ) {
                      $steps["invokeGlobalAction"] = await $steps[
                        "invokeGlobalAction"
                      ];
                    }

                    $steps["invokeGlobalAction2"] =
                      $steps.httpGet.data.response.list.length != 1
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "warning",
                                "Incorrect information. Please try again.",
                                undefined,
                                undefined,
                                "top"
                              ]
                            };
                            return $globalActions[
                              "plasmic-antd5-config-provider.showNotification"
                            ]?.apply(null, [...actionArgs.args]);
                          })()
                        : undefined;
                    if (
                      $steps["invokeGlobalAction2"] != null &&
                      typeof $steps["invokeGlobalAction2"] === "object" &&
                      typeof $steps["invokeGlobalAction2"].then === "function"
                    ) {
                      $steps["invokeGlobalAction2"] = await $steps[
                        "invokeGlobalAction2"
                      ];
                    }
                  },
                  onIsSubmittingChange:
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "isSubmitting",
                      ["passwordResetForm", "isSubmitting"],
                      FormWrapper_Helpers
                    ),
                  ref: ref => {
                    $refs["passwordResetForm"] = ref;
                  },
                  wrapperCol: { span: 16, horizontalOnly: true }
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "value",
                      plasmicStateName: "passwordResetForm.value"
                    },
                    {
                      name: "isSubmitting",
                      plasmicStateName: "passwordResetForm.isSubmitting"
                    }
                  ],
                  [],
                  FormWrapper_Helpers ?? {},
                  child$Props
                );

                return (
                  <FormWrapper
                    data-plasmic-name={"passwordResetForm"}
                    data-plasmic-override={overrides.passwordResetForm}
                    {...child$Props}
                  >
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__eggCl
                      )}
                      label={"Email Address"}
                      name={"email_reset"}
                      rules={[]}
                    >
                      <AntdInput
                        className={classNames(
                          "__wab_instance",
                          sty.input___9M8Eg
                        )}
                      />
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__bopVn
                      )}
                      label={"Temporary Password"}
                      name={"temp_password"}
                    >
                      <AntdInput
                        className={classNames(
                          "__wab_instance",
                          sty.input__eo5Mc
                        )}
                      />
                    </FormItemWrapper>
                    <AntdButton
                      className={classNames(
                        "__wab_instance",
                        sty.button__k746U
                      )}
                      submitsForm={true}
                      type={"primary"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__cbw3X
                        )}
                      >
                        {"Submit"}
                      </div>
                    </AntdButton>
                  </FormWrapper>
                );
              })()}
            </section>
          ) : null}
          {(() => {
            try {
              return $state.correctTempPassword != 0;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <section className={classNames(projectcss.all, sty.section__nhxPb)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___2QfcL
                )}
              >
                {"Please enter your new password"}
              </div>
              {(() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.newPwordForm),
                  extendedOnValuesChange:
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "value",
                      ["newPwordForm", "value"],
                      FormWrapper_Helpers
                    ),
                  formItems: undefined,
                  labelCol: { span: 8, horizontalOnly: true },
                  layout: "vertical",
                  mode: undefined,
                  onFinish: async values => {
                    const $steps = {};

                    $steps["httpPatch"] = true
                      ? (() => {
                          const actionArgs = {
                            dataOp: {
                              sourceId: "fQaquYyjXBj4Sgvj4PHToP",
                              opId: "4a906443-c906-43da-810e-d00df9c7b55f",
                              userArgs: {
                                body: [
                                  $state.correctTempPassword,
                                  $state.newPwordForm.value.new_pword2
                                ]
                              },
                              cacheKey: null,
                              invalidatedKeys: [],
                              roleId: null
                            }
                          };
                          return (async ({ dataOp, continueOnError }) => {
                            try {
                              const response = await executePlasmicDataOp(
                                dataOp,
                                {
                                  userAuthToken: dataSourcesCtx?.userAuthToken,
                                  user: dataSourcesCtx?.user
                                }
                              );
                              await plasmicInvalidate(dataOp.invalidatedKeys);
                              return response;
                            } catch (e) {
                              if (!continueOnError) {
                                throw e;
                              }
                              return e;
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["httpPatch"] != null &&
                      typeof $steps["httpPatch"] === "object" &&
                      typeof $steps["httpPatch"].then === "function"
                    ) {
                      $steps["httpPatch"] = await $steps["httpPatch"];
                    }

                    $steps["invokeGlobalAction"] = true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "success",
                              "Your password has been updated.  Thank you.",
                              undefined,
                              undefined,
                              "top"
                            ]
                          };
                          return $globalActions[
                            "plasmic-antd5-config-provider.showNotification"
                          ]?.apply(null, [...actionArgs.args]);
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction"] != null &&
                      typeof $steps["invokeGlobalAction"] === "object" &&
                      typeof $steps["invokeGlobalAction"].then === "function"
                    ) {
                      $steps["invokeGlobalAction"] = await $steps[
                        "invokeGlobalAction"
                      ];
                    }

                    $steps["updateCorrectTempPassword"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["correctTempPassword"]
                            },
                            operation: 0,
                            value: 0
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateCorrectTempPassword"] != null &&
                      typeof $steps["updateCorrectTempPassword"] === "object" &&
                      typeof $steps["updateCorrectTempPassword"].then ===
                        "function"
                    ) {
                      $steps["updateCorrectTempPassword"] = await $steps[
                        "updateCorrectTempPassword"
                      ];
                    }

                    $steps["goToHomepage"] = true
                      ? (() => {
                          const actionArgs = { destination: `/` };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __gatsbyNavigate(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToHomepage"] != null &&
                      typeof $steps["goToHomepage"] === "object" &&
                      typeof $steps["goToHomepage"].then === "function"
                    ) {
                      $steps["goToHomepage"] = await $steps["goToHomepage"];
                    }
                  },
                  onIsSubmittingChange:
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "isSubmitting",
                      ["newPwordForm", "isSubmitting"],
                      FormWrapper_Helpers
                    ),
                  ref: ref => {
                    $refs["newPwordForm"] = ref;
                  },
                  wrapperCol: { span: 16, horizontalOnly: true }
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "value",
                      plasmicStateName: "newPwordForm.value"
                    },
                    {
                      name: "isSubmitting",
                      plasmicStateName: "newPwordForm.isSubmitting"
                    }
                  ],
                  [],
                  FormWrapper_Helpers ?? {},
                  child$Props
                );

                return (
                  <FormWrapper
                    data-plasmic-name={"newPwordForm"}
                    data-plasmic-override={overrides.newPwordForm}
                    {...child$Props}
                  >
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__jdLbq
                      )}
                      label={"New Password"}
                      name={"new_pword1"}
                      rules={[
                        { ruleType: "required", message: "Required" },

                        {
                          ruleType: "min",
                          length: 8,
                          message: "Must be at least 8 characters"
                        },

                        {
                          ruleType: "max",
                          message: "No more than 240 characters",
                          length: 240
                        }
                      ]}
                    >
                      <AntdPassword
                        className={classNames(
                          "__wab_instance",
                          sty.passwordInput__gAYkI
                        )}
                      />
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__qTjIl
                      )}
                      label={"Reenter New Password"}
                      name={"new_pword2"}
                      rules={[
                        {
                          ruleType: "advanced",
                          custom: (rule, value) => {
                            return (
                              $state.newPwordForm.value.new_pword1 ==
                              $state.newPwordForm.value.new_pword2
                            );
                          },
                          message: "Passwords do not match"
                        }
                      ]}
                    >
                      <AntdPassword
                        className={classNames(
                          "__wab_instance",
                          sty.passwordInput__gj8P9
                        )}
                      />
                    </FormItemWrapper>
                    <AntdButton
                      className={classNames(
                        "__wab_instance",
                        sty.button__av9Vd
                      )}
                      disabled={(() => {
                        try {
                          return (
                            $state.newPwordForm.value.new_pword1 !=
                              $state.newPwordForm.value.new_pword2 ||
                            $state.newPwordForm.value.new_pword2.length == 0
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      submitsForm={true}
                      type={"primary"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__p2JJ8
                        )}
                      >
                        {"Submit"}
                      </div>
                    </AntdButton>
                  </FormWrapper>
                );
              })()}
            </section>
          ) : null}
          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  requestAccessPage: [
    "requestAccessPage",
    "navBar",
    "passwordResetForm",
    "newPwordForm",
    "footer"
  ],
  navBar: ["navBar"],
  passwordResetForm: ["passwordResetForm"],
  newPwordForm: ["newPwordForm"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  requestAccessPage: "div";
  navBar: typeof NavBar;
  passwordResetForm: typeof FormWrapper;
  newPwordForm: typeof FormWrapper;
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPasswordReset__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPasswordReset__VariantsArgs;
    args?: PlasmicPasswordReset__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPasswordReset__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicPasswordReset__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPasswordReset__ArgProps,
          internalVariantPropNames: PlasmicPasswordReset__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPasswordReset__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "requestAccessPage") {
    func.displayName = "PlasmicPasswordReset";
  } else {
    func.displayName = `PlasmicPasswordReset.${nodeName}`;
  }
  return func;
}

export const PlasmicPasswordReset = Object.assign(
  // Top-level PlasmicPasswordReset renders the root element
  makeNodeComponent("requestAccessPage"),
  {
    // Helper components rendering sub-elements
    navBar: makeNodeComponent("navBar"),
    passwordResetForm: makeNodeComponent("passwordResetForm"),
    newPwordForm: makeNodeComponent("newPwordForm"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicPasswordReset
    internalVariantProps: PlasmicPasswordReset__VariantProps,
    internalArgProps: PlasmicPasswordReset__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "State Student Loan Law Summary Password Reset Page",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicPasswordReset;
/* prettier-ignore-end */
