// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: irLhCgyC2jofEreSXAxaJg
// Component: uDdLax84fdHt

import * as React from "react";

import {
  Link,
  GatsbyLinkProps as LinkProps,
  navigate as __gatsbyNavigate
} from "gatsby";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import NavBar from "../../NavBar"; // plasmic-import: 5Y4i3sXA1sYl/component
import { Popover } from "@plasmicpkgs/radix-ui";
import Button from "../../Button"; // plasmic-import: 5nirPCGmCnRD/component
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import { AntdOption } from "@plasmicpkgs/antd5/skinny/registerSelect";
import { DataProvider } from "@plasmicpkgs/plasmic-basic-components";
import { AntdSingleCollapse } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { singleCollapseHelpers as AntdSingleCollapse_Helpers } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import Footer from "../../Footer"; // plasmic-import: khkBm0HRg1YF/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariants_1I2DpOkk9PUt } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 1I2DpOKK9pUT/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import * as plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import * as plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import * as projectcss from "./plasmic.module.css"; // plasmic-import: irLhCgyC2jofEreSXAxaJg/projectcss
import * as sty from "./PlasmicHomepage.module.css"; // plasmic-import: uDdLax84fdHt/css

import ChecksvgIcon from "../radix_ui/icons/PlasmicIcon__Checksvg"; // plasmic-import: Wyt3GMMsLefj/icon
import IconIcon from "../radix_ui/icons/PlasmicIcon__Icon"; // plasmic-import: MbDRsJU0e3bw/icon
import untitledDesign1PngPtrIlntN7GUp from "./images/untitledDesign1Png.png"; // plasmic-import: PTRIlntN7GUp/picture

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {
  collapseOpen?: boolean;
};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>("collapseOpen");

export type PlasmicHomepage__OverridesType = {
  root?: Flex__<"div">;
  navBar?: Flex__<typeof NavBar>;
  popoverCore?: Flex__<typeof Popover>;
  freeBox?: Flex__<"div">;
  form?: Flex__<typeof FormWrapper>;
  select3?: Flex__<typeof AntdSelect>;
  option?: Flex__<typeof AntdOption>;
  select?: Flex__<typeof AntdSelect>;
  dataProvider?: Flex__<typeof DataProvider>;
  collapse?: Flex__<typeof AntdSingleCollapse>;
  collapseServicing?: Flex__<typeof AntdSingleCollapse>;
  collapseLending?: Flex__<typeof AntdSingleCollapse>;
  footer?: Flex__<typeof Footer>;
};

export interface DefaultHomepageProps {
  collapseOpen?: boolean;
  className?: string;
}

const $$ = {};

export function Head() {
  return (
    <>
      <meta name="twitter:card" content="summary_large_image" />
      <title key="title">{PlasmicHomepage.pageMetadata.title}</title>
      <meta
        key="og:title"
        property="og:title"
        content={PlasmicHomepage.pageMetadata.title}
      />
      <meta
        key="twitter:title"
        name="twitter:title"
        content={PlasmicHomepage.pageMetadata.title}
      />
      <meta
        key="description"
        name="description"
        content={PlasmicHomepage.pageMetadata.description}
      />
      <meta
        key="og:description"
        property="og:description"
        content={PlasmicHomepage.pageMetadata.description}
      />
      <meta
        key="twitter:description"
        name="twitter:description"
        content={PlasmicHomepage.pageMetadata.description}
      />
      <meta
        key="og:image"
        property="og:image"
        content={PlasmicHomepage.pageMetadata.ogImageSrc}
      />
      <meta
        key="twitter:image"
        name="twitter:image"
        content={PlasmicHomepage.pageMetadata.ogImageSrc}
      />
      <link ref="canonical" href={PlasmicHomepage.pageMetadata.canonical} />
    </>
  );
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "collapse[].open",
        type: "private",
        variableType: "boolean",

        onMutate: generateOnMutateForSpec("open", AntdSingleCollapse_Helpers)
      },
      {
        path: "collapseServicing[].open",
        type: "private",
        variableType: "boolean",

        onMutate: generateOnMutateForSpec("open", AntdSingleCollapse_Helpers)
      },
      {
        path: "collapseLending[].open",
        type: "private",
        variableType: "boolean",

        onMutate: generateOnMutateForSpec("open", AntdSingleCollapse_Helpers)
      },
      {
        path: "navBar.loginSuccess5",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "navBar.firstName",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "navBar.lastName",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "navBar.hostlessRadixPopoverOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "navBar.passwordReset2",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "navBar.plasmicAntd5FormValue2",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "navBar.plasmicAntd5CollapseActiveKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "1"
      },
      {
        path: "popoverCore.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "filteredStates",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "filteredStatesApicall",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "select3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "filterActivity",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    nocodb: usePlasmicDataOp(() => {
      return {
        sourceId: "fQaquYyjXBj4Sgvj4PHToP",
        opId: "dbe0f2ad-af71-4b11-9f64-74f13da770d4",
        userArgs: {
          params: [$state.filteredStatesApicall]
        },
        cacheKey: `plasmic.$.dbe0f2ad-af71-4b11-9f64-74f13da770d4.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    componentData: usePlasmicDataOp(() => {
      return {
        sourceId: "fQaquYyjXBj4Sgvj4PHToP",
        opId: "c74f70f5-b129-476f-a444-37414be0bfe9",
        userArgs: {},
        cacheKey: `plasmic.$.c74f70f5-b129-476f-a444-37414be0bfe9.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_1I2DpOkk9PUt()
  });

  return (
    <React.Fragment>
      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <section className={classNames(projectcss.all, sty.section__tyzEp)}>
            <NavBar
              data-plasmic-name={"navBar"}
              data-plasmic-override={overrides.navBar}
              className={classNames("__wab_instance", sty.navBar)}
              firstName={generateStateValueProp($state, [
                "navBar",
                "firstName"
              ])}
              hostlessRadixPopoverOpen={generateStateValueProp($state, [
                "navBar",
                "hostlessRadixPopoverOpen"
              ])}
              lastName={generateStateValueProp($state, ["navBar", "lastName"])}
              loginSuccess5={generateStateValueProp($state, [
                "navBar",
                "loginSuccess5"
              ])}
              onFirstNameChange={generateStateOnChangeProp($state, [
                "navBar",
                "firstName"
              ])}
              onHostlessRadixPopoverOpenChange={generateStateOnChangeProp(
                $state,
                ["navBar", "hostlessRadixPopoverOpen"]
              )}
              onLastNameChange={generateStateOnChangeProp($state, [
                "navBar",
                "lastName"
              ])}
              onLoginSuccess5Change={generateStateOnChangeProp($state, [
                "navBar",
                "loginSuccess5"
              ])}
              onPasswordReset2Change={generateStateOnChangeProp($state, [
                "navBar",
                "passwordReset2"
              ])}
              onPlasmicAntd5CollapseActiveKeyChange={generateStateOnChangeProp(
                $state,
                ["navBar", "plasmicAntd5CollapseActiveKey"]
              )}
              onPlasmicAntd5FormValue2Change={generateStateOnChangeProp(
                $state,
                ["navBar", "plasmicAntd5FormValue2"]
              )}
              passwordReset2={generateStateValueProp($state, [
                "navBar",
                "passwordReset2"
              ])}
              plasmicAntd5CollapseActiveKey={generateStateValueProp($state, [
                "navBar",
                "plasmicAntd5CollapseActiveKey"
              ])}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___7Zij1
              )}
            >
              {
                "Student loan Servicing Licensing \nLender/Holder Registration Requirements"
              }
            </div>
          </section>
          <section className={classNames(projectcss.all, sty.section__cAib)}>
            <div className={classNames(projectcss.all, sty.columns__b5BG)}>
              <div className={classNames(projectcss.all, sty.column__kFb91)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__r3Gjy
                  )}
                >
                  {"State Name"}
                </div>
              </div>
              {(() => {
                try {
                  return $state.filterActivity != "filter_lending"
                    ? true
                    : false;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div className={classNames(projectcss.all, sty.column__bgo23)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__nFvro
                    )}
                  >
                    {"Licenses Servicers?"}
                  </div>
                </div>
              ) : null}
              {(() => {
                try {
                  return $state.filterActivity != "filter_servicing"
                    ? true
                    : false;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div className={classNames(projectcss.all, sty.column__uBsev)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___9Yngh
                    )}
                  >
                    {"Lenders Must Register?"}
                  </div>
                </div>
              ) : null}
            </div>
            <section
              className={classNames(projectcss.all, sty.section___832Bk)}
            >
              <Popover
                data-plasmic-name={"popoverCore"}
                data-plasmic-override={overrides.popoverCore}
                className={classNames("__wab_instance", sty.popoverCore)}
                defaultOpen={false}
                onOpenChange={generateStateOnChangeProp($state, [
                  "popoverCore",
                  "open"
                ])}
                open={generateStateValueProp($state, ["popoverCore", "open"])}
                overlay={
                  <div
                    data-plasmic-name={"freeBox"}
                    data-plasmic-override={overrides.freeBox}
                    className={classNames(projectcss.all, sty.freeBox)}
                  >
                    {(() => {
                      const child$Props = {
                        autoDisableWhileSubmitting: false,
                        className: classNames("__wab_instance", sty.form),
                        extendedOnValuesChange:
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["form", "value"],
                            FormWrapper_Helpers
                          ),
                        formItems: [
                          { label: "Name", name: "name", inputType: "Text" },
                          {
                            label: "Message",
                            name: "message",
                            inputType: "Text Area"
                          }
                        ],
                        labelCol: { span: 8, horizontalOnly: true },
                        layout: "vertical",
                        mode: "advanced",
                        onFinish: async values => {
                          const $steps = {};

                          $steps["updateFilteredStates"] =
                            $state.select3.value.length > 0
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["filteredStates"]
                                    },
                                    operation: 0,
                                    value: $state.select3.value
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["updateFilteredStates"] != null &&
                            typeof $steps["updateFilteredStates"] ===
                              "object" &&
                            typeof $steps["updateFilteredStates"].then ===
                              "function"
                          ) {
                            $steps["updateFilteredStates"] = await $steps[
                              "updateFilteredStates"
                            ];
                          }

                          $steps["runCode"] =
                            $state.select3.value.length > 0
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return (() => {
                                        let a =
                                          $state.select3.value.join(
                                            ")~or(state,eq,"
                                          );
                                        return "(state,eq," + a + ")";
                                      })();
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["runCode"] != null &&
                            typeof $steps["runCode"] === "object" &&
                            typeof $steps["runCode"].then === "function"
                          ) {
                            $steps["runCode"] = await $steps["runCode"];
                          }

                          $steps["updateFilteredStatesApicall"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["filteredStatesApicall"]
                                  },
                                  operation: 0,
                                  value: $steps.runCode
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateFilteredStatesApicall"] != null &&
                            typeof $steps["updateFilteredStatesApicall"] ===
                              "object" &&
                            typeof $steps["updateFilteredStatesApicall"]
                              .then === "function"
                          ) {
                            $steps["updateFilteredStatesApicall"] =
                              await $steps["updateFilteredStatesApicall"];
                          }

                          $steps["httpGet"] =
                            $state.select3.value.length > 0
                              ? (() => {
                                  const actionArgs = {
                                    dataOp: {
                                      sourceId: "fQaquYyjXBj4Sgvj4PHToP",
                                      opId: "0467469f-95df-4ee8-96ae-6417567fa395",
                                      userArgs: {
                                        params: [$state.filteredStatesApicall]
                                      },
                                      cacheKey: null,
                                      invalidatedKeys: null,
                                      roleId: null
                                    }
                                  };
                                  return (async ({
                                    dataOp,
                                    continueOnError
                                  }) => {
                                    try {
                                      const response =
                                        await executePlasmicDataOp(dataOp, {
                                          userAuthToken:
                                            dataSourcesCtx?.userAuthToken,
                                          user: dataSourcesCtx?.user
                                        });
                                      await plasmicInvalidate(
                                        dataOp.invalidatedKeys
                                      );
                                      return response;
                                    } catch (e) {
                                      if (!continueOnError) {
                                        throw e;
                                      }
                                      return e;
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["httpGet"] != null &&
                            typeof $steps["httpGet"] === "object" &&
                            typeof $steps["httpGet"].then === "function"
                          ) {
                            $steps["httpGet"] = await $steps["httpGet"];
                          }

                          $steps["updatePopoverCoreOpen"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["popoverCore", "open"]
                                  },
                                  operation: 0,
                                  value: false
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updatePopoverCoreOpen"] != null &&
                            typeof $steps["updatePopoverCoreOpen"] ===
                              "object" &&
                            typeof $steps["updatePopoverCoreOpen"].then ===
                              "function"
                          ) {
                            $steps["updatePopoverCoreOpen"] = await $steps[
                              "updatePopoverCoreOpen"
                            ];
                          }

                          $steps["updateFilterActivity"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["filterActivity"]
                                  },
                                  operation: 0,
                                  value: $state.select.value[0]
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateFilterActivity"] != null &&
                            typeof $steps["updateFilterActivity"] ===
                              "object" &&
                            typeof $steps["updateFilterActivity"].then ===
                              "function"
                          ) {
                            $steps["updateFilterActivity"] = await $steps[
                              "updateFilterActivity"
                            ];
                          }
                        },
                        onIsSubmittingChange:
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "isSubmitting",
                            ["form", "isSubmitting"],
                            FormWrapper_Helpers
                          ),
                        ref: ref => {
                          $refs["form"] = ref;
                        },
                        submitSlot: null,
                        wrapperCol: { span: 16, horizontalOnly: true }
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "form.value"
                          },
                          {
                            name: "isSubmitting",
                            plasmicStateName: "form.isSubmitting"
                          }
                        ],
                        [],
                        FormWrapper_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <FormWrapper
                          data-plasmic-name={"form"}
                          data-plasmic-override={overrides.form}
                          {...child$Props}
                        >
                          <AntdButton
                            className={classNames(
                              "__wab_instance",
                              sty.button__tc5Kw
                            )}
                            submitsForm={true}
                            type={"primary"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__aiHp1
                              )}
                            >
                              {"Apply Filters"}
                            </div>
                          </AntdButton>
                          <AntdSelect
                            data-plasmic-name={"select3"}
                            data-plasmic-override={overrides.select3}
                            allowClear={true}
                            className={classNames(
                              "__wab_instance",
                              sty.select3
                            )}
                            defaultStylesClassName={classNames(
                              projectcss.root_reset,
                              projectcss.plasmic_default_styles,
                              projectcss.plasmic_mixins,
                              projectcss.plasmic_tokens,
                              plasmic_antd_5_hostless_css.plasmic_tokens,
                              plasmic_plasmic_rich_components_css.plasmic_tokens
                            )}
                            mode={"multiple"}
                            onChange={generateStateOnChangeProp($state, [
                              "select3",
                              "value"
                            ])}
                            options={[
                              {
                                value: "option1",
                                label: "Option 1",
                                type: "option"
                              },
                              {
                                value: "option2",
                                label: "Option 2",
                                type: "option"
                              }
                            ]}
                            placeholder={"Filter By State(s)"}
                            popupScopeClassName={sty["select3__popup"]}
                            useChildren={true}
                            value={generateStateValueProp($state, [
                              "select3",
                              "value"
                            ])}
                          >
                            {(_par =>
                              !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                              (() => {
                                try {
                                  return $queries.componentData.data.response
                                    .list;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()
                            ).map((__plasmic_item_0, __plasmic_idx_0) => {
                              const currentItem = __plasmic_item_0;
                              const currentIndex = __plasmic_idx_0;
                              return (
                                <AntdOption
                                  data-plasmic-name={"option"}
                                  data-plasmic-override={overrides.option}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.option
                                  )}
                                  key={currentIndex}
                                  value={(() => {
                                    try {
                                      return currentItem.state;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.state;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Option";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </AntdOption>
                              );
                            })}
                          </AntdSelect>
                          <AntdSelect
                            data-plasmic-name={"select"}
                            data-plasmic-override={overrides.select}
                            allowClear={true}
                            className={classNames("__wab_instance", sty.select)}
                            defaultStylesClassName={classNames(
                              projectcss.root_reset,
                              projectcss.plasmic_default_styles,
                              projectcss.plasmic_mixins,
                              projectcss.plasmic_tokens,
                              plasmic_antd_5_hostless_css.plasmic_tokens,
                              plasmic_plasmic_rich_components_css.plasmic_tokens
                            )}
                            disabled={false}
                            mode={"multiple"}
                            onChange={generateStateOnChangeProp($state, [
                              "select",
                              "value"
                            ])}
                            options={(() => {
                              const __composite = [
                                { value: null, label: null, type: "option" },
                                { value: null, label: null, type: "option" }
                              ];
                              __composite["0"]["value"] = "filter_servicing";
                              __composite["0"]["label"] =
                                "Student Loan Servicing";
                              __composite["1"]["value"] = "filter_lending";
                              __composite["1"]["label"] = "Lending / Holding";
                              return __composite;
                            })()}
                            placeholder={"Filter By Activity or Role"}
                            popupScopeClassName={sty["select__popup"]}
                            value={generateStateValueProp($state, [
                              "select",
                              "value"
                            ])}
                          />
                        </FormWrapper>
                      );
                    })()}
                  </div>
                }
                themeResetClass={classNames(
                  projectcss.root_reset,
                  projectcss.plasmic_default_styles,
                  projectcss.plasmic_mixins,
                  projectcss.plasmic_tokens,
                  plasmic_antd_5_hostless_css.plasmic_tokens,
                  plasmic_plasmic_rich_components_css.plasmic_tokens
                )}
              >
                <Button
                  className={classNames("__wab_instance", sty.button__xmRl2)}
                  color={(() => {
                    try {
                      return $state.filteredStatesApicall.length > 0 ||
                        $state.filterActivity.length == "undefined"
                        ? "softRed"
                        : "softSand";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "softSand";
                      }
                      throw e;
                    }
                  })()}
                  size={"compact"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___42DR0
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.filteredStatesApicall.length > 0 ||
                            $state.filterActivity.length == "undefined"
                            ? "Edit Filters"
                            : "Select Filters";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "View Filters";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </Button>
              </Popover>
            </section>
          </section>
          <section className={classNames(projectcss.all, sty.section__bbZaT)}>
            {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              (() => {
                try {
                  return $queries.nocodb.data.response.list;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            ).map((__plasmic_item_0, __plasmic_idx_0) => {
              const currentItem = __plasmic_item_0;
              const currentIndex = __plasmic_idx_0;
              return (
                <DataProvider
                  data-plasmic-name={"dataProvider"}
                  data-plasmic-override={overrides.dataProvider}
                  className={classNames("__wab_instance", sty.dataProvider)}
                  data={currentItem}
                  key={currentIndex}
                  name={(() => {
                    try {
                      return currentItem;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                >
                  <DataCtxReader__>
                    {$ctx =>
                      (() => {
                        const child$Props = {
                          bordered: false,
                          className: classNames("__wab_instance", sty.collapse),
                          defaultOpen: false,
                          disabled: (() => {
                            try {
                              return (
                                currentItem.lending_registration_yn == "No" &&
                                currentItem.servicing_license_yn == "No"
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return false;
                              }
                              throw e;
                            }
                          })(),
                          ghost: true,
                          headerClass: classNames({
                            [sty["pcls_ZSpXgpaEhg6L"]]: true
                          }),
                          label2: (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.columns__gMa5T
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.column__qzcF
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__yqXhk
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.state;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Collapse Header";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </div>
                              {(() => {
                                try {
                                  return $state.filterActivity !=
                                    "filter_lending"
                                    ? true
                                    : false;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <Stack__
                                  as={"div"}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.column__kaE9S
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__g0IXa
                                    )}
                                  >
                                    {"Licenses Servicers?"}
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text___3H1In
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return currentItem.servicing_license_yn;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                </Stack__>
                              ) : null}
                              {(() => {
                                try {
                                  return $state.filterActivity !=
                                    "filter_servicing"
                                    ? true
                                    : false;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.column__eX5Ft
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__kjweB
                                    )}
                                  >
                                    {"Lenders Must register?"}
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__qsgWe
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return currentItem.lending_registration_yn;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                </div>
                              ) : null}
                            </div>
                          ),
                          onChange: generateStateOnChangePropForCodeComponents(
                            $state,
                            "open",
                            ["collapse", __plasmic_idx_0, "open"],
                            AntdSingleCollapse_Helpers
                          ),
                          open: generateStateValueProp($state, [
                            "collapse",
                            __plasmic_idx_0,
                            "open"
                          ]),
                          showArrow: true,
                          size: "small"
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "open",
                              plasmicStateName: "collapse[].open"
                            }
                          ],
                          [__plasmic_idx_0],
                          AntdSingleCollapse_Helpers ?? {},
                          child$Props
                        );
                        initializePlasmicStates(
                          $state,
                          [
                            {
                              name: "collapse[].open",
                              initFunc: ({ $props, $state, $queries }) => false
                            }
                          ],
                          [__plasmic_idx_0]
                        );
                        return (
                          <AntdSingleCollapse
                            data-plasmic-name={"collapse"}
                            data-plasmic-override={overrides.collapse}
                            {...child$Props}
                          >
                            {(() => {
                              const child$Props = {
                                bordered: true,
                                className: classNames(
                                  "__wab_instance",
                                  sty.collapseServicing
                                ),
                                defaultOpen: false,
                                disabled: (() => {
                                  try {
                                    return (
                                      currentItem.servicing_license_yn == "No"
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })(),
                                ghost: true,
                                label2:
                                  "Servicing License Requirements and Definitions",
                                onChange:
                                  generateStateOnChangePropForCodeComponents(
                                    $state,
                                    "open",
                                    [
                                      "collapseServicing",
                                      __plasmic_idx_0,
                                      "open"
                                    ],
                                    AntdSingleCollapse_Helpers
                                  ),
                                open: generateStateValueProp($state, [
                                  "collapseServicing",
                                  __plasmic_idx_0,
                                  "open"
                                ]),
                                showArrow: true,
                                size: "small"
                              };
                              initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "open",
                                    plasmicStateName: "collapseServicing[].open"
                                  }
                                ],
                                [__plasmic_idx_0],
                                AntdSingleCollapse_Helpers ?? {},
                                child$Props
                              );
                              initializePlasmicStates(
                                $state,
                                [
                                  {
                                    name: "collapseServicing[].open",
                                    initFunc: ({ $props, $state, $queries }) =>
                                      false
                                  }
                                ],
                                [__plasmic_idx_0]
                              );
                              return (
                                <AntdSingleCollapse
                                  data-plasmic-name={"collapseServicing"}
                                  data-plasmic-override={
                                    overrides.collapseServicing
                                  }
                                  {...child$Props}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.columns__y6S8K
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.column__cgitw
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__jOrZl
                                        )}
                                      >
                                        {"Licenses Servicers?"}
                                      </div>
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.column__hM1Wl
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__y4Xig
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return currentItem.servicing_license_yn;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                    </div>
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.columns__c3Y
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.column__lvL9E
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text___4H2N
                                        )}
                                      >
                                        {'Definition of "Student Loan"'}
                                      </div>
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.column__s9V16
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__v9N5G
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return currentItem.serv_def_studentloan;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                    </div>
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.columns__xuJma
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.column__ayWwl
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__voj09
                                        )}
                                      >
                                        {'Definition of "servicing"'}
                                      </div>
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.column__hpdCc
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__bs3FM
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return currentItem.serv_def_servicing;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                    </div>
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.columns__pPCs
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.column__aT11
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__zcRkl
                                        )}
                                      >
                                        {"Who must obtain a servicing license?"}
                                      </div>
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.column__w128L
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__rw9Rf
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return currentItem.serv_who_needs;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                    </div>
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.columns__lxxZ9
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.column__mZapn
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__aXZ6
                                        )}
                                      >
                                        {"What exceptions apply?"}
                                      </div>
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.column__eyYaz
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__p1FaJ
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return currentItem.serv_exceptions;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                    </div>
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.columns__acagB
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.column__qzXdf
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text___9HldO
                                        )}
                                      >
                                        {"Other"}
                                      </div>
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.column__ntvLv
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__qydyI
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return currentItem.other;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                    </div>
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.columns__sgEed
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.column__fFdYt
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__tUCsL
                                        )}
                                      >
                                        {"Links"}
                                      </div>
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.column___0Woqr
                                      )}
                                    >
                                      <PlasmicLink__
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.a,
                                          projectcss.__wab_text,
                                          sty.link__uvr2
                                        )}
                                        component={Link}
                                        href={(() => {
                                          try {
                                            return currentItem.servicing_law_link;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "";
                                            }
                                            throw e;
                                          }
                                        })()}
                                        platform={"gatsby"}
                                        target={"_blank"}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return currentItem.servicing_law_link;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "Some link text";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </PlasmicLink__>
                                    </div>
                                  </div>
                                </AntdSingleCollapse>
                              );
                            })()}
                            {(() => {
                              const child$Props = {
                                bordered: true,
                                className: classNames(
                                  "__wab_instance",
                                  sty.collapseLending
                                ),
                                defaultOpen: false,
                                disabled: (() => {
                                  try {
                                    return (
                                      currentItem.lending_registration_yn ==
                                      "No"
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })(),
                                ghost: true,
                                headerClass: classNames({
                                  [sty["pcls_ksoWNss3G2AL"]]: true
                                }),
                                label2:
                                  "Lending/Holding Registration Requirements and Definitions",
                                onChange:
                                  generateStateOnChangePropForCodeComponents(
                                    $state,
                                    "open",
                                    [
                                      "collapseLending",
                                      __plasmic_idx_0,
                                      "open"
                                    ],
                                    AntdSingleCollapse_Helpers
                                  ),
                                open: generateStateValueProp($state, [
                                  "collapseLending",
                                  __plasmic_idx_0,
                                  "open"
                                ]),
                                showArrow: true,
                                size: "small"
                              };
                              initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "open",
                                    plasmicStateName: "collapseLending[].open"
                                  }
                                ],
                                [__plasmic_idx_0],
                                AntdSingleCollapse_Helpers ?? {},
                                child$Props
                              );
                              initializePlasmicStates(
                                $state,
                                [
                                  {
                                    name: "collapseLending[].open",
                                    initFunc: ({ $props, $state, $queries }) =>
                                      false
                                  }
                                ],
                                [__plasmic_idx_0]
                              );
                              return (
                                <AntdSingleCollapse
                                  data-plasmic-name={"collapseLending"}
                                  data-plasmic-override={
                                    overrides.collapseLending
                                  }
                                  {...child$Props}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.columns__xzSvA
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.column__bIkdr
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__uVmpn
                                        )}
                                      >
                                        {
                                          "Registration of Student Lenders Required?"
                                        }
                                      </div>
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.column___3Elm2
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__rzunS
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return currentItem.lending_registration_yn;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                    </div>
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.columns__dgiuk
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.column__vXDvY
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text___0Rsx
                                        )}
                                      >
                                        {'Definition of "Student Loan"'}
                                      </div>
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.column__iKipy
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__iJbe8
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return currentItem.reg_defin_studentloan;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                    </div>
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.columns__abbYw
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.column__srd39
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__fkg01
                                        )}
                                      >
                                        {"Who must register?"}
                                      </div>
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.column__lgxdv
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text___3Kzvv
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return currentItem.reg_who_needs;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                    </div>
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.columns__gbaou
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.column___8IvLh
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text___64S92
                                        )}
                                      >
                                        {"What exceptions apply?"}
                                      </div>
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.column__ywdr0
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__lbsuE
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return currentItem.reg_exceptions;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                    </div>
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.columns___6Nf2G
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.column__e8Wkx
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__rTyD
                                        )}
                                      >
                                        {"Links"}
                                      </div>
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.column___6IIqm
                                      )}
                                    >
                                      <PlasmicLink__
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.a,
                                          projectcss.__wab_text,
                                          sty.link__nq1X
                                        )}
                                        component={Link}
                                        href={(() => {
                                          try {
                                            return currentItem.lending_law_link;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()}
                                        platform={"gatsby"}
                                        target={"_blank"}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return currentItem.lending_law_link;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "Some link text";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </PlasmicLink__>
                                    </div>
                                  </div>
                                </AntdSingleCollapse>
                              );
                            })()}
                          </AntdSingleCollapse>
                        );
                      })()
                    }
                  </DataCtxReader__>
                </DataProvider>
              );
            })}
            <Footer
              data-plasmic-name={"footer"}
              data-plasmic-override={overrides.footer}
              className={classNames("__wab_instance", sty.footer)}
            />
          </section>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navBar",
    "popoverCore",
    "freeBox",
    "form",
    "select3",
    "option",
    "select",
    "dataProvider",
    "collapse",
    "collapseServicing",
    "collapseLending",
    "footer"
  ],
  navBar: ["navBar"],
  popoverCore: [
    "popoverCore",
    "freeBox",
    "form",
    "select3",
    "option",
    "select"
  ],
  freeBox: ["freeBox", "form", "select3", "option", "select"],
  form: ["form", "select3", "option", "select"],
  select3: ["select3", "option"],
  option: ["option"],
  select: ["select"],
  dataProvider: [
    "dataProvider",
    "collapse",
    "collapseServicing",
    "collapseLending"
  ],
  collapse: ["collapse", "collapseServicing", "collapseLending"],
  collapseServicing: ["collapseServicing"],
  collapseLending: ["collapseLending"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navBar: typeof NavBar;
  popoverCore: typeof Popover;
  freeBox: "div";
  form: typeof FormWrapper;
  select3: typeof AntdSelect;
  option: typeof AntdOption;
  select: typeof AntdSelect;
  dataProvider: typeof DataProvider;
  collapse: typeof AntdSingleCollapse;
  collapseServicing: typeof AntdSingleCollapse;
  collapseLending: typeof AntdSingleCollapse;
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navBar: makeNodeComponent("navBar"),
    popoverCore: makeNodeComponent("popoverCore"),
    freeBox: makeNodeComponent("freeBox"),
    form: makeNodeComponent("form"),
    select3: makeNodeComponent("select3"),
    option: makeNodeComponent("option"),
    select: makeNodeComponent("select"),
    dataProvider: makeNodeComponent("dataProvider"),
    collapse: makeNodeComponent("collapse"),
    collapseServicing: makeNodeComponent("collapseServicing"),
    collapseLending: makeNodeComponent("collapseLending"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Student Lending License Requirements",
      description:
        "Summary of state laws requiring student loan servicers and lenders to obtain a license or to register. ",
      ogImageSrc:
        "https://site-assets.plasmic.app/e9d674bafca20a098c232da3e08e7ea6.png",
      canonical: "https://www.studentloancompliance.com"
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
