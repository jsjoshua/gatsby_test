// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: bgrEjR4gGnPuYqLGQjeP4y
// Component: pakgEB4oP13O

import * as React from "react";

import {
  Link,
  GatsbyLinkProps as LinkProps,
  navigate as __gatsbyNavigate
} from "gatsby";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import NavBar from "../../NavBar"; // plasmic-import: R5FZTb6dO-Yu/component
import { DataProvider } from "@plasmicpkgs/plasmic-basic-components";
import { AntdSingleCollapse } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { singleCollapseHelpers as AntdSingleCollapse_Helpers } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import Button from "../../Button"; // plasmic-import: Cz4UVbn1HIIn/component
import Footer from "../../Footer"; // plasmic-import: nhYQSvlC96hQ/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantscCtbpR9AU6 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: CCtbpR9aU__6/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import * as plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import * as plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import * as projectcss from "./plasmic.module.css"; // plasmic-import: bgrEjR4gGnPuYqLGQjeP4y/projectcss
import * as sty from "./PlasmicHomepage.module.css"; // plasmic-import: pakgEB4oP13O/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: U2IBHMUDKU1z/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: MYRX8LPNKk6g/icon
import untitledDesign1PngMxCraddIHg from "./images/untitledDesign1Png.png"; // plasmic-import: mxCradd__IHg/picture

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {
  collapseOpen?: boolean;
};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>("collapseOpen");

export type PlasmicHomepage__OverridesType = {
  root?: Flex__<"div">;
  navBar?: Flex__<typeof NavBar>;
  dataProvider?: Flex__<typeof DataProvider>;
  collapse?: Flex__<typeof AntdSingleCollapse>;
  freeBox?: Flex__<"div">;
  collapseServicing?: Flex__<typeof AntdSingleCollapse>;
  collapseLending?: Flex__<typeof AntdSingleCollapse>;
  footer?: Flex__<typeof Footer>;
};

export interface DefaultHomepageProps {
  collapseOpen?: boolean;
  className?: string;
}

const $$ = {};

export function Head() {
  return (
    <>
      <meta name="twitter:card" content="summary_large_image" />
      <title key="title">{PlasmicHomepage.pageMetadata.title}</title>
      <meta
        key="og:title"
        property="og:title"
        content={PlasmicHomepage.pageMetadata.title}
      />
      <meta
        key="twitter:title"
        name="twitter:title"
        content={PlasmicHomepage.pageMetadata.title}
      />
      <meta
        key="description"
        name="description"
        content={PlasmicHomepage.pageMetadata.description}
      />
      <meta
        key="og:description"
        property="og:description"
        content={PlasmicHomepage.pageMetadata.description}
      />
      <meta
        key="twitter:description"
        name="twitter:description"
        content={PlasmicHomepage.pageMetadata.description}
      />
      <meta
        key="og:image"
        property="og:image"
        content={PlasmicHomepage.pageMetadata.ogImageSrc}
      />
      <meta
        key="twitter:image"
        name="twitter:image"
        content={PlasmicHomepage.pageMetadata.ogImageSrc}
      />
      <link ref="canonical" href={PlasmicHomepage.pageMetadata.canonical} />
    </>
  );
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "collapse[].open",
        type: "private",
        variableType: "boolean",

        onMutate: generateOnMutateForSpec("open", AntdSingleCollapse_Helpers)
      },
      {
        path: "collapseServicing[].open",
        type: "private",
        variableType: "boolean",

        onMutate: generateOnMutateForSpec("open", AntdSingleCollapse_Helpers)
      },
      {
        path: "collapseLending[].open",
        type: "private",
        variableType: "boolean",

        onMutate: generateOnMutateForSpec("open", AntdSingleCollapse_Helpers)
      },
      {
        path: "navBar.loginSuccess4",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "navBar.firstName",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "navBar.lastName",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "navBar.hostlessRadixPopoverOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "navBar.passwordReset2",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "navBar.plasmicAntd5FormValue2",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "navBar.plasmicAntd5CollapseActiveKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "1"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    nocodb: usePlasmicDataOp(() => {
      return {
        sourceId: "fQaquYyjXBj4Sgvj4PHToP",
        opId: "78200653-0621-4b11-8c08-d922cc504500",
        userArgs: {},
        cacheKey: `plasmic.$.78200653-0621-4b11-8c08-d922cc504500.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantscCtbpR9AU6()
  });

  return (
    <React.Fragment>
      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <section className={classNames(projectcss.all, sty.section__tjpe1)}>
            <NavBar
              data-plasmic-name={"navBar"}
              data-plasmic-override={overrides.navBar}
              className={classNames("__wab_instance", sty.navBar)}
              firstName={generateStateValueProp($state, [
                "navBar",
                "firstName"
              ])}
              hostlessRadixPopoverOpen={generateStateValueProp($state, [
                "navBar",
                "hostlessRadixPopoverOpen"
              ])}
              lastName={generateStateValueProp($state, ["navBar", "lastName"])}
              loginSuccess4={generateStateValueProp($state, [
                "navBar",
                "loginSuccess4"
              ])}
              onFirstNameChange={generateStateOnChangeProp($state, [
                "navBar",
                "firstName"
              ])}
              onHostlessRadixPopoverOpenChange={generateStateOnChangeProp(
                $state,
                ["navBar", "hostlessRadixPopoverOpen"]
              )}
              onLastNameChange={generateStateOnChangeProp($state, [
                "navBar",
                "lastName"
              ])}
              onLoginSuccess4Change={generateStateOnChangeProp($state, [
                "navBar",
                "loginSuccess4"
              ])}
              onPasswordReset2Change={generateStateOnChangeProp($state, [
                "navBar",
                "passwordReset2"
              ])}
              onPlasmicAntd5CollapseActiveKeyChange={generateStateOnChangeProp(
                $state,
                ["navBar", "plasmicAntd5CollapseActiveKey"]
              )}
              onPlasmicAntd5FormValue2Change={generateStateOnChangeProp(
                $state,
                ["navBar", "plasmicAntd5FormValue2"]
              )}
              passwordReset2={generateStateValueProp($state, [
                "navBar",
                "passwordReset2"
              ])}
              plasmicAntd5CollapseActiveKey={generateStateValueProp($state, [
                "navBar",
                "plasmicAntd5CollapseActiveKey"
              ])}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__lsBuP
              )}
            >
              {
                "Student loan Servicing Licensing \nLender/Holder Registration Requirements"
              }
            </div>
          </section>
          <section className={classNames(projectcss.all, sty.section__phxsw)}>
            <div className={classNames(projectcss.all, sty.columns__voWBa)}>
              <div className={classNames(projectcss.all, sty.column__eEc9Q)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__kxWnt
                  )}
                >
                  {"State Name"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.column__pfR3E)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__rhoTg
                  )}
                >
                  {"Licenses Servicers?"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.column__bMbOb)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ptaWz
                  )}
                >
                  {"Lenders Must Register?"}
                </div>
              </div>
            </div>
          </section>
          <section className={classNames(projectcss.all, sty.section___3Czur)}>
            {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              (() => {
                try {
                  return $queries.nocodb.data.response.list;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            ).map((__plasmic_item_0, __plasmic_idx_0) => {
              const currentItem = __plasmic_item_0;
              const currentIndex = __plasmic_idx_0;
              return (
                <DataProvider
                  data-plasmic-name={"dataProvider"}
                  data-plasmic-override={overrides.dataProvider}
                  className={classNames("__wab_instance", sty.dataProvider)}
                  data={currentItem}
                  key={currentIndex}
                  name={(() => {
                    try {
                      return currentItem;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                >
                  <DataCtxReader__>
                    {$ctx =>
                      (() => {
                        const child$Props = {
                          bordered: false,
                          className: classNames("__wab_instance", sty.collapse),
                          defaultOpen: false,
                          disabled: (() => {
                            try {
                              return (
                                currentItem.lending_registration_yn == "No" &&
                                currentItem.servicing_license_yn == "No"
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return false;
                              }
                              throw e;
                            }
                          })(),
                          ghost: true,
                          headerClass: classNames({
                            [sty["pcls_8fWfCkLpSfYH"]]: true
                          }),
                          label2: (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.columns__khLHg
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.column__yv2Ju
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__erEkk
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.state;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Collapse Header";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.column__rh5X
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__cNLvZ
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.servicing_license_yn;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.column__es3Mf
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___97EHo
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.lending_registration_yn;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </div>
                            </div>
                          ),
                          onChange: generateStateOnChangePropForCodeComponents(
                            $state,
                            "open",
                            ["collapse", __plasmic_idx_0, "open"],
                            AntdSingleCollapse_Helpers
                          ),
                          open: generateStateValueProp($state, [
                            "collapse",
                            __plasmic_idx_0,
                            "open"
                          ]),
                          showArrow: true,
                          size: "small"
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "open",
                              plasmicStateName: "collapse[].open"
                            }
                          ],
                          [__plasmic_idx_0],
                          AntdSingleCollapse_Helpers ?? {},
                          child$Props
                        );
                        initializePlasmicStates(
                          $state,
                          [
                            {
                              name: "collapse[].open",
                              initFunc: ({ $props, $state, $queries }) => false
                            }
                          ],
                          [__plasmic_idx_0]
                        );
                        return (
                          <AntdSingleCollapse
                            data-plasmic-name={"collapse"}
                            data-plasmic-override={overrides.collapse}
                            {...child$Props}
                          >
                            {(() => {
                              try {
                                return !$state.navBar.loginSuccess4;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <div
                                data-plasmic-name={"freeBox"}
                                data-plasmic-override={overrides.freeBox}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.columns__n3O4O
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.column__noaU6
                                    )}
                                  >
                                    <Button
                                      className={classNames(
                                        "__wab_instance",
                                        sty.button__oFx0L
                                      )}
                                      color={"softSand"}
                                      onClick={async event => {
                                        const $steps = {};

                                        $steps[
                                          "updateNavBarHostlessRadixPopoverOpen"
                                        ] = true
                                          ? (() => {
                                              const actionArgs = {
                                                operation: 0,
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: [
                                                    "navBar",
                                                    "hostlessRadixPopoverOpen"
                                                  ]
                                                },
                                                value: true
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps[
                                            "updateNavBarHostlessRadixPopoverOpen"
                                          ] != null &&
                                          typeof $steps[
                                            "updateNavBarHostlessRadixPopoverOpen"
                                          ] === "object" &&
                                          typeof $steps[
                                            "updateNavBarHostlessRadixPopoverOpen"
                                          ].then === "function"
                                        ) {
                                          $steps[
                                            "updateNavBarHostlessRadixPopoverOpen"
                                          ] = await $steps[
                                            "updateNavBarHostlessRadixPopoverOpen"
                                          ];
                                        }

                                        $steps[
                                          "updateNavBarPlasmicAntd5CollapseActiveKey"
                                        ] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: [
                                                    "navBar",
                                                    "plasmicAntd5CollapseActiveKey"
                                                  ]
                                                },
                                                operation: 0,
                                                value: 3
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps[
                                            "updateNavBarPlasmicAntd5CollapseActiveKey"
                                          ] != null &&
                                          typeof $steps[
                                            "updateNavBarPlasmicAntd5CollapseActiveKey"
                                          ] === "object" &&
                                          typeof $steps[
                                            "updateNavBarPlasmicAntd5CollapseActiveKey"
                                          ].then === "function"
                                        ) {
                                          $steps[
                                            "updateNavBarPlasmicAntd5CollapseActiveKey"
                                          ] = await $steps[
                                            "updateNavBarPlasmicAntd5CollapseActiveKey"
                                          ];
                                        }

                                        $steps["runCode"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                customFunction: async () => {
                                                  return (() => {
                                                    return window.scroll({
                                                      top: 0,
                                                      left: 0,
                                                      behavior: "smooth"
                                                    });
                                                  })();
                                                }
                                              };
                                              return (({ customFunction }) => {
                                                return customFunction();
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["runCode"] != null &&
                                          typeof $steps["runCode"] ===
                                            "object" &&
                                          typeof $steps["runCode"].then ===
                                            "function"
                                        ) {
                                          $steps["runCode"] = await $steps[
                                            "runCode"
                                          ];
                                        }
                                      }}
                                      shape={"rounded"}
                                      size={"compact"}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__tG6Z
                                        )}
                                      >
                                        {"Request Access"}
                                      </div>
                                    </Button>
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.column__op5Qt
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__t23T1
                                      )}
                                    >
                                      {"or"}
                                    </div>
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.column___0Q018
                                    )}
                                  >
                                    <Button
                                      className={classNames(
                                        "__wab_instance",
                                        sty.button__qfRlv
                                      )}
                                      color={"softSand"}
                                      onClick={async event => {
                                        const $steps = {};

                                        $steps[
                                          "updateNavBarHostlessRadixPopoverOpen"
                                        ] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: [
                                                    "navBar",
                                                    "hostlessRadixPopoverOpen"
                                                  ]
                                                },
                                                operation: 0,
                                                value: true
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps[
                                            "updateNavBarHostlessRadixPopoverOpen"
                                          ] != null &&
                                          typeof $steps[
                                            "updateNavBarHostlessRadixPopoverOpen"
                                          ] === "object" &&
                                          typeof $steps[
                                            "updateNavBarHostlessRadixPopoverOpen"
                                          ].then === "function"
                                        ) {
                                          $steps[
                                            "updateNavBarHostlessRadixPopoverOpen"
                                          ] = await $steps[
                                            "updateNavBarHostlessRadixPopoverOpen"
                                          ];
                                        }

                                        $steps["runCode"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                customFunction: async () => {
                                                  return (() => {
                                                    return window.scroll({
                                                      top: 0,
                                                      left: 0,
                                                      behavior: "smooth"
                                                    });
                                                  })();
                                                }
                                              };
                                              return (({ customFunction }) => {
                                                return customFunction();
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["runCode"] != null &&
                                          typeof $steps["runCode"] ===
                                            "object" &&
                                          typeof $steps["runCode"].then ===
                                            "function"
                                        ) {
                                          $steps["runCode"] = await $steps[
                                            "runCode"
                                          ];
                                        }
                                      }}
                                      shape={"rounded"}
                                      size={"compact"}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__qSlT
                                        )}
                                      >
                                        {"Login"}
                                      </div>
                                    </Button>
                                  </div>
                                </div>
                              </div>
                            ) : null}
                            {(() => {
                              try {
                                return $state.navBar.loginSuccess4;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })()
                              ? (() => {
                                  const child$Props = {
                                    bordered: true,
                                    className: classNames(
                                      "__wab_instance",
                                      sty.collapseServicing
                                    ),
                                    defaultOpen: false,
                                    disabled: (() => {
                                      try {
                                        return (
                                          currentItem.servicing_license_yn ==
                                          "No"
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })(),
                                    ghost: true,
                                    label2:
                                      "Servicing License Requirements and Definitions",
                                    onChange:
                                      generateStateOnChangePropForCodeComponents(
                                        $state,
                                        "open",
                                        [
                                          "collapseServicing",
                                          __plasmic_idx_0,
                                          "open"
                                        ],
                                        AntdSingleCollapse_Helpers
                                      ),
                                    open: generateStateValueProp($state, [
                                      "collapseServicing",
                                      __plasmic_idx_0,
                                      "open"
                                    ]),
                                    showArrow: true,
                                    size: "small"
                                  };
                                  initializeCodeComponentStates(
                                    $state,
                                    [
                                      {
                                        name: "open",
                                        plasmicStateName:
                                          "collapseServicing[].open"
                                      }
                                    ],
                                    [__plasmic_idx_0],
                                    AntdSingleCollapse_Helpers ?? {},
                                    child$Props
                                  );
                                  initializePlasmicStates(
                                    $state,
                                    [
                                      {
                                        name: "collapseServicing[].open",
                                        initFunc: ({
                                          $props,
                                          $state,
                                          $queries
                                        }) => false
                                      }
                                    ],
                                    [__plasmic_idx_0]
                                  );
                                  return (
                                    <AntdSingleCollapse
                                      data-plasmic-name={"collapseServicing"}
                                      data-plasmic-override={
                                        overrides.collapseServicing
                                      }
                                      {...child$Props}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.columns__gDSep
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.column__v8Wi3
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__nw6Z
                                            )}
                                          >
                                            {"Licenses Servicers?"}
                                          </div>
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.column__hv9RN
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text___1Rgyr
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.servicing_license_yn;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                        </div>
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.columns__wN3H3
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.column__joYr
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__ozFpO
                                            )}
                                          >
                                            {'Definition of "Student Loan"'}
                                          </div>
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.column__geKtg
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__dcry8
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.serv_def_studentloan;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                        </div>
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.columns__cJoB
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.column__cApct
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__idois
                                            )}
                                          >
                                            {'Definition of "servicing"'}
                                          </div>
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.column__x4Pcp
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__a7KsX
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.serv_def_servicing;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                        </div>
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.columns__eDa8Y
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.column___8XPv2
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__pi2T3
                                            )}
                                          >
                                            {
                                              "Who must obtain a servicing license?"
                                            }
                                          </div>
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.column___0RRZc
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__sJxob
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.serv_who_needs;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                        </div>
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.columns__wb58D
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.column__hD3M
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__nyFzf
                                            )}
                                          >
                                            {"What exceptions apply?"}
                                          </div>
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.column__fl6PS
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__ulN0W
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.serv_exceptions;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                        </div>
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.columns__xc3Pc
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.column__mFu7L
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text___4O0CL
                                            )}
                                          >
                                            {"Other"}
                                          </div>
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.column__iAe5
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__ydCh7
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.other;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                        </div>
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.columns__rDlij
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.column__neGpI
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text___4V78V
                                            )}
                                          >
                                            {"Links"}
                                          </div>
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.column___6Jl9F
                                          )}
                                        >
                                          <PlasmicLink__
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.a,
                                              projectcss.__wab_text,
                                              sty.link___9Jwty
                                            )}
                                            component={Link}
                                            href={(() => {
                                              try {
                                                return currentItem.servicing_law_link;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "";
                                                }
                                                throw e;
                                              }
                                            })()}
                                            platform={"gatsby"}
                                            target={"_blank"}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.servicing_law_link;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "Some link text";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </PlasmicLink__>
                                        </div>
                                      </div>
                                    </AntdSingleCollapse>
                                  );
                                })()
                              : null}
                            {(() => {
                              try {
                                return $state.navBar.loginSuccess4;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })()
                              ? (() => {
                                  const child$Props = {
                                    bordered: true,
                                    className: classNames(
                                      "__wab_instance",
                                      sty.collapseLending
                                    ),
                                    defaultOpen: false,
                                    disabled: (() => {
                                      try {
                                        return (
                                          currentItem.lending_registration_yn ==
                                          "No"
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })(),
                                    ghost: true,
                                    headerClass: classNames({
                                      [sty["pcls_TmHpl6bPHYvd"]]: true
                                    }),
                                    label2:
                                      "Lending/Holding Registration Requirements and Definitions",
                                    onChange:
                                      generateStateOnChangePropForCodeComponents(
                                        $state,
                                        "open",
                                        [
                                          "collapseLending",
                                          __plasmic_idx_0,
                                          "open"
                                        ],
                                        AntdSingleCollapse_Helpers
                                      ),
                                    open: generateStateValueProp($state, [
                                      "collapseLending",
                                      __plasmic_idx_0,
                                      "open"
                                    ]),
                                    showArrow: true,
                                    size: "small"
                                  };
                                  initializeCodeComponentStates(
                                    $state,
                                    [
                                      {
                                        name: "open",
                                        plasmicStateName:
                                          "collapseLending[].open"
                                      }
                                    ],
                                    [__plasmic_idx_0],
                                    AntdSingleCollapse_Helpers ?? {},
                                    child$Props
                                  );
                                  initializePlasmicStates(
                                    $state,
                                    [
                                      {
                                        name: "collapseLending[].open",
                                        initFunc: ({
                                          $props,
                                          $state,
                                          $queries
                                        }) => false
                                      }
                                    ],
                                    [__plasmic_idx_0]
                                  );
                                  return (
                                    <AntdSingleCollapse
                                      data-plasmic-name={"collapseLending"}
                                      data-plasmic-override={
                                        overrides.collapseLending
                                      }
                                      {...child$Props}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.columns__rvNKp
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.column__p7Zbx
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__dUdpk
                                            )}
                                          >
                                            {
                                              "Registration of Student Lenders Required?"
                                            }
                                          </div>
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.column__sbiJn
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__n9B5A
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.lending_registration_yn;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                        </div>
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.columns__uenv6
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.column__hhAA
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__mbYAg
                                            )}
                                          >
                                            {'Definition of "Student Loan"'}
                                          </div>
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.column___9WVpq
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__akbI
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.reg_defin_studentloan;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                        </div>
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.columns__fZkV
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.column___0CPbJ
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__wSq
                                            )}
                                          >
                                            {"Who must register?"}
                                          </div>
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.column__g0BJz
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__ilRx7
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.reg_who_needs;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                        </div>
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.columns__tOdU
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.column__tYSxi
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__oWcJm
                                            )}
                                          >
                                            {"What exceptions apply?"}
                                          </div>
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.column__fMgZi
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__jPxws
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.reg_exceptions;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                        </div>
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.columns__vHIej
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.column__umJUs
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__bGMq
                                            )}
                                          >
                                            {"Links"}
                                          </div>
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.column__pWo8D
                                          )}
                                        >
                                          <PlasmicLink__
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.a,
                                              projectcss.__wab_text,
                                              sty.link__qfim
                                            )}
                                            component={Link}
                                            href={(() => {
                                              try {
                                                return currentItem.lending_law_link;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })()}
                                            platform={"gatsby"}
                                            target={"_blank"}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.lending_law_link;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "Some link text";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </PlasmicLink__>
                                        </div>
                                      </div>
                                    </AntdSingleCollapse>
                                  );
                                })()
                              : null}
                          </AntdSingleCollapse>
                        );
                      })()
                    }
                  </DataCtxReader__>
                </DataProvider>
              );
            })}
            <Footer
              data-plasmic-name={"footer"}
              data-plasmic-override={overrides.footer}
              className={classNames("__wab_instance", sty.footer)}
            />
          </section>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navBar",
    "dataProvider",
    "collapse",
    "freeBox",
    "collapseServicing",
    "collapseLending",
    "footer"
  ],
  navBar: ["navBar"],
  dataProvider: [
    "dataProvider",
    "collapse",
    "freeBox",
    "collapseServicing",
    "collapseLending"
  ],
  collapse: ["collapse", "freeBox", "collapseServicing", "collapseLending"],
  freeBox: ["freeBox"],
  collapseServicing: ["collapseServicing"],
  collapseLending: ["collapseLending"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navBar: typeof NavBar;
  dataProvider: typeof DataProvider;
  collapse: typeof AntdSingleCollapse;
  freeBox: "div";
  collapseServicing: typeof AntdSingleCollapse;
  collapseLending: typeof AntdSingleCollapse;
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navBar: makeNodeComponent("navBar"),
    dataProvider: makeNodeComponent("dataProvider"),
    collapse: makeNodeComponent("collapse"),
    freeBox: makeNodeComponent("freeBox"),
    collapseServicing: makeNodeComponent("collapseServicing"),
    collapseLending: makeNodeComponent("collapseLending"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Student Lending License Requirements",
      description:
        "Summary of state laws requiring student loan servicers and lenders to obtain a license or to register. ",
      ogImageSrc:
        "https://site-assets.plasmic.app/e9d674bafca20a098c232da3e08e7ea6.png",
      canonical: "https://www.studentloancompliance.com"
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
