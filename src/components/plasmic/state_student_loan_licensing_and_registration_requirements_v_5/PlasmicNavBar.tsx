// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: bgrEjR4gGnPuYqLGQjeP4y
// Component: R5FZTb6dO-Yu

import * as React from "react";

import {
  Link,
  GatsbyLinkProps as LinkProps,
  navigate as __gatsbyNavigate
} from "gatsby";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import { NavigationBar } from "@plasmicpkgs/plasmic-nav";
import Button from "../../Button"; // plasmic-import: Cz4UVbn1HIIn/component
import { Popover } from "@plasmicpkgs/radix-ui";
import Button2 from "../../Button"; // plasmic-import: 5nirPCGmCnRD/component
import { AntdAccordion } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { accordionHelpers as AntdAccordion_Helpers } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { AntdAccordionItem } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdPassword } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdPassword_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { AntdTextArea } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdTextArea_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";

import "@plasmicapp/react-web/lib/plasmic.css";

import * as plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import * as plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import * as projectcss from "./plasmic.module.css"; // plasmic-import: bgrEjR4gGnPuYqLGQjeP4y/projectcss
import * as sty from "./PlasmicNavBar.module.css"; // plasmic-import: R5FZTb6dO-Yu/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: U2IBHMUDKU1z/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: MYRX8LPNKk6g/icon
import ChecksvgIcon2 from "../radix_ui/icons/PlasmicIcon__Checksvg"; // plasmic-import: Wyt3GMMsLefj/icon
import IconIcon2 from "../radix_ui/icons/PlasmicIcon__Icon"; // plasmic-import: MbDRsJU0e3bw/icon
import logoNoBackgroundpngUCcHzyxvHr8K from "./images/logoNoBackgroundpng.png"; // plasmic-import: UCcHZYXVHr8K/picture

createPlasmicElementProxy;

export type PlasmicNavBar__VariantMembers = {};
export type PlasmicNavBar__VariantsArgs = {};
type VariantPropType = keyof PlasmicNavBar__VariantsArgs;
export const PlasmicNavBar__VariantProps = new Array<VariantPropType>();

export type PlasmicNavBar__ArgsType = {
  loginSuccess4?: boolean;
  onLoginSuccess4Change?: (val: string) => void;
  firstName?: string;
  onFirstNameChange?: (val: string) => void;
  lastName?: string;
  onLastNameChange?: (val: string) => void;
  hostlessRadixPopoverOpen?: boolean;
  onHostlessRadixPopoverOpenChange?: (val: boolean) => void;
  passwordReset2?: boolean;
  onPasswordReset2Change?: (val: string) => void;
  onPlasmicAntd5FormValue2Change?: (val: any) => void;
  plasmicAntd5CollapseActiveKey?: string;
  onPlasmicAntd5CollapseActiveKeyChange?: (val: string) => void;
};
type ArgPropType = keyof PlasmicNavBar__ArgsType;
export const PlasmicNavBar__ArgProps = new Array<ArgPropType>(
  "loginSuccess4",
  "onLoginSuccess4Change",
  "firstName",
  "onFirstNameChange",
  "lastName",
  "onLastNameChange",
  "hostlessRadixPopoverOpen",
  "onHostlessRadixPopoverOpenChange",
  "passwordReset2",
  "onPasswordReset2Change",
  "onPlasmicAntd5FormValue2Change",
  "plasmicAntd5CollapseActiveKey",
  "onPlasmicAntd5CollapseActiveKeyChange"
);

export type PlasmicNavBar__OverridesType = {
  root?: Flex__<typeof NavigationBar>;
  link?: Flex__<"a"> & Partial<LinkProps>;
  popoverCore2?: Flex__<typeof Popover>;
  popoverCore?: Flex__<typeof Popover>;
  accordion?: Flex__<typeof AntdAccordion>;
  form?: Flex__<typeof FormWrapper>;
  form2?: Flex__<typeof FormWrapper>;
  passwordResetEmail?: Flex__<typeof FormItemWrapper>;
  emailReset?: Flex__<typeof AntdInput>;
  accessRequestAccordian?: Flex__<typeof AntdAccordionItem>;
  accessRequestForm?: Flex__<typeof FormWrapper>;
  textArea?: Flex__<typeof AntdTextArea>;
};

export interface DefaultNavBarProps {
  loginSuccess4?: boolean;
  onLoginSuccess4Change?: (val: string) => void;
  firstName?: string;
  onFirstNameChange?: (val: string) => void;
  lastName?: string;
  onLastNameChange?: (val: string) => void;
  hostlessRadixPopoverOpen?: boolean;
  onHostlessRadixPopoverOpenChange?: (val: boolean) => void;
  passwordReset2?: boolean;
  onPasswordReset2Change?: (val: string) => void;
  onPlasmicAntd5FormValue2Change?: (val: any) => void;
  plasmicAntd5CollapseActiveKey?: string;
  onPlasmicAntd5CollapseActiveKeyChange?: (val: string) => void;
  className?: string;
}

const $$ = {};

function PlasmicNavBar__RenderFunc(props: {
  variants: PlasmicNavBar__VariantsArgs;
  args: PlasmicNavBar__ArgsType;
  overrides: PlasmicNavBar__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "loginSuccess4",
        type: "writable",
        variableType: "boolean",

        valueProp: "loginSuccess4",
        onChangeProp: "onLoginSuccess4Change"
      },
      {
        path: "popoverCore2.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "firstName",
        type: "writable",
        variableType: "text",

        valueProp: "firstName",
        onChangeProp: "onFirstNameChange"
      },
      {
        path: "lastName",
        type: "writable",
        variableType: "text",

        valueProp: "lastName",
        onChangeProp: "onLastNameChange"
      },
      {
        path: "popoverCore.open",
        type: "writable",
        variableType: "boolean",

        valueProp: "hostlessRadixPopoverOpen",
        onChangeProp: "onHostlessRadixPopoverOpenChange"
      },
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "passwordReset2",
        type: "writable",
        variableType: "boolean",

        valueProp: "passwordReset2",
        onChangeProp: "onPasswordReset2Change"
      },
      {
        path: "form2.value",
        type: "readonly",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onChangeProp: "onPlasmicAntd5FormValue2Change",
        refName: "form2",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form2.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form2",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "emailReset.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "accordion.activePanelId",
        type: "writable",
        variableType: "text",

        valueProp: "plasmicAntd5CollapseActiveKey",
        onChangeProp: "onPlasmicAntd5CollapseActiveKeyChange",

        onMutate: generateOnMutateForSpec(
          "activePanelId",
          AntdAccordion_Helpers
        )
      },
      {
        path: "accessRequestForm.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "accessRequestForm",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "accessRequestForm.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "accessRequestForm",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  return (
    <NavigationBar
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      brand={
        <PlasmicLink__
          data-plasmic-name={"link"}
          data-plasmic-override={overrides.link}
          className={classNames(projectcss.all, projectcss.a, sty.link)}
          component={Link}
          href={"httsp://www.joshualawfirm.com"}
          platform={"gatsby"}
          target={"_blank"}
        >
          <PlasmicImg__
            alt={""}
            className={classNames(sty.img__k5Cg)}
            displayHeight={"40px"}
            displayMaxHeight={"none"}
            displayMaxWidth={"none"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"auto"}
            src={{
              src: logoNoBackgroundpngUCcHzyxvHr8K,
              fullWidth: 1000,
              fullHeight: 169,
              aspectRatio: undefined
            }}
          />
        </PlasmicLink__>
      }
      className={classNames(
        "__wab_instance",
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
      closeButton={
        <PlasmicImg__
          alt={""}
          className={classNames(sty.img___9844Q)}
          displayHeight={"auto"}
          displayMaxHeight={"none"}
          displayMaxWidth={"none"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"auto"}
          src={"https://static1.plasmic.app/close.svg"}
        />
      }
      itemsGap={8}
      menuItems={
        <React.Fragment>
          {(() => {
            try {
              return $ctx.pagePath != "/";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <Button
              className={classNames("__wab_instance", sty.button__rwocz)}
              color={"link"}
              onClick={async event => {
                const $steps = {};

                $steps["goToHomepage"] = true
                  ? (() => {
                      const actionArgs = { destination: `/` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __gatsbyNavigate(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToHomepage"] != null &&
                  typeof $steps["goToHomepage"] === "object" &&
                  typeof $steps["goToHomepage"].then === "function"
                ) {
                  $steps["goToHomepage"] = await $steps["goToHomepage"];
                }
              }}
              shape={"sharp"}
              size={"minimal"}
              target={false}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___5Ga4O
                )}
              >
                {"Home"}
              </div>
            </Button>
          ) : null}
          <Button
            className={classNames("__wab_instance", sty.button__qbvdO)}
            color={"clear"}
            link={"https://www.joshualawfirm.com/joshua-law-firm-blog-2/"}
            size={"compact"}
            target={true}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__a1Stl
              )}
            >
              {"Firm Blog"}
            </div>
          </Button>
          <Popover
            data-plasmic-name={"popoverCore2"}
            data-plasmic-override={overrides.popoverCore2}
            className={classNames("__wab_instance", sty.popoverCore2)}
            defaultOpen={false}
            onOpenChange={generateStateOnChangeProp($state, [
              "popoverCore2",
              "open"
            ])}
            open={generateStateValueProp($state, ["popoverCore2", "open"])}
            overlay={
              <div className={classNames(projectcss.all, sty.freeBox___6A2Z7)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___4EIch
                  )}
                >
                  {
                    "This site is provided as-is with no warranties that any of the information is correct or complete.  This website is not intended to be, and should not be construed as, legal advice.  Your use of this website does not create an attorney-client relationship between you and Joshua Law Firm LLC "
                  }
                </div>
              </div>
            }
            themeResetClass={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens,
              plasmic_plasmic_rich_components_css.plasmic_tokens
            )}
          >
            <Button2
              className={classNames("__wab_instance", sty.button___06EZn)}
              color={"clear"}
              size={"compact"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__jk4Za
                )}
              >
                {"Terms of Use"}
              </div>
            </Button2>
          </Popover>
          <Popover
            data-plasmic-name={"popoverCore"}
            data-plasmic-override={overrides.popoverCore}
            className={classNames("__wab_instance", sty.popoverCore)}
            defaultOpen={false}
            onOpenChange={generateStateOnChangeProp($state, [
              "popoverCore",
              "open"
            ])}
            open={generateStateValueProp($state, ["popoverCore", "open"])}
            overlay={
              <div className={classNames(projectcss.all, sty.freeBox__vmayc)}>
                {(() => {
                  try {
                    return $state.loginSuccess4;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <Button
                    className={classNames("__wab_instance", sty.button__kfomk)}
                    color={"clear"}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateLoginSuccess4"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loginSuccess4"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateLoginSuccess4"] != null &&
                        typeof $steps["updateLoginSuccess4"] === "object" &&
                        typeof $steps["updateLoginSuccess4"].then === "function"
                      ) {
                        $steps["updateLoginSuccess4"] = await $steps[
                          "updateLoginSuccess4"
                        ];
                      }
                    }}
                    size={"compact"}
                  >
                    {"Log Out"}
                  </Button>
                ) : null}
                {(() => {
                  try {
                    return !$state.loginSuccess4;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })()
                  ? (() => {
                      const child$Props = {
                        activeKey: generateStateValueProp($state, [
                          "accordion",
                          "activePanelId"
                        ]),
                        bordered: false,
                        className: classNames("__wab_instance", sty.accordion),
                        defaultActiveKey: "1",
                        ghost: true,
                        items: (
                          <React.Fragment>
                            <AntdAccordionItem
                              className={classNames(
                                "__wab_instance",
                                sty.accordionItem__t4XMj
                              )}
                              headerClass={classNames({
                                [sty["pcls_rzp0MSGKvenD"]]: true
                              })}
                              id={1}
                              label2={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___3CkSo
                                  )}
                                >
                                  {"Log In"}
                                </div>
                              }
                              showArrow={true}
                            >
                              {(() => {
                                try {
                                  return !$state.loginSuccess4;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })()
                                ? (() => {
                                    const child$Props = {
                                      className: classNames(
                                        "__wab_instance",
                                        sty.form
                                      ),
                                      extendedOnValuesChange:
                                        generateStateOnChangePropForCodeComponents(
                                          $state,
                                          "value",
                                          ["form", "value"],
                                          FormWrapper_Helpers
                                        ),
                                      formItems: undefined,
                                      labelCol: {
                                        span: 8,
                                        horizontalOnly: true
                                      },
                                      layout: "vertical",
                                      mode: undefined,
                                      onFinish: async values => {
                                        const $steps = {};

                                        $steps["httpGet"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                dataOp: {
                                                  sourceId:
                                                    "fQaquYyjXBj4Sgvj4PHToP",
                                                  opId: "ed4728fd-4208-4644-85eb-74d0bb7feb7b",
                                                  userArgs: {
                                                    params: [
                                                      $state.form.value
                                                        .username,
                                                      $state.form.value.password
                                                    ]
                                                  },
                                                  cacheKey: null,
                                                  invalidatedKeys: null,
                                                  roleId: null
                                                }
                                              };
                                              return (async ({
                                                dataOp,
                                                continueOnError
                                              }) => {
                                                try {
                                                  const response =
                                                    await executePlasmicDataOp(
                                                      dataOp,
                                                      {
                                                        userAuthToken:
                                                          dataSourcesCtx?.userAuthToken,
                                                        user: dataSourcesCtx?.user
                                                      }
                                                    );
                                                  await plasmicInvalidate(
                                                    dataOp.invalidatedKeys
                                                  );
                                                  return response;
                                                } catch (e) {
                                                  if (!continueOnError) {
                                                    throw e;
                                                  }
                                                  return e;
                                                }
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["httpGet"] != null &&
                                          typeof $steps["httpGet"] ===
                                            "object" &&
                                          typeof $steps["httpGet"].then ===
                                            "function"
                                        ) {
                                          $steps["httpGet"] = await $steps[
                                            "httpGet"
                                          ];
                                        }

                                        $steps["updateLoginSuccess4"] =
                                          $steps.httpGet.data.response.list
                                            .length == 1
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: [
                                                      "loginSuccess4"
                                                    ]
                                                  },
                                                  operation: 0,
                                                  value: true
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;

                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    value
                                                  );
                                                  return value;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                        if (
                                          $steps["updateLoginSuccess4"] !=
                                            null &&
                                          typeof $steps[
                                            "updateLoginSuccess4"
                                          ] === "object" &&
                                          typeof $steps["updateLoginSuccess4"]
                                            .then === "function"
                                        ) {
                                          $steps["updateLoginSuccess4"] =
                                            await $steps["updateLoginSuccess4"];
                                        }

                                        $steps["updateLoginSuccess43"] =
                                          $steps.httpGet.data.response.list
                                            .length == 1
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: [
                                                      "popoverCore",
                                                      "open"
                                                    ]
                                                  },
                                                  operation: 0,
                                                  value: false
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;

                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    value
                                                  );
                                                  return value;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                        if (
                                          $steps["updateLoginSuccess43"] !=
                                            null &&
                                          typeof $steps[
                                            "updateLoginSuccess43"
                                          ] === "object" &&
                                          typeof $steps["updateLoginSuccess43"]
                                            .then === "function"
                                        ) {
                                          $steps["updateLoginSuccess43"] =
                                            await $steps[
                                              "updateLoginSuccess43"
                                            ];
                                        }

                                        $steps["updateLoginSuccess44"] =
                                          $steps.httpGet.data.response.list
                                            .length != 1
                                            ? (() => {
                                                const actionArgs = {
                                                  args: [
                                                    "info",
                                                    "Unable to log you in.",
                                                    undefined,
                                                    undefined,
                                                    "top"
                                                  ]
                                                };
                                                return $globalActions[
                                                  "plasmic-antd5-config-provider.showNotification"
                                                ]?.apply(null, [
                                                  ...actionArgs.args
                                                ]);
                                              })()
                                            : undefined;
                                        if (
                                          $steps["updateLoginSuccess44"] !=
                                            null &&
                                          typeof $steps[
                                            "updateLoginSuccess44"
                                          ] === "object" &&
                                          typeof $steps["updateLoginSuccess44"]
                                            .then === "function"
                                        ) {
                                          $steps["updateLoginSuccess44"] =
                                            await $steps[
                                              "updateLoginSuccess44"
                                            ];
                                        }

                                        $steps["updateLoginSuccess45"] =
                                          $steps.httpGet.data.response.list
                                            .length == 1
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: ["firstName"]
                                                  },
                                                  operation: 0,
                                                  value:
                                                    $steps.httpGet.data.response
                                                      .list[0].first_name
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;

                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    value
                                                  );
                                                  return value;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                        if (
                                          $steps["updateLoginSuccess45"] !=
                                            null &&
                                          typeof $steps[
                                            "updateLoginSuccess45"
                                          ] === "object" &&
                                          typeof $steps["updateLoginSuccess45"]
                                            .then === "function"
                                        ) {
                                          $steps["updateLoginSuccess45"] =
                                            await $steps[
                                              "updateLoginSuccess45"
                                            ];
                                        }

                                        $steps["updateLoginSuccess46"] =
                                          $steps.httpGet.data.response.list
                                            .length == 1
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: ["lastName"]
                                                  },
                                                  operation: 0,
                                                  value:
                                                    $steps.httpGet.data.response
                                                      .list[0].last_name
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;

                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    value
                                                  );
                                                  return value;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                        if (
                                          $steps["updateLoginSuccess46"] !=
                                            null &&
                                          typeof $steps[
                                            "updateLoginSuccess46"
                                          ] === "object" &&
                                          typeof $steps["updateLoginSuccess46"]
                                            .then === "function"
                                        ) {
                                          $steps["updateLoginSuccess46"] =
                                            await $steps[
                                              "updateLoginSuccess46"
                                            ];
                                        }

                                        $steps["updateLoginSuccess42"] =
                                          $steps.httpGet.data.response.list
                                            .length == 1
                                            ? (() => {
                                                const actionArgs = {
                                                  args: [
                                                    "success",
                                                    `Welcome ${$state.firstName} ${$state.lastName}`,
                                                    undefined,
                                                    2,
                                                    "top"
                                                  ]
                                                };
                                                return $globalActions[
                                                  "plasmic-antd5-config-provider.showNotification"
                                                ]?.apply(null, [
                                                  ...actionArgs.args
                                                ]);
                                              })()
                                            : undefined;
                                        if (
                                          $steps["updateLoginSuccess42"] !=
                                            null &&
                                          typeof $steps[
                                            "updateLoginSuccess42"
                                          ] === "object" &&
                                          typeof $steps["updateLoginSuccess42"]
                                            .then === "function"
                                        ) {
                                          $steps["updateLoginSuccess42"] =
                                            await $steps[
                                              "updateLoginSuccess42"
                                            ];
                                        }
                                      },
                                      onIsSubmittingChange:
                                        generateStateOnChangePropForCodeComponents(
                                          $state,
                                          "isSubmitting",
                                          ["form", "isSubmitting"],
                                          FormWrapper_Helpers
                                        ),
                                      ref: ref => {
                                        $refs["form"] = ref;
                                      },
                                      wrapperCol: {
                                        span: 16,
                                        horizontalOnly: true
                                      }
                                    };
                                    initializeCodeComponentStates(
                                      $state,
                                      [
                                        {
                                          name: "value",
                                          plasmicStateName: "form.value"
                                        },
                                        {
                                          name: "isSubmitting",
                                          plasmicStateName: "form.isSubmitting"
                                        }
                                      ],
                                      [],
                                      FormWrapper_Helpers ?? {},
                                      child$Props
                                    );

                                    return (
                                      <FormWrapper
                                        data-plasmic-name={"form"}
                                        data-plasmic-override={overrides.form}
                                        {...child$Props}
                                      >
                                        <FormItemWrapper
                                          className={classNames(
                                            "__wab_instance",
                                            sty.formField__asln0
                                          )}
                                          label={"User Name"}
                                          name={"username"}
                                          rules={[
                                            {
                                              ruleType: "required",
                                              message: "Required"
                                            }
                                          ]}
                                        >
                                          <AntdInput
                                            className={classNames(
                                              "__wab_instance",
                                              sty.input__knEq
                                            )}
                                          />
                                        </FormItemWrapper>
                                        <FormItemWrapper
                                          className={classNames(
                                            "__wab_instance",
                                            sty.formField__uTeT5
                                          )}
                                          label={"Password"}
                                          name={"password"}
                                          rules={[
                                            {
                                              ruleType: "required",
                                              message: "Required"
                                            }
                                          ]}
                                        >
                                          <AntdPassword
                                            className={classNames(
                                              "__wab_instance",
                                              sty.passwordInput___9HbA
                                            )}
                                          />
                                        </FormItemWrapper>
                                        <AntdButton
                                          className={classNames(
                                            "__wab_instance",
                                            sty.button__uLl8
                                          )}
                                          submitsForm={true}
                                          type={"primary"}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__r6Ohz
                                            )}
                                          >
                                            {"Submit"}
                                          </div>
                                        </AntdButton>
                                      </FormWrapper>
                                    );
                                  })()
                                : null}
                            </AntdAccordionItem>
                            <AntdAccordionItem
                              className={classNames(
                                "__wab_instance",
                                sty.accordionItem__ecix
                              )}
                              headerClass={classNames({
                                [sty["pcls_zKJ8t-DL4mBi"]]: true
                              })}
                              id={2}
                              label2={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__zirr3
                                  )}
                                >
                                  {"Reset Password"}
                                </div>
                              }
                              showArrow={true}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__mqJ0A
                                )}
                              >
                                {
                                  "Please enter your email address and a temporary password be emailed to you."
                                }
                              </div>
                              {(() => {
                                const child$Props = {
                                  className: classNames(
                                    "__wab_instance",
                                    sty.form2
                                  ),
                                  extendedOnValuesChange:
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "value",
                                      ["form2", "value"],
                                      FormWrapper_Helpers
                                    ),
                                  formItems: [
                                    {
                                      label: "Name",
                                      name: "name",
                                      inputType: "Text"
                                    },
                                    {
                                      label: "Message",
                                      name: "message",
                                      inputType: "Text Area"
                                    }
                                  ],
                                  labelCol: { span: 8, horizontalOnly: true },
                                  layout: "vertical",
                                  mode: "advanced",
                                  onFinish: async values => {
                                    const $steps = {};

                                    $steps["httpPost"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            dataOp: {
                                              sourceId:
                                                "r49LQQEGGTHUu7U9UUuJzo",
                                              opId: "8029af57-1582-46b7-a18e-5deeebfd1a06",
                                              userArgs: {
                                                body: [$state.form2.value.email]
                                              },
                                              cacheKey: null,
                                              invalidatedKeys: null,
                                              roleId: null
                                            }
                                          };
                                          return (async ({
                                            dataOp,
                                            continueOnError
                                          }) => {
                                            try {
                                              const response =
                                                await executePlasmicDataOp(
                                                  dataOp,
                                                  {
                                                    userAuthToken:
                                                      dataSourcesCtx?.userAuthToken,
                                                    user: dataSourcesCtx?.user
                                                  }
                                                );
                                              await plasmicInvalidate(
                                                dataOp.invalidatedKeys
                                              );
                                              return response;
                                            } catch (e) {
                                              if (!continueOnError) {
                                                throw e;
                                              }
                                              return e;
                                            }
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["httpPost"] != null &&
                                      typeof $steps["httpPost"] === "object" &&
                                      typeof $steps["httpPost"].then ===
                                        "function"
                                    ) {
                                      $steps["httpPost"] = await $steps[
                                        "httpPost"
                                      ];
                                    }

                                    $steps["invokeGlobalAction"] =
                                      $steps.httpPost.data.response ==
                                      "Password Updated"
                                        ? (() => {
                                            const actionArgs = {
                                              args: [
                                                undefined,
                                                "An email with a temporary password has been sent.  Follow the instructions in the email to change your password.",
                                                undefined,
                                                3,
                                                "top"
                                              ]
                                            };
                                            return $globalActions[
                                              "plasmic-antd5-config-provider.showNotification"
                                            ]?.apply(null, [
                                              ...actionArgs.args
                                            ]);
                                          })()
                                        : undefined;
                                    if (
                                      $steps["invokeGlobalAction"] != null &&
                                      typeof $steps["invokeGlobalAction"] ===
                                        "object" &&
                                      typeof $steps["invokeGlobalAction"]
                                        .then === "function"
                                    ) {
                                      $steps["invokeGlobalAction"] =
                                        await $steps["invokeGlobalAction"];
                                    }

                                    $steps["invokeGlobalAction2"] =
                                      $steps.httpPost.data.response !=
                                      "Password Updated"
                                        ? (() => {
                                            const actionArgs = {
                                              args: [
                                                "info",
                                                "Email address not recognized."
                                              ]
                                            };
                                            return $globalActions[
                                              "plasmic-antd5-config-provider.showNotification"
                                            ]?.apply(null, [
                                              ...actionArgs.args
                                            ]);
                                          })()
                                        : undefined;
                                    if (
                                      $steps["invokeGlobalAction2"] != null &&
                                      typeof $steps["invokeGlobalAction2"] ===
                                        "object" &&
                                      typeof $steps["invokeGlobalAction2"]
                                        .then === "function"
                                    ) {
                                      $steps["invokeGlobalAction2"] =
                                        await $steps["invokeGlobalAction2"];
                                    }
                                  },
                                  onIsSubmittingChange:
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "isSubmitting",
                                      ["form2", "isSubmitting"],
                                      FormWrapper_Helpers
                                    ),
                                  ref: ref => {
                                    $refs["form2"] = ref;
                                  },
                                  submitSlot: null,
                                  wrapperCol: { span: 16, horizontalOnly: true }
                                };
                                initializeCodeComponentStates(
                                  $state,
                                  [
                                    {
                                      name: "value",
                                      plasmicStateName: "form2.value"
                                    },
                                    {
                                      name: "isSubmitting",
                                      plasmicStateName: "form2.isSubmitting"
                                    }
                                  ],
                                  [],
                                  FormWrapper_Helpers ?? {},
                                  child$Props
                                );

                                return (
                                  <FormWrapper
                                    data-plasmic-name={"form2"}
                                    data-plasmic-override={overrides.form2}
                                    {...child$Props}
                                  >
                                    <FormItemWrapper
                                      data-plasmic-name={"passwordResetEmail"}
                                      data-plasmic-override={
                                        overrides.passwordResetEmail
                                      }
                                      className={classNames(
                                        "__wab_instance",
                                        sty.passwordResetEmail
                                      )}
                                      label={"Email"}
                                      name={"email"}
                                    >
                                      {(() => {
                                        const child$Props = {
                                          className: classNames(
                                            "__wab_instance",
                                            sty.emailReset
                                          ),
                                          onChange:
                                            generateStateOnChangePropForCodeComponents(
                                              $state,
                                              "value",
                                              ["emailReset", "value"],
                                              AntdInput_Helpers
                                            ),
                                          type: "email",
                                          value: generateStateValueProp(
                                            $state,
                                            ["emailReset", "value"]
                                          )
                                        };
                                        initializeCodeComponentStates(
                                          $state,
                                          [
                                            {
                                              name: "value",
                                              plasmicStateName:
                                                "emailReset.value"
                                            }
                                          ],
                                          [],
                                          AntdInput_Helpers ?? {},
                                          child$Props
                                        );

                                        return (
                                          <AntdInput
                                            data-plasmic-name={"emailReset"}
                                            data-plasmic-override={
                                              overrides.emailReset
                                            }
                                            {...child$Props}
                                          />
                                        );
                                      })()}
                                    </FormItemWrapper>
                                    <AntdButton
                                      className={classNames(
                                        "__wab_instance",
                                        sty.button__p1TVc
                                      )}
                                      submitsForm={true}
                                      type={"primary"}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__gUg6Y
                                        )}
                                      >
                                        {"Submit"}
                                      </div>
                                    </AntdButton>
                                  </FormWrapper>
                                );
                              })()}
                            </AntdAccordionItem>
                            <AntdAccordionItem
                              data-plasmic-name={"accessRequestAccordian"}
                              data-plasmic-override={
                                overrides.accessRequestAccordian
                              }
                              className={classNames(
                                "__wab_instance",
                                sty.accessRequestAccordian
                              )}
                              headerClass={classNames({
                                [sty["pcls_me7YVIH0uTJd"]]: true
                              })}
                              id={"3"}
                              label2={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__zzEpm
                                  )}
                                >
                                  {"Request Access"}
                                </div>
                              }
                              showArrow={true}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___468U
                                )}
                              >
                                {
                                  "Please enter your information below. I will review your request and respond via email.  Thank you."
                                }
                              </div>
                              {(() => {
                                const child$Props = {
                                  className: classNames(
                                    "__wab_instance",
                                    sty.accessRequestForm
                                  ),
                                  extendedOnValuesChange:
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "value",
                                      ["accessRequestForm", "value"],
                                      FormWrapper_Helpers
                                    ),
                                  formItems: undefined,
                                  labelCol: { span: 8, horizontalOnly: true },
                                  layout: "vertical",
                                  mode: undefined,
                                  onFinish: async values => {
                                    const $steps = {};

                                    $steps["httpGet"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            dataOp: {
                                              sourceId:
                                                "fQaquYyjXBj4Sgvj4PHToP",
                                              opId: "2e7468a4-c8bb-4745-af0c-edbcb6597edf",
                                              userArgs: {
                                                params: [
                                                  $state.accessRequestForm.value
                                                    .email
                                                ]
                                              },
                                              cacheKey: null,
                                              invalidatedKeys: null,
                                              roleId: null
                                            }
                                          };
                                          return (async ({
                                            dataOp,
                                            continueOnError
                                          }) => {
                                            try {
                                              const response =
                                                await executePlasmicDataOp(
                                                  dataOp,
                                                  {
                                                    userAuthToken:
                                                      dataSourcesCtx?.userAuthToken,
                                                    user: dataSourcesCtx?.user
                                                  }
                                                );
                                              await plasmicInvalidate(
                                                dataOp.invalidatedKeys
                                              );
                                              return response;
                                            } catch (e) {
                                              if (!continueOnError) {
                                                throw e;
                                              }
                                              return e;
                                            }
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["httpGet"] != null &&
                                      typeof $steps["httpGet"] === "object" &&
                                      typeof $steps["httpGet"].then ===
                                        "function"
                                    ) {
                                      $steps["httpGet"] = await $steps[
                                        "httpGet"
                                      ];
                                    }

                                    $steps["invokeGlobalAction2"] =
                                      $steps.httpGet.data.response.list
                                        .length != 0
                                        ? (() => {
                                            const actionArgs = {
                                              args: [
                                                "info",
                                                "Your email address is already associated with a user.  Please log in or reset your password.",
                                                undefined,
                                                undefined,
                                                "top"
                                              ]
                                            };
                                            return $globalActions[
                                              "plasmic-antd5-config-provider.showNotification"
                                            ]?.apply(null, [
                                              ...actionArgs.args
                                            ]);
                                          })()
                                        : undefined;
                                    if (
                                      $steps["invokeGlobalAction2"] != null &&
                                      typeof $steps["invokeGlobalAction2"] ===
                                        "object" &&
                                      typeof $steps["invokeGlobalAction2"]
                                        .then === "function"
                                    ) {
                                      $steps["invokeGlobalAction2"] =
                                        await $steps["invokeGlobalAction2"];
                                    }

                                    $steps["httpPost"] =
                                      $steps.httpGet.data.response.list
                                        .length == 0
                                        ? (() => {
                                            const actionArgs = {
                                              dataOp: {
                                                sourceId:
                                                  "r49LQQEGGTHUu7U9UUuJzo",
                                                opId: "49f0bee8-02b0-49f6-b813-9fb6a5f61fa1",
                                                userArgs: {
                                                  body: [
                                                    $state.accessRequestForm
                                                      .value.first_name,
                                                    $state.accessRequestForm
                                                      .value.last_name,
                                                    $state.accessRequestForm
                                                      .value.email,
                                                    $state.accessRequestForm
                                                      .value.company,
                                                    $state.accessRequestForm
                                                      .value.comments,
                                                    $state.accessRequestForm
                                                      .value.new_user_username,
                                                    $state.accessRequestForm
                                                      .value.new_user_password2
                                                  ]
                                                },
                                                cacheKey: null,
                                                invalidatedKeys: null,
                                                roleId: null
                                              }
                                            };
                                            return (async ({
                                              dataOp,
                                              continueOnError
                                            }) => {
                                              try {
                                                const response =
                                                  await executePlasmicDataOp(
                                                    dataOp,
                                                    {
                                                      userAuthToken:
                                                        dataSourcesCtx?.userAuthToken,
                                                      user: dataSourcesCtx?.user
                                                    }
                                                  );
                                                await plasmicInvalidate(
                                                  dataOp.invalidatedKeys
                                                );
                                                return response;
                                              } catch (e) {
                                                if (!continueOnError) {
                                                  throw e;
                                                }
                                                return e;
                                              }
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                    if (
                                      $steps["httpPost"] != null &&
                                      typeof $steps["httpPost"] === "object" &&
                                      typeof $steps["httpPost"].then ===
                                        "function"
                                    ) {
                                      $steps["httpPost"] = await $steps[
                                        "httpPost"
                                      ];
                                    }

                                    $steps["invokeGlobalAction"] =
                                      $steps.httpGet.data.response.list
                                        .length == 0
                                        ? (() => {
                                            const actionArgs = {
                                              args: [
                                                "info",
                                                "Thank you.  A confirmation email will be sent if your request is approved.",
                                                undefined,
                                                undefined,
                                                "top"
                                              ]
                                            };
                                            return $globalActions[
                                              "plasmic-antd5-config-provider.showNotification"
                                            ]?.apply(null, [
                                              ...actionArgs.args
                                            ]);
                                          })()
                                        : undefined;
                                    if (
                                      $steps["invokeGlobalAction"] != null &&
                                      typeof $steps["invokeGlobalAction"] ===
                                        "object" &&
                                      typeof $steps["invokeGlobalAction"]
                                        .then === "function"
                                    ) {
                                      $steps["invokeGlobalAction"] =
                                        await $steps["invokeGlobalAction"];
                                    }

                                    $steps["updatePopoverCoreOpen"] =
                                      $steps.httpGet.data.response.list
                                        .length == 0
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: [
                                                  "popoverCore",
                                                  "open"
                                                ]
                                              },
                                              operation: 0,
                                              value: false
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                    if (
                                      $steps["updatePopoverCoreOpen"] != null &&
                                      typeof $steps["updatePopoverCoreOpen"] ===
                                        "object" &&
                                      typeof $steps["updatePopoverCoreOpen"]
                                        .then === "function"
                                    ) {
                                      $steps["updatePopoverCoreOpen"] =
                                        await $steps["updatePopoverCoreOpen"];
                                    }

                                    $steps["runCode"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            customFunction: async () => {
                                              return (() => {
                                                return window.scroll({
                                                  top: 0,
                                                  left: 0,
                                                  behavior: "smooth"
                                                });
                                              })();
                                            }
                                          };
                                          return (({ customFunction }) => {
                                            return customFunction();
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["runCode"] != null &&
                                      typeof $steps["runCode"] === "object" &&
                                      typeof $steps["runCode"].then ===
                                        "function"
                                    ) {
                                      $steps["runCode"] = await $steps[
                                        "runCode"
                                      ];
                                    }
                                  },
                                  onIsSubmittingChange:
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "isSubmitting",
                                      ["accessRequestForm", "isSubmitting"],
                                      FormWrapper_Helpers
                                    ),
                                  ref: ref => {
                                    $refs["accessRequestForm"] = ref;
                                  },
                                  wrapperCol: { span: 16, horizontalOnly: true }
                                };
                                initializeCodeComponentStates(
                                  $state,
                                  [
                                    {
                                      name: "value",
                                      plasmicStateName:
                                        "accessRequestForm.value"
                                    },
                                    {
                                      name: "isSubmitting",
                                      plasmicStateName:
                                        "accessRequestForm.isSubmitting"
                                    }
                                  ],
                                  [],
                                  FormWrapper_Helpers ?? {},
                                  child$Props
                                );

                                return (
                                  <FormWrapper
                                    data-plasmic-name={"accessRequestForm"}
                                    data-plasmic-override={
                                      overrides.accessRequestForm
                                    }
                                    {...child$Props}
                                  >
                                    <FormItemWrapper
                                      className={classNames(
                                        "__wab_instance",
                                        sty.formField__epdkx
                                      )}
                                      label={"First Name"}
                                      name={"first_name"}
                                      rules={[
                                        {
                                          ruleType: "required",
                                          message: "Required field"
                                        }
                                      ]}
                                    >
                                      <AntdInput
                                        className={classNames(
                                          "__wab_instance",
                                          sty.input__ePx7C
                                        )}
                                      />
                                    </FormItemWrapper>
                                    <FormItemWrapper
                                      className={classNames(
                                        "__wab_instance",
                                        sty.formField__b42GG
                                      )}
                                      label={"Last Name"}
                                      name={"last_name"}
                                      rules={[{ ruleType: "required" }]}
                                    >
                                      <AntdInput
                                        className={classNames(
                                          "__wab_instance",
                                          sty.input__z0XCn
                                        )}
                                      />
                                    </FormItemWrapper>
                                    <FormItemWrapper
                                      className={classNames(
                                        "__wab_instance",
                                        sty.formField__ziPtu
                                      )}
                                      label={"Email"}
                                      name={"email"}
                                      rules={[{ ruleType: "required" }]}
                                    >
                                      <AntdInput
                                        className={classNames(
                                          "__wab_instance",
                                          sty.input__ouHo
                                        )}
                                      />
                                    </FormItemWrapper>
                                    <FormItemWrapper
                                      className={classNames(
                                        "__wab_instance",
                                        sty.formField__a7LT1
                                      )}
                                      label={"Company Name (if applicable)"}
                                      name={"company"}
                                    >
                                      <AntdInput
                                        className={classNames(
                                          "__wab_instance",
                                          sty.input__yZe2H
                                        )}
                                      />
                                    </FormItemWrapper>
                                    <FormItemWrapper
                                      className={classNames(
                                        "__wab_instance",
                                        sty.formField__z7Pt0
                                      )}
                                      label={"User Name"}
                                      name={"new_user_username"}
                                      rules={[
                                        {
                                          ruleType: "required",
                                          message: "Required"
                                        }
                                      ]}
                                    >
                                      <AntdInput
                                        className={classNames(
                                          "__wab_instance",
                                          sty.input__pdsam
                                        )}
                                      />
                                    </FormItemWrapper>
                                    <FormItemWrapper
                                      className={classNames(
                                        "__wab_instance",
                                        sty.formField__mjYu
                                      )}
                                      label={
                                        "Password (must be at least 8 characters)"
                                      }
                                      name={"new_user_password1"}
                                      rules={[
                                        { ruleType: "min", length: 8 },

                                        { ruleType: "required" }
                                      ]}
                                    >
                                      <AntdPassword
                                        className={classNames(
                                          "__wab_instance",
                                          sty.passwordInput__nKjfm
                                        )}
                                      />
                                    </FormItemWrapper>
                                    <FormItemWrapper
                                      className={classNames(
                                        "__wab_instance",
                                        sty.formField__yq6Ws
                                      )}
                                      label={"Retype Password"}
                                      name={"new_user_password2"}
                                      rules={[
                                        { ruleType: "required" },

                                        {
                                          ruleType: "advanced",
                                          message: "Passwords must match",
                                          custom: (rule, value) => {
                                            return (
                                              $state.accessRequestForm.value
                                                .new_user_password1 ==
                                              $state.accessRequestForm.value
                                                .new_user_password2
                                            );
                                          }
                                        }
                                      ]}
                                    >
                                      <AntdPassword
                                        className={classNames(
                                          "__wab_instance",
                                          sty.passwordInput__ap3Jm
                                        )}
                                      />
                                    </FormItemWrapper>
                                    <FormItemWrapper
                                      className={classNames(
                                        "__wab_instance",
                                        sty.formField__ysvX1
                                      )}
                                      label={"Comments"}
                                      name={"comments"}
                                    >
                                      <AntdTextArea
                                        className={classNames(
                                          "__wab_instance",
                                          sty.textArea
                                        )}
                                      />
                                    </FormItemWrapper>
                                    <AntdButton
                                      className={classNames(
                                        "__wab_instance",
                                        sty.button__v69Y
                                      )}
                                      disabled={(() => {
                                        try {
                                          return (
                                            $state.accessRequestForm.value
                                              .new_user_username.length == 0 ||
                                            $state.accessRequestForm.value.email
                                              .length == 0 ||
                                            $state.accessRequestForm.value.email
                                              .length == 0 ||
                                            $state.accessRequestForm.value
                                              .last_name.length == 0 ||
                                            $state.accessRequestForm.value
                                              .first_name.length == 0 ||
                                            $state.accessRequestForm.value
                                              .new_user_password1 !=
                                              $state.accessRequestForm.value
                                                .new_user_password2 ||
                                            $state.accessRequestForm.value
                                              .new_user_password1 !=
                                              $state.accessRequestForm.value
                                                .new_user_password2 ||
                                            $state.accessRequestForm.value
                                              .new_user_password2.length == 0
                                          );
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()}
                                      submitsForm={true}
                                      type={"primary"}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__aUQfQ
                                        )}
                                      >
                                        {"Submit"}
                                      </div>
                                    </AntdButton>
                                  </FormWrapper>
                                );
                              })()}
                            </AntdAccordionItem>
                          </React.Fragment>
                        ),
                        onChange: generateStateOnChangePropForCodeComponents(
                          $state,
                          "activePanelId",
                          ["accordion", "activePanelId"],
                          AntdAccordion_Helpers
                        ),
                        size: "small"
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "activePanelId",
                            plasmicStateName: "accordion.activePanelId"
                          }
                        ],
                        [],
                        AntdAccordion_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <AntdAccordion
                          data-plasmic-name={"accordion"}
                          data-plasmic-override={overrides.accordion}
                          {...child$Props}
                        />
                      );
                    })()
                  : null}
              </div>
            }
            side={"top"}
            themeResetClass={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens,
              plasmic_plasmic_rich_components_css.plasmic_tokens
            )}
          >
            <Button2
              className={classNames("__wab_instance", sty.button__plDy9)}
              color={"clear"}
              size={"compact"}
              submitsForm={false}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__b1BWx
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $state.loginSuccess4 == true
                        ? "Log Out"
                        : "Log In";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "Show popover";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </Button2>
          </Popover>
        </React.Fragment>
      }
      openButton={
        <PlasmicImg__
          alt={""}
          className={classNames(sty.img__gcGu)}
          displayHeight={"auto"}
          displayMaxHeight={"none"}
          displayMaxWidth={"none"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"auto"}
          src={"https://static1.plasmic.app/menu.svg"}
        />
      }
      responsiveBreakpoint={768}
    />
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "link",
    "popoverCore2",
    "popoverCore",
    "accordion",
    "form",
    "form2",
    "passwordResetEmail",
    "emailReset",
    "accessRequestAccordian",
    "accessRequestForm",
    "textArea"
  ],
  link: ["link"],
  popoverCore2: ["popoverCore2"],
  popoverCore: [
    "popoverCore",
    "accordion",
    "form",
    "form2",
    "passwordResetEmail",
    "emailReset",
    "accessRequestAccordian",
    "accessRequestForm",
    "textArea"
  ],
  accordion: [
    "accordion",
    "form",
    "form2",
    "passwordResetEmail",
    "emailReset",
    "accessRequestAccordian",
    "accessRequestForm",
    "textArea"
  ],
  form: ["form"],
  form2: ["form2", "passwordResetEmail", "emailReset"],
  passwordResetEmail: ["passwordResetEmail", "emailReset"],
  emailReset: ["emailReset"],
  accessRequestAccordian: [
    "accessRequestAccordian",
    "accessRequestForm",
    "textArea"
  ],
  accessRequestForm: ["accessRequestForm", "textArea"],
  textArea: ["textArea"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof NavigationBar;
  link: "a";
  popoverCore2: typeof Popover;
  popoverCore: typeof Popover;
  accordion: typeof AntdAccordion;
  form: typeof FormWrapper;
  form2: typeof FormWrapper;
  passwordResetEmail: typeof FormItemWrapper;
  emailReset: typeof AntdInput;
  accessRequestAccordian: typeof AntdAccordionItem;
  accessRequestForm: typeof FormWrapper;
  textArea: typeof AntdTextArea;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavBar__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavBar__VariantsArgs;
    args?: PlasmicNavBar__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNavBar__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNavBar__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNavBar__ArgProps,
          internalVariantPropNames: PlasmicNavBar__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNavBar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavBar";
  } else {
    func.displayName = `PlasmicNavBar.${nodeName}`;
  }
  return func;
}

export const PlasmicNavBar = Object.assign(
  // Top-level PlasmicNavBar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    link: makeNodeComponent("link"),
    popoverCore2: makeNodeComponent("popoverCore2"),
    popoverCore: makeNodeComponent("popoverCore"),
    accordion: makeNodeComponent("accordion"),
    form: makeNodeComponent("form"),
    form2: makeNodeComponent("form2"),
    passwordResetEmail: makeNodeComponent("passwordResetEmail"),
    emailReset: makeNodeComponent("emailReset"),
    accessRequestAccordian: makeNodeComponent("accessRequestAccordian"),
    accessRequestForm: makeNodeComponent("accessRequestForm"),
    textArea: makeNodeComponent("textArea"),

    // Metadata about props expected for PlasmicNavBar
    internalVariantProps: PlasmicNavBar__VariantProps,
    internalArgProps: PlasmicNavBar__ArgProps
  }
);

export default PlasmicNavBar;
/* prettier-ignore-end */
